{"version":3,"sources":["webpack:///./src/templates/blog-post.tsx"],"names":["props","data","post","markdownRemark","useState","wechatMode","cover","frontmatter","publicURL","date","dayjs","fields","format","articleClassName","draft","filter","Boolean","join","title","keywords","site","siteMetadata","tags","className","to","id","dateTime","src","alt","dangerouslySetInnerHTML","__html","html","query"],"mappings":"qQASe,mBAACA,GAA2B,IACjCC,EAASD,EAATC,KACFC,EAAOD,EAAKE,eAFuB,EAILC,qBAJK,mBAIlCC,EAJkC,UAMzC,IAAKH,EACH,OAAO,KAGT,IAAMI,EAAQJ,EAAKK,aAAeL,EAAKK,YAAYD,MAC/CJ,EAAKK,YAAYD,MAAME,UACvB,GACEC,EAAOC,IAAMR,EAAKS,OAAOF,MAAMG,OAAO,gBAEtCC,EAAmB,CACvBX,EAAKK,YAAYO,OAAS,QAC1BT,GAAc,eACdU,OAAOC,SAASC,KAAK,KAEvB,OACE,kBAAC,IAAD,KACE,kBAAC,IAAD,CACEC,MAAK,UAAKhB,EAAKK,YAAYW,MAAtB,SACLC,SAAQ,sBACHlB,EAAKmB,KAAKC,aAAaF,UADpB,YAEHjB,EAAKK,YAAYe,SAIxB,yBAAKC,UAAU,wBACb,uBAAGA,UAAU,kBAAiB,kBAAC,OAAD,CAAMC,GAAG,SAAT,aAC9B,6BAASD,UAAWV,EAAkBY,GAAE,gBAAWvB,EAAKS,OAAOc,KAC7D,wBAAIF,UAAU,SAASrB,EAAKK,YAAYW,OACxC,yBAAKK,UAAU,SACb,uBAAGA,UAAU,gBACX,0BAAMG,SAAUxB,EAAKS,OAAOF,MAAOA,KAIrCH,GACA,yBAAKiB,UAAU,UACb,yBAAKI,IAAKrB,EAAOsB,IAAI,MAGzB,yBAAKL,UAAU,UAAUM,wBAAyB,CAAEC,OAAQ5B,EAAK6B,YAOpE,IAAMC,EAAQ","file":"component---src-templates-blog-post-tsx-47b6ee309a6cd0bb46b4.js","sourcesContent":["import React, { useState } from 'react'\nimport { Link, graphql } from 'gatsby'\nimport dayjs from 'dayjs'\nimport { Layout, SEO } from '../components'\nimport 'prismjs/plugins/line-numbers/prism-line-numbers.css'\nimport '../styles/prism-styles.scss'\nimport './blog-post.scss'\nimport { GatsbyDataProps } from '../utils/interface'\n\nexport default (props: GatsbyDataProps) => {\n  const { data } = props\n  const post = data.markdownRemark\n\n  const [wechatMode, setWechatMode] = useState()\n\n  if (!post) {\n    return null\n  }\n\n  const cover = post.frontmatter && post.frontmatter.cover\n    ? post.frontmatter.cover.publicURL\n    : ''\n  const date = dayjs(post.fields.date).format('MMM DD, YYYY')\n\n  const articleClassName = [\n    post.frontmatter.draft && 'draft',\n    wechatMode && 'wechat-mode'\n  ].filter(Boolean).join(' ')\n\n  return (\n    <Layout>\n      <SEO\n        title={`${post.frontmatter.title} | 博客`}\n        keywords={[\n          ...data.site.siteMetadata.keywords,\n          ...post.frontmatter.tags\n        ]}\n      />\n\n      <div className='mf-content blog-post'>\n        <p className='back-to-parent'><Link to='/blog'>&laquo; 回到博客列表</Link></p>\n        <article className={articleClassName} id={`blog__${post.fields.id}`}>\n          <h1 className='title'>{post.frontmatter.title}</h1>\n          <div className='metas'>\n            <p className='publish-date'>\n              <time dateTime={post.fields.date}>{date}</time>\n            </p>\n            {/* <p className='tags'>Tags: {post.frontmatter.tags.join(', ')}</p> */}\n          </div>\n          { cover &&\n            <div className='banner'>\n              <img src={cover} alt='' />\n            </div>\n          }\n          <div className='content' dangerouslySetInnerHTML={{ __html: post.html }} />\n        </article>\n      </div>\n    </Layout>\n  )\n}\n\nexport const query = graphql`\nquery($slug: String!) {\n  site {\n    siteMetadata {\n      title,\n      keywords\n    }\n  }\n  markdownRemark(fields: { slug: { eq: $slug } }) {\n    html\n    frontmatter {\n      title\n      description\n      cover {\n        publicURL\n      }\n      tags\n      series\n      draft\n    }\n    fields {\n      id\n      date\n    }\n  }\n}`\n"],"sourceRoot":""}