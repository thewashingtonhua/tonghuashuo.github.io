{"version":3,"sources":["webpack:///./src/pages/lab/html5-input.js","webpack:///./src/config/index.ts","webpack:///./src/images/logo.png","webpack:///./src/components/seo.tsx","webpack:///./src/components/header.tsx","webpack:///./src/components/layout.tsx"],"names":["__webpack_require__","r","__webpack_exports__","d","query","react__WEBPACK_IMPORTED_MODULE_0__","react__WEBPACK_IMPORTED_MODULE_0___default","n","gatsby__WEBPACK_IMPORTED_MODULE_1__","_components_layout__WEBPACK_IMPORTED_MODULE_2__","_components_seo__WEBPACK_IMPORTED_MODULE_3__","types","HTML5Input","props","a","createElement","title","keywords","data","site","siteMetadata","className","id","to","map","type","key","htmlFor","name","placeholder","IS_PROD","process","module","exports","p","SEO","_props$description","description","_props$lang","lang","_props$meta","meta","_props$keywords","_props$title","_props$exactTitle","exactTitle","react__WEBPACK_IMPORTED_MODULE_1___default","gatsby__WEBPACK_IMPORTED_MODULE_3__","detailsQuery","render","metaDescription","react_helmet__WEBPACK_IMPORTED_MODULE_2___default","htmlAttributes","titleTemplate","concat","content","property","author","length","join","_public_static_d_1025518380_json__WEBPACK_IMPORTED_MODULE_0__","menus","text","Header","_useState","useState","_useState2","Object","slicedToArray","navMenuOpen","setNavMenuOpen","close","e","stopPropagation","isMenuActive","isMenuActiveProps","isPartiallyCurrent","react_default","Fragment","gatsby_browser_entry","src","logo","alt","onClick","getProps","Sentry","dsn","Layout","children","components_header","_755544856"],"mappings":"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","file":"component---src-pages-lab-html-5-input-js-51af0fd592faa9640d6d.js","sourcesContent":["import React, { Fragment } from 'react'\nimport { Link, graphql } from 'gatsby'\nimport Layout from '../../components/layout'\nimport SEO from '../../components/seo'\nimport './lab.scss'\nimport './html5-input.scss'\nimport { GatsbyDataProps } from '../../utils/interface'\n\nconst types = ['text', 'password', 'tel', 'email', 'file', 'date', 'datetime', 'number', 'url', 'search', 'range', 'color']\n\nconst HTML5Input = (props: GatsbyDataProps) => {\n  return (\n    <Layout>\n      <SEO\n        title='Input Type | 实验室'\n        keywords={props.data.site.siteMetadata.keywords}\n      />\n      <div className='mf-content lab-item' id='lab-html5-input'>\n        <article>\n          <Link to='/lab' className='back'>&laquo; Back</Link>\n\n          <h1>Input</h1>\n\n          { types.map(type => (\n            <Fragment key={type}>\n              <label htmlFor={type}>{type}</label>\n              <input\n                type={type}\n                name={type}\n                id={type}\n                placeholder={type}\n              />\n            </Fragment>\n          ))}\n        </article>\n      </div>\n    </Layout>\n  )\n}\n\nexport default HTML5Input\nexport const query = graphql`\nquery {\n  site {\n    siteMetadata {\n      title,\n      keywords\n    }\n  }\n}`\n","export const IS_PROD = process.env.NODE_ENV === 'production'\n\nexport const DEBUG_MODE = !IS_PROD\n","module.exports = __webpack_public_path__ + \"static/logo-8503f6989dba3ce27939964a48c8b787.png\";","import React from 'react'\nimport Helmet from 'react-helmet'\nimport { StaticQuery, graphql } from 'gatsby'\n\ninterface SEOProps {\n  description?: string,\n  lang?: string,\n  meta?: { name: string; content: any; property?: undefined; } | { property: string; content: any; name?: undefined; } | ConcatArray<{ name: string; content: any; property?: undefined; } | { property: string; content: any; name?: undefined; }>,\n  keywords?: string[],\n  title?: string,\n  exactTitle?: boolean\n}\n\nconst SEO = (props: SEOProps) => {\n  const { description = '', lang = `zh`, meta = [], keywords = [], title = '', exactTitle = false } = props\n\n  return (\n    <StaticQuery\n      query={detailsQuery}\n      render={data => {\n        const metaDescription = description || data.site.siteMetadata.description\n\n        return (\n          <Helmet\n            htmlAttributes={{\n              lang,\n            }}\n            title={title}\n            titleTemplate={exactTitle ? '' : `%s | ${data.site.siteMetadata.title}`}\n            meta={[\n              {\n                name: `description`,\n                content: metaDescription,\n              },\n              {\n                property: `og:title`,\n                content: title,\n              },\n              {\n                property: `og:description`,\n                content: metaDescription,\n              },\n              {\n                property: `og:type`,\n                content: `website`,\n              },\n              {\n                name: `twitter:card`,\n                content: `summary`,\n              },\n              {\n                name: `twitter:creator`,\n                content: data.site.siteMetadata.author,\n              },\n              {\n                name: `twitter:title`,\n                content: title,\n              },\n              {\n                name: `twitter:description`,\n                content: metaDescription,\n              }\n            ].concat(\n              keywords.length > 0\n                ? {\n                    name: `keywords`,\n                    content: keywords.join(`,`),\n                  }\n                : []\n            )\n            .concat(meta)}\n          />\n        )\n      }}\n    />\n  )\n}\n\nexport default SEO\n\nconst detailsQuery = graphql`\n  query DefaultSEOQuery {\n    site {\n      siteMetadata {\n        title\n        description\n        author\n      }\n    }\n  }\n`\n","import React, { useState, MouseEvent } from 'react'\nimport { Link } from 'gatsby'\nimport logo from '../images/logo.png'\nimport './header.scss'\nimport { LinkGetProps } from '@reach/router';\n\nconst menus = [\n  { to: '/blog', text: '博客' },\n  { to: '/project', text: '代表作' },\n  { to: '/lab', text: '实验室' },\n  { to: '/friend', text: '朋友' },\n  { to: '/about', text: '我' }\n]\n\nconst Header = () => {\n\n  const [navMenuOpen, setNavMenuOpen] = useState(false)\n\n  function toggle (e: MouseEvent) {\n    e && e.stopPropagation()\n    setNavMenuOpen(!navMenuOpen)\n  }\n\n  function close (e: MouseEvent) {\n    e && e.stopPropagation()\n    setNavMenuOpen(false)\n  }\n\n  function isMenuActive (isMenuActiveProps: LinkGetProps) {\n    const { isPartiallyCurrent } = isMenuActiveProps\n    return isPartiallyCurrent\n      ? { className: 'menu-link active' }\n      : { className: 'menu-link' }\n  }\n\n  return (\n    <>\n      <header id='mf-header'>\n        <div className='mf-header-wrapper'>\n          <Link to='/' className='logo'>\n            <img src={logo} alt=''/>\n            <span>童话说</span>\n          </Link>\n          <div className={'hamberger' + (navMenuOpen ? ' open' : '')} onClick={toggle}>\n            <div className='bar' />\n            <div className='bar' />\n            <div className='bar' />\n          </div>\n          <nav className={'nav-menu' + (navMenuOpen ? ' open' : '')}>\n            <ul className='menus'>\n              { menus.map(n => (\n                <li className='menu' key={n.to}>\n                  <Link\n                    to={n.to}\n                    getProps={isMenuActive}\n                    onClick={close}\n                  >{n.text}</Link>\n                </li>\n              ))}\n            </ul>\n          </nav>\n        </div>\n      </header>\n      <section id='mf-header-placeholder' />\n    </>\n  )\n}\n\nexport default Header\n","import React, { ReactNode } from 'react'\nimport PropTypes from 'prop-types'\nimport { StaticQuery, graphql } from 'gatsby'\nimport * as Sentry from '@sentry/browser'\nimport 'normalize-scss/sass/normalize/_import-now.scss'\nimport './layout.scss'\nimport Header from './header'\nimport { IS_PROD } from 'config';\n\nif (IS_PROD) {\n  Sentry.init({\n    dsn: 'https://9638de4372be4acebf892d0732a86a4a@sentry.io/1450204'\n  })\n}\n\ninterface LayoutProps {\n  children?: ReactNode\n}\n\nconst Layout = (props: LayoutProps) => {\n  const { children } = props\n\n  return <StaticQuery\n    query={graphql`\n      query SiteTitleQuery {\n        site {\n          siteMetadata {\n            title\n          }\n        }\n      }\n    `}\n    render={data => (\n      <>\n        <Header />\n        <main>\n          {children}\n        </main>\n      </>\n    )}\n  />\n}\n\nexport default Layout\n"],"sourceRoot":""}