{"data":{"site":{"siteMetadata":{"title":"童话说","keywords":["tonghuashuo","github","front-end","javascript","typescript","react","node","washington","hua","童话","童话说","前端","博客","技术","计算机","互联网"]}},"markdownRemark":{"html":"<p>在我过去几年的工作中，有一样工具，自打我学会它起，就一直是我的心头好 —— 它就是 SCSS。</p>\n<p>为什么选择我 SCSS</p>\n<p>我选择 SCSS 并不是因为我只接触过 SCSS，恰恰相反，主流的样式解决方案我都有尝试过，权衡之下，最后落定与 SCSS 阵营。</p>\n<h2>来看看它的竞争对手</h2>\n<p>这年头用来写样式的方法有很多，大体可以分为下面这几个：</p>\n<ul>\n<li>LESS</li>\n<li>SASS</li>\n<li>Stylus</li>\n<li>PostCSS</li>\n<li>原生 CSS</li>\n<li>CSS Modules</li>\n<li>styled-components</li>\n</ul>\n<h2>LESS</h2>\n<p>和 SCSS 最接近\n国内最大的支撑或许是 Ant-Design</p>\n<h2>SASS</h2>\n<h2>Stylus</h2>\n<p>Stylus 最大的卖点就是允许省略花括号和分号，对极简主义者来说这是个莫大的好消息。如果你喜欢 Python，你一定会喜欢 Stylus。</p>\n<p>然而我并不看好这种使用「非必要的自定义语法」的方案，历史教育我们，一切的百家争鸣，终将皈依于标准。</p>\n<p>当然这些都是可选的，你完全可以保留花括号和分号，可如果这样，我又为什么要选择 Stylus 呢？</p>\n<p>再者 Stylus 的卖点也并非独家，SASS 也不用花括号和分号。</p>\n<p>没有戳到开发者的痛点，相比竞争对手又缺少差异性，这就解释了为什么 Stylus 市场占比一直那么低。</p>\n<h2>PostCSS</h2>\n<p>与前面几个选项不同的是</p>\n<h2>原生 CSS</h2>\n<p>新特性很好用</p>\n<p>兼容性不足，目前仅移动端可用。</p>\n<p>不支持嵌套语法</p>\n<h2>CSS Modules</h2>\n<p>React 的流行带火了 CSS-in-JS 的方案。CSS Modules 是其中最出名的一个。</p>\n<p>同类的还有 <a href='https://cssinjs.org' target='_blank'>JSS</a>、<a href='https://typestyle.github.io' target='_blank'>TypeStyle</a> 等</p>\n<p>很好的解决了冲突的问题，但并不能很好的处理样式覆盖的需求。</p>\n<p>尤其当你用它开发了一套基础组件，而使用者想要对其进行样式覆盖的时候。</p>\n<p>其实我觉得冲突这种时候，通过命名规范来实现更好些，比如 BEM。</p>\n<h2>styled-components</h2>\n<p>同类的还有 <a href='https://emotion.sh' target='_blank'>Emotion</a>、<a href='https://www.styletron.org/' target='_blank'>Styletron</a> 等</p>\n<p>样式和逻辑混杂，导致代码行数增加，代码臃肿</p>\n<p>缺少可识别的标识符，难以调试，埋没在乱码中</p>\n<p>CSS Modules 至少还能通过前缀看出这是哪个 class</p>\n<p>如果不是 React Native，我想这项目应该火不了，即便如此，社区还是想方设法把 less、scss 这些给弄了进来。</p>\n<h1>说一嘴 CSS-in-JS</h1>\n<p>不少文章鼓吹 CSS-in-JS 对于 All-in-JS 的观点，我不是很赞同。JSX 我可以理解，但 CSS-in-JS 或许并不那么美好，至少在 Web 端是这样，</p>\n<p>CSS-in-JS 的存在主要还是为了 React Native 和 Flutter 等因为技术原因不方便直接使用 CSS 的方案。</p>\n<h1>State of CSS</h1>\n<p>这里有一份调查数据供大家参考：<a href='https://github.com/StateOfJS/StateOfJS/blob/master/surveys/stateofcss/2019/src/data/results/tools/pre-post-processors.yml' target='_blank'>State of CSS 2019</a>。</p>\n<p>这是著名调查系列 <a href='https://stateofjs.com/' target='_blank'>State of JavaScript</a> 的衍生产品。尽管官方还没把这个结果公示出来，但调查已经结束，结果不会再变了，只是差一个展示页罢了）</p>\n<h1>你知道吗？</h1>\n<p>SASS 背后的开发语言已经从 <a href='https://sass-lang.com/ruby-sass' target='_blank'>Ruby</a> 迁移到了 <a href='https://github.com/sass/dart-sass#why-dart' target='_blank'>Dart</a>。</p>\n<p>当然，对于我们使用者来说，或许影响不大，我们依然只需要从 npm 安装 <code class=\"gatsby-code-text\">sass</code> 和 <code class=\"gatsby-code-text\">node-sass</code> 这两个依赖即可。</p>\n<h1>小结</h1>\n<p>这篇文章包含了大量的主观成分，但挑起派系之争从来不是我写作的目的，「前端娱乐圈」从来不乏这一类的文字。我所做的只不过是把我个人的选择过程分享给大家，给正在纠结该如何选择的朋友一点点参考。你不需要同意我的每一个观点，也不用为你之所选正名，萝卜和青菜是分不出胜负的。</p>\n<p>从实用的角度，本文提到的所有方案都可以很好的满足业务开发的需要。本文讨论的不是能不能的问题，而是怎样更好的问题。存在即合理，任何有不止一个人喜欢的东西都一定是做对了什么。</p>","frontmatter":{"title":"我为什么选择 SCSS","description":"因为爱……","cover":{"publicURL":"/static/css4-a21bf2f730a43a221a47d5d8ffe18001.jpg"},"tags":["css","scss","sass"],"series":"","draft":true},"fields":{"id":"why-scss","date":"2019-05-18T16:00:00.000Z"}}},"pageContext":{"isCreatedByStatefulCreatePages":false,"slug":"/blog/2019/05/19/why-scss"}}