{"data":{"site":{"siteMetadata":{"title":"童话说","keywords":["tonghuashuo","github","front-end","javascript","typescript","react","node","washington","hua","童话","童话说","前端","博客","技术","计算机","互联网"]}},"markdownRemark":{"html":"<h2>为什么要重新来过？</h2>\n<p>我之前写过 <a href=\"/blog/2019/02/15/how-to-think-in-hooks\">一篇博客</a>，介绍了 Class 组件的各个生命周期钩子函数在 Hooks 中对应的方案。那时 Hooks 刚刚发布，开发者最关心的莫过于代码的迁移问题，也就是怎么把现有的 Class 组件改造成 Hooks 的方式。</p>\n<p>尽管这种方式非常的直观有效，但很快我们就发现，事情似乎没那么简单。单纯用这个思维来考虑问题，并不能很好地解释 Hooks 的一些行为，比如 <code class=\"gatsby-code-text\">useEffect</code> 中的变量有时候无法获取最新的值、命令式的回调函数也不总是按照我们的预期工作，<code class=\"gatsby-code-text\">useEffect</code> 的依赖数组好像总是缺点什么。</p>\n<p>在亲自踩了 2 个多月的坑，参与了一些 <a href=\"https://github.com/reactjs/zh-hans.reactjs.org/pull/121\" target=\"_blank\" rel=\"noopener noreferrer\">React 官网的翻译工作</a>，拜读了 <a href=\"https://overreacted.io/making-setinterval-declarative-with-react-hooks\" target=\"_blank\" rel=\"noopener noreferrer\">几篇</a> <a href=\"https://overreacted.io/react-as-a-ui-runtime\" target=\"_blank\" rel=\"noopener noreferrer\">非常好的</a> <a href=\"https://overreacted.io/a-complete-guide-to-useeffect\" target=\"_blank\" rel=\"noopener noreferrer\">博客</a> 之后，我对「如何 Think in Hooks」有了新的认识。</p>\n<p>因此这篇博客，我们来「重新 Think in Hooks」。</p>\n<h2>当我们讨论 Hooks 时，我们到底在讨论什么？</h2>\n<p>要理解 Hooks，我们得先回到 Hooks 的本质 —— 一种逻辑复用的方式。</p>\n<p>Hooks 并不是新的组件类型，当我们讨论 Hooks 时，我们讨论的其实是函数组件 —— 就是那种只是根据 props 返回相应的 JSX 的渲染函数。Hooks 的出现让函数组件可以和 Class 组件一样可以拥有 state（是可以，不是必须），相应的也就有了生命周期。因此确切的说，我们是在讨论使用了 Hooks 的函数组件。</p>\n<p>但是「使用了 Hooks 的函数组件」这个词太长了，而下文我又将经常提到这个词，所以在后面的文字中，我将简单用 Hooks 来表示这个概念。</p>\n<h2>欲练此功，必先……忘记过去</h2>\n<p>当我们在使用 Class 组件时，每当 props 或 state 有更新，所有的修改都发生在 React 组件实例上，就像修改一个对象的属性一样。这个逻辑放到 Hooks 里是行不通的，函数组件的创建只是简单的函数调用，不加 <code class=\"gatsby-code-text\">new</code> 的函数调用是不存在所谓生成实例的。这也是很多问题产生的根源。</p>\n<p>所以要想真正 Think in Hooks，首先你得忘记如何 Think in Class，改为 Think in Functions。</p>\n<h2>为什么我的 state 没更新？</h2>\n<p>Hooks 的本质是一个渲染函数，就像是把 Class 组件的 <code class=\"gatsby-code-text\">render()</code> 函数单独提取出来一样。</p>\n<p><code class=\"gatsby-code-text\">render()</code> 函数在运行时会根据那一次的 props 和 state 去渲染。如果在 <code class=\"gatsby-code-text\">render()</code> 函数运行期间 props 或是 state 再次发生变化，并不会影响这一次的执行，而是会触发新一轮的渲染，<code class=\"gatsby-code-text\">render()</code> 再一次被调用，并且这一次传入的是变化后的 props 和 state。</p>\n<p>到这里我们得出结论：</p>\n<blockquote>\n<p><code class=\"gatsby-code-text\">render()</code> 函数中用到的 props 和 state 在函数执行的一开始就已经被确定了。</p>\n</blockquote>\n<p>好了，理论说得够多了，我们来看代码吧。假设我们有这样一个组件：</p>\n<div class=\"gatsby-highlight\" data-language=\"jsx\"><pre style=\"counter-reset: linenumber NaN\" class=\"gatsby-code-jsx line-numbers\"><code class=\"gatsby-code-jsx\"><span class=\"token keyword\">function</span> <span class=\"token function\">Counter</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> <span class=\"token punctuation\">[</span>count<span class=\"token punctuation\">,</span> setCount<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token function\">useState</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span>\n\n  <span class=\"token keyword\">function</span> <span class=\"token function\">onClick</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token function\">setTimeout</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n      <span class=\"token function\">setCount</span><span class=\"token punctuation\">(</span>count <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2000</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token keyword\">return</span> <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>p</span> <span class=\"token attr-name\">onClick</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span>onClick<span class=\"token punctuation\">}</span></span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">You clicked </span><span class=\"token punctuation\">{</span>count<span class=\"token punctuation\">}</span><span class=\"token plain-text\"> times</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>p</span><span class=\"token punctuation\">></span></span>\n<span class=\"token punctuation\">}</span></code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n<p>等价的 Class 组件实现可以是下面这样：</p>\n<div class=\"gatsby-highlight\" data-language=\"jsx\"><pre style=\"counter-reset: linenumber NaN\" class=\"gatsby-code-jsx line-numbers\"><code class=\"gatsby-code-jsx\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">Counter</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">Component</span> <span class=\"token punctuation\">{</span>\n  state <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n    count<span class=\"token punctuation\">:</span> <span class=\"token number\">0</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token function-variable function\">onClick</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n    <span class=\"token function\">setTimeout</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n      <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">setState</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n        count<span class=\"token punctuation\">:</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>state<span class=\"token punctuation\">.</span>count <span class=\"token operator\">+</span> <span class=\"token number\">1</span>\n      <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2000</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token function\">render</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>p</span> <span class=\"token attr-name\">onClick</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>onClick<span class=\"token punctuation\">}</span></span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">You clicked </span><span class=\"token punctuation\">{</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>state<span class=\"token punctuation\">.</span>count<span class=\"token punctuation\">}</span><span class=\"token plain-text\"> times</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>p</span><span class=\"token punctuation\">></span></span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n<p>对比一下两段函数，如果把 Class 的语法中的所有东西全部塞到 <code class=\"gatsby-code-text\">render()</code> 函数里，然后把 <code class=\"gatsby-code-text\">render()</code> 函数单独拎出来，给变量和函数换个名字 —— 恭喜你，你得到了一个等效的 Hooks ！</p>\n<p>开玩笑的，但这真的很像对不对。</p>\n<p>现在考虑一个问题：如果我在 2 秒内点击组件 3 次，那么到第 5 秒的时候，组件会显示什么？</p>\n<p>在类组件的实现中，结果是 3，因为触发了 3 次更新，每次都在原有的基础上加 1。</p>\n<p>但在 Hooks 的实现中，结果意外地变成了 1。很奇怪对不对，明明是一样的逻辑，为什么结果不一样？（我向你保证这跟闭包没有关系）</p>\n<p>如果你在 <code class=\"gatsby-code-text\">onClick</code> 函数中 <code class=\"gatsby-code-text\">console.log</code> 一下，你会发现点击事件确实被触发了 3 次，但是 3 次 <code class=\"gatsby-code-text\">count</code> 的值是一样的。</p>\n<p>这是为什么？</p>\n<p>还记得我们前面的结论吗？「<code class=\"gatsby-code-text\">render()</code> 函数中用到的 props 和 state 在函数执行的一开始就已经被确定了」。为了简化问题，我们可以把 Hooks 的代码中所有用到的 props 和 state 直接替换成那一次的取值：</p>\n<div class=\"gatsby-highlight\" data-language=\"jsx\"><pre style=\"counter-reset: linenumber NaN\" class=\"gatsby-code-jsx line-numbers\"><code class=\"gatsby-code-jsx\"><span class=\"token comment\">// 第一次渲染</span>\n<span class=\"token keyword\">function</span> <span class=\"token function\">Counter</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token comment\">// 这里是对 useState 的等价替换</span>\n<span class=\"gatsby-highlight-code-line\">  <span class=\"token keyword\">const</span> count <span class=\"token operator\">=</span> <span class=\"token number\">0</span></span>  <span class=\"token keyword\">const</span> <span class=\"token function-variable function\">setCount</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">val</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span> <span class=\"token operator\">...</span> <span class=\"token punctuation\">}</span>\n\n  <span class=\"token keyword\">function</span> <span class=\"token function\">onClick</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token function\">setTimeout</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n<span class=\"gatsby-highlight-code-line\">      <span class=\"token function\">setCount</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span> <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span></span>    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2000</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">}</span>\n\n<span class=\"gatsby-highlight-code-line\">  <span class=\"token keyword\">return</span> <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>p</span> <span class=\"token attr-name\">onClick</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span>onClick<span class=\"token punctuation\">}</span></span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">You clicked 0 times</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>p</span><span class=\"token punctuation\">></span></span></span><span class=\"token punctuation\">}</span></code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n<p>注意到第 9 行的变化了么？这就是为什么。在这 2 秒钟之内，无论点击多少次，我们都是在给组件下达同样的指令：2 秒钟后把 <code class=\"gatsby-code-text\">count</code> 设置为 1。2 秒之后组件或许会被更新多次，但结果都是一样的。<code class=\"gatsby-code-text\">onClick</code> 函数中 <code class=\"gatsby-code-text\">count</code> 的值在一开始就已经被确定了。</p>\n<p>那如果我想实现 Class 版本的那种效果要怎么办？可以通过给 <code class=\"gatsby-code-text\">setCount()</code> 传入一个回调函数来解决（如果可以的话，我推荐在更新 state 时尽量采用这种写法，原因后面会讲到）：</p>\n<div class=\"gatsby-highlight\" data-language=\"jsx\"><pre style=\"counter-reset: linenumber NaN\" class=\"gatsby-code-jsx line-numbers\"><code class=\"gatsby-code-jsx\"><span class=\"token keyword\">function</span> <span class=\"token function\">Counter</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> <span class=\"token punctuation\">[</span>count<span class=\"token punctuation\">,</span> setCount<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token function\">useState</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span>\n\n  <span class=\"token keyword\">function</span> <span class=\"token function\">onClick</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token function\">setTimeout</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n<span class=\"gatsby-highlight-code-line\">      <span class=\"token function\">setCount</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">c</span> <span class=\"token operator\">=></span> c <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span></span>    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2000</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token keyword\">return</span> <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>p</span> <span class=\"token attr-name\">onClick</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span>onClick<span class=\"token punctuation\">}</span></span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">You clicked </span><span class=\"token punctuation\">{</span>count<span class=\"token punctuation\">}</span><span class=\"token plain-text\"> times</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>p</span><span class=\"token punctuation\">></span></span>\n<span class=\"token punctuation\">}</span></code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n<p>这里表示不管 count 现在的值是多少，往上加一就好了。Class 组件中的 <code class=\"gatsby-code-text\">setState()</code> 函数也有同样的写法，虽然它俩的目的并不相同。</p>\n<h2>useEffect 的依赖数组到底应该怎么用</h2>\n<p>这可能是刚接触 Hooks 时最让人头疼的一个问题，相信每个人都对「依赖数组里的内容会决定 Effect 是否会重新执行」这一点印象深刻，给人感觉这就是 <code class=\"gatsby-code-text\">componentDidUpdate()</code> 的等效实现，只要依赖数组里的内容不变，Effect 就不会重新执行。因此只要某个变量不参与比对的过程，就不需要出现在依赖数组中。然而依赖数组并没有我们想象的这么简单。</p>\n<p>依赖数组真正的含义，是「这个 Effect 引用了哪些外部变量」。不管它是否参与比对的过程，只要 Effect 中引用了（也就是 Effect 依赖了这个变量），就必须出现在依赖数组中。举个例子：</p>\n<p>在下面的代码中，我们想要实现：<code class=\"gatsby-code-text\">foo</code> 或 <code class=\"gatsby-code-text\">bar</code> 在被点击时自身加一，两者任何一个的变化都会触发 <code class=\"gatsby-code-text\">total</code> 也加一。重点关注第一个 Effect —— 我们希望 <code class=\"gatsby-code-text\">foo</code> 和 <code class=\"gatsby-code-text\">bar</code> 的变化能够引起 <code class=\"gatsby-code-text\">total</code> 的变化。</p>\n<div class=\"gatsby-highlight\" data-language=\"jsx\"><pre style=\"counter-reset: linenumber NaN\" class=\"gatsby-code-jsx line-numbers\"><code class=\"gatsby-code-jsx\"><span class=\"token keyword\">const</span> <span class=\"token function-variable function\">App</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">props</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> <span class=\"token punctuation\">[</span>total<span class=\"token punctuation\">,</span> setTotal<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token function\">useState</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span>\n  <span class=\"token keyword\">const</span> <span class=\"token punctuation\">[</span>foo<span class=\"token punctuation\">,</span> setFoo<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token function\">useState</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span>\n  <span class=\"token keyword\">const</span> <span class=\"token punctuation\">[</span>bar<span class=\"token punctuation\">,</span> setBar<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token function\">useState</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span>\n\n  <span class=\"token comment\">// 当 foo 或 bar 变化时，增加 total 计数</span>\n<span class=\"gatsby-highlight-code-line\">  <span class=\"token function\">useEffect</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span></span><span class=\"gatsby-highlight-code-line\">    <span class=\"token function\">setTotal</span><span class=\"token punctuation\">(</span>total <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span></span><span class=\"gatsby-highlight-code-line\">  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span>foo<span class=\"token punctuation\">,</span> bar<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span></span>\n  <span class=\"token comment\">// 初始化时归零</span>\n  <span class=\"token function\">useEffect</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n    <span class=\"token function\">setTotal</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n\n  <span class=\"token keyword\">function</span> <span class=\"token function\">addFoo</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token function\">setFoo</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">f</span> <span class=\"token operator\">=></span> f <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token keyword\">function</span> <span class=\"token function\">addBar</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token function\">setBar</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">b</span> <span class=\"token operator\">=></span> b <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token keyword\">return</span> <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span></span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\"></span>\n<span class=\"token plain-text\">    </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>button</span> <span class=\"token attr-name\">onClick</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span>addFoo<span class=\"token punctuation\">}</span></span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">{</span>foo<span class=\"token punctuation\">}</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>button</span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\"></span>\n<span class=\"token plain-text\">    +</span>\n<span class=\"token plain-text\">    </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>button</span> <span class=\"token attr-name\">onClick</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span>addBar<span class=\"token punctuation\">}</span></span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">{</span>bar<span class=\"token punctuation\">}</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>button</span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\"></span>\n<span class=\"token plain-text\">    =</span>\n<span class=\"token plain-text\">    </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>span</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">{</span>total<span class=\"token punctuation\">}</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>span</span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\"></span>\n<span class=\"token plain-text\">  </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span></span><span class=\"token punctuation\">></span></span>\n<span class=\"token punctuation\">}</span></code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n<p>这个 Effect 引用了 <code class=\"gatsby-code-text\">total</code> 这个变量，用于计算新的 <code class=\"gatsby-code-text\">total</code> 值，但是 <code class=\"gatsby-code-text\">total</code> 并没有参与「是否要执行这个 Effect」的决策。按照我们之前的理解，<code class=\"gatsby-code-text\">total</code> 不需要出现在依赖数组中。那么我们来执行一下这段代码。</p>\n<p>点击按钮，<code class=\"gatsby-code-text\">foo</code> 和 <code class=\"gatsby-code-text\">bar</code> 如我们预期的那样自增了，然而 <code class=\"gatsby-code-text\">total</code> 却一点没更新。</p>\n<p>为什么会这样？</p>\n<p>如我们上一节所说的，「<code class=\"gatsby-code-text\">render()</code> 函数中用到的 props 和 state 在函数执行的一开始就已经被确定了」，Effect 也是 render 函数的一部分，因此同样适用这条规则，那么我们带入变量值看一下：</p>\n<div class=\"gatsby-highlight\" data-language=\"jsx\"><pre style=\"counter-reset: linenumber NaN\" class=\"gatsby-code-jsx line-numbers\"><code class=\"gatsby-code-jsx\"><span class=\"token comment\">// 初始化时</span>\n<span class=\"token function\">useEffect</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token function\">setTotal</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span> <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span></code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span><span></span></span></pre></div>\n<div class=\"gatsby-highlight\" data-language=\"jsx\"><pre style=\"counter-reset: linenumber NaN\" class=\"gatsby-code-jsx line-numbers\"><code class=\"gatsby-code-jsx\"><span class=\"token comment\">// 点击 foo</span>\n<span class=\"token function\">useEffect</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token function\">setTotal</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span> <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span></code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span><span></span></span></pre></div>\n<div class=\"gatsby-highlight\" data-language=\"jsx\"><pre style=\"counter-reset: linenumber NaN\" class=\"gatsby-code-jsx line-numbers\"><code class=\"gatsby-code-jsx\"><span class=\"token comment\">// 在点击 bar</span>\n<span class=\"token function\">useEffect</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token function\">setTotal</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span> <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span></code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span><span></span></span></pre></div>\n<p>由于 <code class=\"gatsby-code-text\">total</code> 并没有在依赖数组中申明，Effect 就不会去获取它的最新值，每次执行都引用了最初的值。</p>\n<p>要解决这个问题，我们可以把 <code class=\"gatsby-code-text\">total</code> 加入依赖数组，让 Effect 去获取它的最新值。但因为这个 Effect 会更新 <code class=\"gatsby-code-text\">total</code> 的值，这么做会导致死循环。因此我们还不能把它放进依赖数组。这就比较尴尬了。</p>\n<p>别慌，还记得前面提到的 setState 的另一种写法吗？</p>\n<div class=\"gatsby-highlight\" data-language=\"jsx\"><pre style=\"counter-reset: linenumber NaN\" class=\"gatsby-code-jsx line-numbers\"><code class=\"gatsby-code-jsx\"><span class=\"token function\">useEffect</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token function\">setTotal</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">t</span> <span class=\"token operator\">=></span> t <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span>foo<span class=\"token punctuation\">,</span> bar<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span></code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span></span></pre></div>\n<p>这么一来，Effect 不再依赖 total 的值，自然也就不需要在依赖数组中进行申明了。</p>\n<p>现在新版的 React 已经自带了 Hooks 规则的一些检查，当它发现一些不合规的写法（比如 Effect 中引用了外部变量，但没有在依赖数组中进行申明），就会给出提示。</p>\n<h2>不要担心重复定义函数</h2>\n<h2>如何在 Hooks 中请求数据</h2>\n<h2>如何实现 <code class=\"gatsby-code-text\">setInterval()</code></h2>\n<h2>小结</h2>\n<p>第一次看到官方文档中的「It takes a bit of a mindshift to start “thinking in Hooks”」这句话的时候，我并没有太当回事，觉得无非就是有一样新东西要学而已。时隔几个月再看，这句话分量还是挺重的。从 Class 到 Hooks 的变化真的很大。</p>\n<p>React 从一开始就推崇声明式的设计，万物皆组件，最大的感受就是路由的设计。Hooks 相比 Class 更加符合声明式的设计，从此 React 进入「万物皆函数」的时代。</p>\n<p>如果你觉得 Hooks 是一颗重磅炸弹，我建议你了解一下 <a href=\"https://reactjs.org/blog/2018/11/27/react-16-roadmap.html#react-16x-q2-2019-the-one-with-concurrent-mode\" target=\"_blank\" rel=\"noopener noreferrer\">Concurrent Mode</a>。然后你会发现，Hooks 只是一道前菜。</p>","frontmatter":{"title":"重新 Think in Hooks","description":"忘记过去之所学，我们从头来过","cover":{"publicURL":"/static/think-in-hooks-again-f9fcd719dcab55af4a1ad3d3cfbe0585.jpg"},"tags":["react","hooks"],"series":"","draft":true},"fields":{"id":"rethink-in-hooks","date":"2019-05-07T16:00:00.000Z"}}},"pageContext":{"isCreatedByStatefulCreatePages":false,"slug":"/blog/2019/05/08/rethink-in-hooks"}}