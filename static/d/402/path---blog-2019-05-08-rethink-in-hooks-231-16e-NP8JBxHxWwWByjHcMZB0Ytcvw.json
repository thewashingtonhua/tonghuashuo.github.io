{"data":{"site":{"siteMetadata":{"title":"童话说","keywords":["tonghuashuo","github","front-end","javascript","typescript","react","node","washington","hua","童话","童话说","前端","博客","技术","计算机","互联网"]}},"markdownRemark":{"html":"<h2>为什么要重新来过？</h2>\n<p>我之前写过 <a href=\"/blog/2019/02/15/how-to-think-in-hooks\">一篇博客</a>，介绍了 Class 组件的各个生命周期钩子函数在 Hooks 中对应的方案。那时 Hooks 刚刚发布，开发者最关心的莫过于代码的迁移问题，也就是怎么把现有的 Class 组件改造成 Hooks 的方式。</p>\n<p>尽管这种方式非常的直观有效，但很快我们就发现，事情似乎没那么简单。单纯用这个思维来考虑问题，并不能很好地解释 Hooks 的一些行为，比如 <code class=\"gatsby-code-text\">useEffect</code> 中的变量有时候无法获取最新的值、命令式的回调函数也不总是按照我们的预期工作。</p>\n<p>在亲自踩了 2 个多月的坑，参与了一些 <a href=\"https://github.com/reactjs/zh-hans.reactjs.org/pull/121\">React 官网的翻译工作</a>，拜读了 <a href=\"https://overreacted.io/making-setinterval-declarative-with-react-hooks/\">几篇</a> <a href=\"https://overreacted.io/a-complete-guide-to-useeffect/\">博客</a> 之后，我豁然醒悟，对「如何 Think in Hooks」有了新的认识。</p>\n<p>因此这篇博客，我们来「重新 Think in Hooks」。</p>\n<h2>欲练此功，必先……忘记过去之所学</h2>\n<p>现在想来，官方文档中的「It takes a bit of a mindshift to start “thinking in Hooks”」这句话，含义远比我想象的要深刻。</p>\n<p>Hooks 正确打开方式，</p>","frontmatter":{"title":"重新 Think in Hooks","description":"忘记过去之所学，我们从头来过","cover":{"publicURL":"/static/think-in-hooks-again-f9fcd719dcab55af4a1ad3d3cfbe0585.jpg"},"tags":["react","hooks"],"series":"","draft":true},"fields":{"id":"rethink-in-hooks","date":"2019-05-07T16:00:00.000Z"}}},"pageContext":{"isCreatedByStatefulCreatePages":false,"slug":"/blog/2019/05/08/rethink-in-hooks"}}