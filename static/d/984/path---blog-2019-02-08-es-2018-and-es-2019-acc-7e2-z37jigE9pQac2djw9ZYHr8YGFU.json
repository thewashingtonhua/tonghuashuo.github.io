{"data":{"site":{"siteMetadata":{"title":"童话说","keywords":["tonghuashuo","github","front-end","javascript","typescript","react","node","washington","hua","童话","童话说","前端","博客","技术","计算机","互联网"]}},"markdownRemark":{"html":"<h2>童话·说标准</h2>\n<p>年前，ES 2019 标准正式发布，借着这个机会，我们来看看新的一年都有哪些小伙伴荣登宝座。顺带着，把 ES 2018 的内容也补一下。</p>\n<p>ECMAScript 标准的制定过程，想必大家都心里有数了，无需我再赘述。和 Java 等先制定标准再开始使用的语言不同，ECMAScript 标准更像是对过去一段时间内已经投入使用的特性的一项官宣。</p>\n<h2>ES2018（ES9）</h2>\n<h3>2018.1）异步迭代器（Asynchronous Iteration）</h3>\n<p>总有那么些时候，我们会想要同步执行一些异步的操作，比如下面这样的：</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre style=\"counter-reset: linenumber NaN\" class=\"gatsby-code-javascript line-numbers\"><code class=\"gatsby-code-javascript\"><span class=\"token keyword\">const</span> actions <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span>\n  Promise<span class=\"token punctuation\">.</span><span class=\"token function\">resolve</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n  Promise<span class=\"token punctuation\">.</span><span class=\"token function\">resolve</span><span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n  Promise<span class=\"token punctuation\">.</span><span class=\"token function\">resolve</span><span class=\"token punctuation\">(</span><span class=\"token number\">3</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">]</span></code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n<p>利用 <code class=\"gatsby-code-text\">async / await</code> 语法，我们可以很轻松的做到这点。</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre style=\"counter-reset: linenumber NaN\" class=\"gatsby-code-javascript line-numbers\"><code class=\"gatsby-code-javascript\"><span class=\"token keyword\">async</span> <span class=\"token keyword\">function</span> <span class=\"token function\">process</span> <span class=\"token punctuation\">(</span>actions<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> action <span class=\"token keyword\">of</span> actions<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">await</span> <span class=\"token function\">asyncFunc</span><span class=\"token punctuation\">(</span>action<span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n<p>上面的写法，会按顺序执行 <code class=\"gatsby-code-text\">asyncFunc</code>，上一个结束之后才会开始下一个，每次得到的 <code class=\"gatsby-code-text\">action</code> 都是一个异步操作本身（比如这里是一个 Promise 对象）。</p>\n<p>ES 2018 为我们提供了一种新的方式，在前面代码的基础之上，让每次得到的 <code class=\"gatsby-code-text\">action</code> 直接是异步操作完成之后的结果（比如这里是 Promise 被 resolve 之后的结果）。</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre style=\"counter-reset: linenumber NaN\" class=\"gatsby-code-javascript line-numbers\"><code class=\"gatsby-code-javascript\"><span class=\"token keyword\">async</span> <span class=\"token keyword\">function</span> <span class=\"token function\">process</span> <span class=\"token punctuation\">(</span>actions<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">for</span> <span class=\"token keyword\">await</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> action <span class=\"token keyword\">of</span> actions<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token function\">asyncFunc</span><span class=\"token punctuation\">(</span>action<span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n<h3>2018.2）其余属性 和 扩展运算符（Rest &#x26; Spread）</h3>\n<p>虽然是两个符号，但语法都是同一个 —— <code class=\"gatsby-code-text\">...</code>，没错，就是三个点。</p>\n<h4>2018.2.1）其余属性</h4>\n<p>“其余属性”主要有两个用途，一个是配合解构赋值，抽取部分属性。</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre style=\"counter-reset: linenumber NaN\" class=\"gatsby-code-javascript line-numbers\"><code class=\"gatsby-code-javascript\"><span class=\"token comment\">// 解构数组</span>\n<span class=\"token keyword\">const</span> <span class=\"token punctuation\">[</span>a<span class=\"token punctuation\">,</span> <span class=\"token operator\">...</span>b<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4</span><span class=\"token punctuation\">]</span>\na <span class=\"token comment\">// 1</span>\nb <span class=\"token comment\">// [2, 3, 4]</span></code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span><span></span></span></pre></div>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre style=\"counter-reset: linenumber NaN\" class=\"gatsby-code-javascript line-numbers\"><code class=\"gatsby-code-javascript\"><span class=\"token comment\">// 解构对象</span>\n<span class=\"token keyword\">const</span> <span class=\"token punctuation\">{</span> a<span class=\"token punctuation\">,</span> <span class=\"token operator\">...</span>others <span class=\"token punctuation\">}</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n  a<span class=\"token punctuation\">:</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span>\n  b<span class=\"token punctuation\">:</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span>\n  c<span class=\"token punctuation\">:</span> <span class=\"token number\">3</span><span class=\"token punctuation\">,</span>\n  d<span class=\"token punctuation\">:</span> <span class=\"token number\">4</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">}</span>\n\na <span class=\"token comment\">// 1</span>\nothers <span class=\"token comment\">// { b: 2, c: 3, d: 4 }</span></code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n<p>“其余属性”的另一个用途就是用在函数定义中，用于接收数量不定的参数，接收到的内容被保存到一个数组里。</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre style=\"counter-reset: linenumber NaN\" class=\"gatsby-code-javascript line-numbers\"><code class=\"gatsby-code-javascript\"><span class=\"token keyword\">function</span> <span class=\"token function\">func</span> <span class=\"token punctuation\">(</span>first<span class=\"token punctuation\">,</span> <span class=\"token operator\">...</span>others<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>first<span class=\"token punctuation\">,</span> others<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token function\">func</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4</span><span class=\"token punctuation\">)</span>\n<span class=\"token comment\">// first: 1</span>\n<span class=\"token comment\">// others: [2, 3, 4]</span></code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n<p>一次解构、或一个函数参数列表中，最多只能出现一次“其余属性”，并且必须排在所有参数的最后，否则会因为无法确定边界而导致语法问题。</p>\n<p><code class=\"gatsby-code-text\">...</code> 是一个操作符，变量名本身并不包含这三个点。</p>\n<h4>2018.2.2）扩展运算符</h4>","frontmatter":{"title":"你可能已经知道的 ES 2018 和 2019","description":"跟上时代的步伐","cover":{"publicURL":"/static/es2019-5646b4878e533cd7c725ce4c17984071.jpg"},"tags":["ecmascript","2018","2019"],"series":null,"draft":true},"fields":{"id":"es2018-and-es2019","date":"2019-02-07T16:00:00.000Z"}}},"pageContext":{"slug":"/blog/2019/02/08/es2018-and-es2019"}}