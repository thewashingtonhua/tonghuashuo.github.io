{"data":{"site":{"siteMetadata":{"title":"童话说","keywords":["tonghuashuo","github","front-end","javascript","typescript","react","node","washington","hua","童话","童话说","前端","博客","技术","计算机","互联网"]}},"markdownRemark":{"html":"<h2>JSONP</h2>\n<p>全称 JSON with Padding，用于解决AJAX跨域问题的一种方案（关于“同源策略”的具体内容这里就不赘述了，度娘足矣）</p>\n<p>本着实用优先的原则，我们先给方案，再讲原理，赶时间的朋友只要看完下一节就可以了，想了解细节的可以顺序往下看完。</p>\n<h2>用 jQuery 实现 JSONP</h2>\n<p>考虑到绝大部分开发者的日常工作都是离不开jQuery的，因此我们先说用jQuery的方案，纯JavaScript的方案请看下一节。</p>\n<p>前端关键代码（由于 Github Page 不提供后台服务，因此这里我们用txt文件代替一下，实际项目中通常会由后端提供接口）</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre style=\"counter-reset: linenumber NaN\" class=\"gatsby-code-javascript line-numbers\"><code class=\"gatsby-code-javascript\">$<span class=\"token punctuation\">.</span><span class=\"token function\">ajax</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n  url<span class=\"token punctuation\">:</span> <span class=\"token string\">\"http://tonghuashuo.github.io/test/jsonp.txt\"</span><span class=\"token punctuation\">,</span>\n  dataType<span class=\"token punctuation\">:</span> <span class=\"token string\">'jsonp'</span><span class=\"token punctuation\">,</span>\n  jsonp<span class=\"token punctuation\">:</span> <span class=\"token string\">\"callback\"</span><span class=\"token punctuation\">,</span>\n  jsonpCallback<span class=\"token punctuation\">:</span> <span class=\"token string\">\"dosomething\"</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">.</span><span class=\"token function\">done</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">res</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"success\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>res<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">.</span><span class=\"token function\">fail</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">res</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"error\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>res<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n<p>后端关键代码（以PHP为例）</p>\n<div class=\"gatsby-highlight\" data-language=\"php\"><pre style=\"counter-reset: linenumber NaN\" class=\"gatsby-code-php line-numbers\"><code class=\"gatsby-code-php\"><span class=\"token variable\">$result</span>   <span class=\"token operator\">=</span> <span class=\"token double-quoted-string string\">\"{'data':'JSONP Works'}\"</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 这里省略了数据库查询等操作，直接给出返回值</span>\n<span class=\"token variable\">$callback</span> <span class=\"token operator\">=</span> <span class=\"token variable\">$_GET</span><span class=\"token punctuation\">[</span><span class=\"token single-quoted-string string\">'callback'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>        <span class=\"token comment\">// 最好加上判空和默认值，以防拿不到参数</span>\n<span class=\"token keyword\">echo</span> <span class=\"token variable\">$callback</span><span class=\"token punctuation\">.</span><span class=\"token double-quoted-string string\">\"(\"</span><span class=\"token punctuation\">.</span><span class=\"token variable\">$result</span><span class=\"token punctuation\">.</span><span class=\"token double-quoted-string string\">\")\"</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// 返回的结果</span>\n<span class=\"token comment\">// dosomething({\"data\":\"JSONP Works\"});</span></code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n<p>将上述代码放到你本地 localhost 中，尝试运行一下，顺利的话应该会在浏览器的控制台中得到以下的内容：</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre style=\"counter-reset: linenumber NaN\" class=\"gatsby-code-javascript line-numbers\"><code class=\"gatsby-code-javascript\">success\nObject <span class=\"token punctuation\">{</span> data<span class=\"token punctuation\">:</span> <span class=\"token string\">\"JSONP Works\"</span> <span class=\"token punctuation\">}</span></code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span></span></pre></div>\n<p>实际发送出来的完整请求长这样： <code class=\"gatsby-code-text\">http://tonghuashuo.github.io/test/jsonp.txt?callback=dosomething&amp;_=1471419449018。</code> ，后面的随机字符串是 jQuery 加上的。</p>\n<p>区别于常规的 AJAX 请求，这里真正需要关心的参数有以下 3 个：</p>\n<ul>\n<li>dataType: 'jsonp'，用于表示这是一个 JSONP 请求。</li>\n<li>jsonp: 'callback'，用于告知服务器根据这个参数获取回调函数的名称，通常约定就叫 callback。</li>\n<li>jsonpCallback: 'dosomething'，回调函数的名称，也是前面callback参数的值。</li>\n</ul>\n<p>其中 <code class=\"gatsby-code-text\">jsonpCallback</code> 参数是可以省略的，jQuery 会自动生成一个随机字符串作为函数名，推荐这么做，以减少不必要的命名工作，同时排除潜在的安全隐患。这里由于Github Page没有后台服务，我们只能指定一个名字。注意：省略 <code class=\"gatsby-code-text\">jsonpCallback</code> 的同时， <code class=\"gatsby-code-text\">jsonp</code> 参数必须指明，不能为 <code class=\"gatsby-code-text\">false</code> 。</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre style=\"counter-reset: linenumber NaN\" class=\"gatsby-code-javascript line-numbers\"><code class=\"gatsby-code-javascript\">$<span class=\"token punctuation\">.</span><span class=\"token function\">ajax</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n  url<span class=\"token punctuation\">:</span> <span class=\"token string\">\"http://tonghuashuo.github.io/test/jsonp.txt\"</span><span class=\"token punctuation\">,</span>\n  dataType<span class=\"token punctuation\">:</span> <span class=\"token string\">'jsonp'</span><span class=\"token punctuation\">,</span>\n  jsonp<span class=\"token punctuation\">:</span> <span class=\"token string\">\"callback\"</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token comment\">// 这样会发出如下结构的请求</span>\n<span class=\"token comment\">// http://tonghuashuo.github.io/test/jsonp.txt?callback=jQuery31008590081461589807_1471506026601&amp;amp;_=1471506026602</span>\n<span class=\"token comment\">// 可以看到 jQuery 自动创建了一个随机字符串作为 callback 参数的值</span></code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n<p>jQuery 还支持将 <code class=\"gatsby-code-text\">jsonp</code> 设置为 <code class=\"gatsby-code-text\">false</code> 以避免callback参数出现在请求 URL 中，但这需要前后端配合，前端必须要指定 <code class=\"gatsby-code-text\">jsonpCallback</code> 的值为一个函数名，后端由于无法从请求中获取回调函数的名称，因此也必须固定使用同名的字符串进行拼接。</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre style=\"counter-reset: linenumber NaN\" class=\"gatsby-code-javascript line-numbers\"><code class=\"gatsby-code-javascript\">$<span class=\"token punctuation\">.</span><span class=\"token function\">ajax</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n  url<span class=\"token punctuation\">:</span> <span class=\"token string\">\"http://tonghuashuo.github.io/test/jsonp.txt\"</span><span class=\"token punctuation\">,</span>\n  dataType<span class=\"token punctuation\">:</span> <span class=\"token string\">'jsonp'</span><span class=\"token punctuation\">,</span>\n  jsonp<span class=\"token punctuation\">:</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">,</span>\n  jsonpCallback<span class=\"token punctuation\">:</span> <span class=\"token string\">\"myCallback\"</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token comment\">// 这样会发出如下结构的请求</span>\n<span class=\"token comment\">// http://tonghuashuo.github.io/test/jsonp.txt?_=1471506026602</span>\n<span class=\"token comment\">// 可以看到 callback 参数被隐藏了，单从 URL 上看不容易看出这是一个 JSONP 请求</span>\n<span class=\"token comment\">// 后端也无法从请求中获取回调函数名，因此必须事先约定好回调函数名，例如大家都使用 myCallback</span></code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n<p>后台接收到该请求后会做两件事，一是照常去获取请求的资源，构造 JSON 形式的返回内容，二是根据请求 url 中的 callback 参数（由 $.ajax() 中的 jsonp 参数指定）的值，以字符串拼接的方式，构造出一个“JavaScript函数调用”的字符串，将准备返回的JSON作为实参放入括号中，由于最终返回的是纯字符串，因此和后端所用技术无关。</p>\n<p>响应内容传回前台后，jQuery会自动接管，将其中JSON的部分剥离出来传给 <code class=\"gatsby-code-text\">success()</code> 和 <code class=\"gatsby-code-text\">error()</code> ，在这两个函数中可以直接读取JSON的内容，换句话说，无需实现 <code class=\"gatsby-code-text\">doSomething()</code> 也可以拿到数据，当然如果你还是实现了 <code class=\"gatsby-code-text\">doSomething()</code> ，它会在 <code class=\"gatsby-code-text\">success()</code> 之前被调用。</p>\n<h2>纯 JavaScript 实现 JSONP</h2>\n<p>利用 jQuery 我们虽然完成了 JSONP 跨域请求，但 JSONP 本质并不是 AJAX，jQuery 将其包含在  <code class=\"gatsby-code-text\">$.ajax()</code>  误导了不少人。为了更好的理解 JSONP，我们来用纯 JavaScript 实现一遍。</p>\n<div class=\"gatsby-highlight\" data-language=\"html\"><pre style=\"counter-reset: linenumber NaN\" class=\"gatsby-code-html line-numbers\"><code class=\"gatsby-code-html\"><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>script</span><span class=\"token punctuation\">></span></span><span class=\"token script\"><span class=\"token language-javascript\">\n\n  <span class=\"token comment\">// 实现回调函数，这里没有了 jQuery 的封装，必须手动指定并实现</span>\n  <span class=\"token keyword\">var</span> <span class=\"token function-variable function\">dosomething</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">data</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n      console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>data<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token comment\">// 提供 JSONP 服务的 URL 地址，查询字符串中加入 callback 指定回调函数</span>\n  <span class=\"token keyword\">var</span> url <span class=\"token operator\">=</span> <span class=\"token string\">\"tonghuashuo.github.io/test/jsonp.txt?callback=docomething\"</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token comment\">// 创建 &amp;lt;script&amp;gt; 标签，设置其 src 属性</span>\n  <span class=\"token keyword\">var</span> script <span class=\"token operator\">=</span> document<span class=\"token punctuation\">.</span><span class=\"token function\">createElement</span><span class=\"token punctuation\">(</span><span class=\"token string\">'script'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  script<span class=\"token punctuation\">.</span><span class=\"token function\">setAttribute</span><span class=\"token punctuation\">(</span><span class=\"token string\">'src'</span><span class=\"token punctuation\">,</span> url<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token comment\">// 把 &amp;lt;script&amp;gt; 标签加入 &amp;lt;body&amp;gt; 尾部，此时调用开始。</span>\n  document<span class=\"token punctuation\">.</span><span class=\"token function\">getElementsByTagName</span><span class=\"token punctuation\">(</span><span class=\"token string\">'body'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span><span class=\"token function\">appendChild</span><span class=\"token punctuation\">(</span>script<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token comment\">// 因为目标 URL 是一个后台脚本，访问后会被执行，返回的 JSON 被包裹在回调函数中以字符串的形式被返回。</span>\n  <span class=\"token comment\">// 返回的字符串放入 &amp;lt;script&amp;gt; 中就成为了一个普通的函数调用，执行回调函数，返回的 JSON 数据作为实参被传给了回调函数。</span>\n</span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>script</span><span class=\"token punctuation\">></span></span></code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n<h2>JSONP 的原理</h2>\n<p>AJAX 无法跨域是受到“同源政策”的限制，但是带有 <code class=\"gatsby-code-text\">src</code> 属性的标签（例如 <code class=\"gatsby-code-text\">&lt;script&gt;</code> 、 <code class=\"gatsby-code-text\">&lt;img&gt;</code> 、 <code class=\"gatsby-code-text\">&lt;iframe&gt;</code> ）是不受该政策限制的，因此我们可以通过向页面中动态添加 <code class=\"gatsby-code-text\">&lt;script&gt;</code> 标签来完成对跨域资源的访问，这也是 JSONP 方案最核心的原理。</p>\n<p>通常我们使用 <code class=\"gatsby-code-text\">&lt;script&gt;</code> 都是引用的静态资源（主要是 js 文件），其实它也可以用来引用动态资源（php、jsp、aspx等），后台服务被访问后返回一个“JavaScript函数调用”形式的字符串，由于是字符串，因此在后台的时候不会起到任何作用，但到了前台，放入 <code class=\"gatsby-code-text\">&lt;script&gt;</code> 标签之内，就成了一个合法的 JavaScript 函数调用，实参是我们真正需要的数据，被调用的回调函数也已经实现了，因此就会顺利的被调用。</p>\n<p>再次强调：JSONP 不是 AJAX，了解了它的原理之后你应该已经明白这是为什么了（事实上 JSONP 的出现让 “AJAX跨域请求”变成了伪命题，跨域的过程根本就没 AJAX 什么事）。要怪就怪 jQuery，给不明真相的吃瓜群众带来了误解。当然 jQuery 这么做也不无道理，毕竟跨域的问题是在 AJAX 中遇到的，受惯性思维影响我们自然首先会从 AJAX 的角度去寻求解决方案，因此 jQuery 才把 JSONP 封装到了 <code class=\"gatsby-code-text\">$.ajax()</code> 的配置项中，至于具体的实现自然还是上面提到的方法。</p>\n<p>回过头来我们再看一遍 JSONP 的全称：JSON with Padding，这里的 Padding 指的就是包裹在 JSON 外层的回调函数，这么一来，是不是印象就非常深刻了呢。</p>\n<h2>JSONP 的优缺点</h2>\n<p>JSONP 最大的优点就是兼容性非常好，其原理决定了即便在非常古老的浏览器上也能够很好的被实现。</p>\n<p>JSONP 的主要缺点有两个，一是只能 GET 不能 POST，因为是通过 <code class=\"gatsby-code-text\">&lt;script&gt;</code> 引用的资源，参数全都显式的放在 URL 里，和 AJAX 没有半毛钱关系。二是存在安全隐患，动态插入 <code class=\"gatsby-code-text\">&lt;script&gt;</code> 标签其实就是一种脚本注入，XSS 听过没？需要多留个心眼。</p>","frontmatter":{"title":"5 分钟彻底明白 JSONP","description":"说穿了，其实没那么难","cover":{"publicURL":"/static/jsonp-f8f2d118b15646398f7d00e19eb17ff9.jpg"},"tags":["javascript","jsonp"],"series":"","draft":false},"fields":{"id":"jsonp","date":"2016-08-16T16:00:00.000Z"}}},"pageContext":{"isCreatedByStatefulCreatePages":false,"slug":"/blog/2016/08/17/jsonp"}}