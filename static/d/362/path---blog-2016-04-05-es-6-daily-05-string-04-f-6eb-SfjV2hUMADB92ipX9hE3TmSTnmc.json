{"data":{"site":{"siteMetadata":{"title":"童话说","keywords":["tonghuashuo","github","front-end","javascript","typescript","react","node","washington","hua","童话","童话说","前端","博客","技术","计算机","互联网"]}},"markdownRemark":{"html":"<h2>继续打脸</h2>\n<p>呵呵呵呵呵，现在这个系列已经正式沦落为连作者也不知道啥时候更的节奏了……</p>\n<p>这次来讲讲字符串，ES6对 <code class=\"gatsby-code-text\">String</code> 类扩展了一些函数，使得操作字符串更加的便捷，一些以往必须借助额外的 Javascript 代码才能实现的效果，现在有了现成的函数。</p>\n<h2>改进的 Unicode 表示法</h2>\n<p>JavaScript 允许使用 <code class=\"gatsby-code-text\">\\uxxxx</code> 的形式表示一个字符，但在 ES6 之前，单个码点仅支持 <code class=\"gatsby-code-text\">\\u0000</code> 到 <code class=\"gatsby-code-text\">\\uFFFF</code> ，超出该范围的必须用双字节形式表示，否则会解析错误。ES6 对这一点做出了改进，只要将码点放入大括号，就能正确解读该字符，不受限于4位。例如下面的写法就是合法的，能够被正确解析：</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre style=\"counter-reset: linenumber NaN\" class=\"gatsby-code-javascript line-numbers\"><code class=\"gatsby-code-javascript\"><span class=\"token string\">\"\\u{20BB7}\"</span>  <span class=\"token comment\">// \"𠮷\"</span></code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span></span></pre></div>\n<h2>codePointAt()</h2>\n<p>JavaScript 中，1 个字符固定为 2 个字节，对于需要 4 个字节存储的字符会被认为是 2 个字符， <code class=\"gatsby-code-text\">length</code> 会判定为2， <code class=\"gatsby-code-text\">charAt()</code> 无法读取整个字符， <code class=\"gatsby-code-text\">charCodeAt()</code> 只能分别返回前后各两个字节的值。</p>\n<p>ES6 提供了  <code class=\"gatsby-code-text\">codePointAt()</code> ，能够正确处理 4 个字节存储的字符，返回一个字符的码点。但需要注意的是，这并没有改变 JavaScript 将 2 个字节视为1个字符的事实，只是自动识别出了这是个 4 字节的字符并返回了正确的码点而已，对于单个4字节的字符来说， <code class=\"gatsby-code-text\">charPointAt(0)</code> 返回完整字符的十进制码点， <code class=\"gatsby-code-text\">charPointAt(1)</code> 返回这个字符的后2个字节的十进制码点，效果等同于 <code class=\"gatsby-code-text\">charCodeAt(1)</code> 。</p>\n<p>为了处理这种“不合理”的索引，可以借助 <code class=\"gatsby-code-text\">for...of</code> 循环，它会正确识别 32 位的UTF-16字符。</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre style=\"counter-reset: linenumber NaN\" class=\"gatsby-code-javascript line-numbers\"><code class=\"gatsby-code-javascript\"><span class=\"token keyword\">var</span> s <span class=\"token operator\">=</span> <span class=\"token string\">'𠮷a'</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">let</span> ch <span class=\"token keyword\">of</span> s<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>ch<span class=\"token punctuation\">.</span><span class=\"token function\">codePointAt</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">toString</span><span class=\"token punctuation\">(</span><span class=\"token number\">16</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token comment\">// \"20bb7\"</span>\n<span class=\"token comment\">// 不可打印</span></code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n<p>可以利用 <code class=\"gatsby-code-text\">charPointAt()</code> 来判断一个字符是双字节的还是四字节的：</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre style=\"counter-reset: linenumber NaN\" class=\"gatsby-code-javascript line-numbers\"><code class=\"gatsby-code-javascript\"><span class=\"token keyword\">function</span> <span class=\"token function\">is32Bit</span><span class=\"token punctuation\">(</span>c<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">return</span> c<span class=\"token punctuation\">.</span><span class=\"token function\">codePointAt</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">></span> <span class=\"token number\">0xFFFF</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token function\">is32Bit</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"𠮷\"</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// true</span>\n<span class=\"token function\">is32Bit</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"a\"</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// false</span></code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n<h2>String.fromCodePoint()</h2>\n<p>作用和 <code class=\"gatsby-code-text\">charPointAt()</code> 相反，从四字节码字得到一个完整字符，解决了 ES5 中 <code class=\"gatsby-code-text\">fromCharCode()</code> 只能识别双字节的问题。</p>\n<p>需要注意的是， <code class=\"gatsby-code-text\">fromCharPoint()</code> 定义在 <code class=\"gatsby-code-text\">String</code> 对象上，而 <code class=\"gatsby-code-text\">codePointAt()</code> 定义在字符串的实例对象上。</p>\n<h2>at()</h2>\n<p>ES5 提供了 <code class=\"gatsby-code-text\">charAt()</code> 方法，用于提取字符串中指定位置的字符，但同样存在无法处理四字节字符的问题，ES6 中有一个提案给出了 <code class=\"gatsby-code-text\">at()</code> 来处理该问题。</p>\n<h2>normalize()</h2>\n<p>Unicode 提供了两种方式来表示重音和音标等符号，一种是将带重音符号的字符单独作为一个字符，设定一个码点，另一种是提供单独的重音符号的码点，和普通字符合成一个四字节的字符。两种方法在视觉和语义上都没有差别，但JavaScript并不能将它们识别为相同的内容。</p>\n<p>ES6 提供了字符串实例的 <code class=\"gatsby-code-text\">normalize()</code> ，用来将字符的不同表示方式统一为相同的形式，这个过程称为“Unicode正规化”。 <code class=\"gatsby-code-text\">normalize()</code> 接受一个参数作为判定规则，可选的值有4个：</p>\n<ul>\n<li>NFC （标准等价合成）：视觉和语义上等价，返回合并后的字符（默认值）</li>\n<li>NFD （标准等价分解）：视觉和语义上等价，返回拆分后的字符</li>\n<li>NFKC（兼容等价合成）：语义上等价，但视觉上不等价，返回合并后的字符</li>\n<li>NFKD（兼容等价分解）：语义上等价，但视觉上不等价，返回拆分后的字符</li>\n</ul>\n<p>目前 <code class=\"gatsby-code-text\">normalize()</code> 还不能识别中文（比如“囍”和“喜喜”），以及三个及以上字符的合成。</p>\n<h2>includes(), startsWith(), endsWith()</h2>\n<p>在 ES6 之前，要想确定一个字符串是否包含某个子串，只能用 <code class=\"gatsby-code-text\">indexOf()</code> 。ES6 提供了三个新的方法来进行检索： <code class=\"gatsby-code-text\">includes()</code> ， <code class=\"gatsby-code-text\">startsWith()</code> ， <code class=\"gatsby-code-text\">endsWith()</code> ，各自的作用看名字就知道了。三个方法都支持第二个参数，表示开始搜索的索引位置。（ <code class=\"gatsby-code-text\">endsWith()</code> 比较特别，它的第二个参数表示前 n 个字符是否以第一个参数结尾）</p>\n<h2>repeat()</h2>\n<p>ES6 提供了原生函数用于重复字符串，方法接受一个非负整数用于指定重复次数，不小于-1的负数和NaN会被视为0，正小数会被向下取整，Infinity是不可取的，会报错，字符串会先试图转换成数字。</p>\n<h2>padStart(), padEnd()</h2>\n<p>这其实是 ES7 计划中的一部分，如果一个字符串不够指定长度，则对其进行填充以补足长度。方法接受两个参数，第一个参数是目标长度，如果字符串长度达不到这里指定的值，则进行补齐，否则啥也不做直接返回原字符串。第二个参数适用于补齐的内容（默认为空格），内容的长度未必刚好，不够的会重复，超出的会截断</p>\n<h2>模板字符串</h2>\n<p>通常我们要用 JavaScript 输出一些 HTML 时，会这样写：</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre style=\"counter-reset: linenumber NaN\" class=\"gatsby-code-javascript line-numbers\"><code class=\"gatsby-code-javascript\"><span class=\"token function\">$</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"#result\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">append</span><span class=\"token punctuation\">(</span>\n  <span class=\"token string\">\"There are &lt;b>\"</span> <span class=\"token operator\">+</span> basket<span class=\"token punctuation\">.</span>count <span class=\"token operator\">+</span> <span class=\"token string\">\"&lt;/b> \"</span>\n  <span class=\"token operator\">+</span> <span class=\"token string\">\"items in your basket, \"</span>\n  <span class=\"token operator\">+</span> <span class=\"token string\">\"&lt;em>\"</span> <span class=\"token operator\">+</span> basket<span class=\"token punctuation\">.</span>onSale <span class=\"token operator\">+</span> <span class=\"token string\">\"&lt;/em> are on sale!\"</span>\n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n<p>倒不是说上面这种写法有什么问题，只是比较繁琐。ES6 带来了更方便的写法：</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre style=\"counter-reset: linenumber NaN\" class=\"gatsby-code-javascript line-numbers\"><code class=\"gatsby-code-javascript\"><span class=\"token function\">$</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"#result\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">append</span><span class=\"token punctuation\">(</span><span class=\"token template-string\"><span class=\"token string\">`\n  There are &lt;b></span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>basket<span class=\"token punctuation\">.</span>count<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\">&lt;/b> items\n  in your basket, &lt;em></span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>basket<span class=\"token punctuation\">.</span>onSale<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\">&lt;/em>\n  are on sale!\n`</span></span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n<p>ES6 中通过反引号 `<code class=\"gatsby-code-text\"></code> 标记模板字符串，这是一种增强型的字符串，可以当做普通字符串一样使用，同时还支持定义多行字符串，或以 <code class=\"gatsby-code-text\">${obj.prop}</code> 的形式在字符串中嵌入表达式，表达式中可以包含变量、函数调用等各种 JavaScript 语句，嵌入的内容最终会被转换为字符串。（PHP中也有类似的写法，注意区分： <code class=\"gatsby-code-text\">{$obj[&#39;prop&#39;]}</code> ）</p>\n<p>如果需要引用模板字符串本身，只需在其外部用引号包裹即可。</p>\n<h2>标签模板</h2>\n<p>模板字符串可以紧跟在一个函数名后面，这个函数会被调用来处理这个模板字符串。</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre style=\"counter-reset: linenumber NaN\" class=\"gatsby-code-javascript line-numbers\"><code class=\"gatsby-code-javascript\"><span class=\"token keyword\">var</span> a <span class=\"token operator\">=</span> <span class=\"token number\">5</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">var</span> b <span class=\"token operator\">=</span> <span class=\"token number\">10</span><span class=\"token punctuation\">;</span>\n\ntag<span class=\"token template-string\"><span class=\"token string\">`Hello </span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span> a <span class=\"token operator\">+</span> b <span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\"> world </span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span> a <span class=\"token operator\">*</span> b <span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\">`</span></span><span class=\"token punctuation\">;</span></code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span><span></span></span></pre></div>\n<p>上面代码中的 <code class=\"gatsby-code-text\">tag</code> 其实是一个函数名，可以取任意有效的变量名，虽然它长得并不像个函数。整个表达式的返回值就是 <code class=\"gatsby-code-text\">tag</code> 函数处理模板字符串后的返回值。</p>\n<p>事实上， <code class=\"gatsby-code-text\">tag</code> 函数依次接收了多个参数，第一个参数是个数组，数组的内容是模板字符串中除了花括号表达式以外的内容。从第二个参数起就是花括号表达式计算的结果。换言之，上面代码实际上相当于：</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre style=\"counter-reset: linenumber NaN\" class=\"gatsby-code-javascript line-numbers\"><code class=\"gatsby-code-javascript\"><span class=\"token function\">tag</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token string\">'Hello '</span><span class=\"token punctuation\">,</span> <span class=\"token string\">' world '</span><span class=\"token punctuation\">,</span> <span class=\"token string\">''</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> <span class=\"token number\">15</span><span class=\"token punctuation\">,</span> <span class=\"token number\">50</span><span class=\"token punctuation\">)</span></code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span></span></pre></div>\n<p>这里 <code class=\"gatsby-code-text\">tag</code> 函数的实现是自定义的，在调用之前我们需要先定义它的行为，通常我们使用一个更加语义化的函数名。</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre style=\"counter-reset: linenumber NaN\" class=\"gatsby-code-javascript line-numbers\"><code class=\"gatsby-code-javascript\"><span class=\"token keyword\">function</span> <span class=\"token function\">hello</span><span class=\"token punctuation\">(</span>s<span class=\"token punctuation\">,</span> v1<span class=\"token punctuation\">,</span> v2<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>s<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>s<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>s<span class=\"token punctuation\">[</span><span class=\"token number\">2</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>v1<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>v2<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token keyword\">return</span> <span class=\"token string\">\"OK\"</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">var</span> a <span class=\"token operator\">=</span> <span class=\"token number\">5</span><span class=\"token punctuation\">,</span> b <span class=\"token operator\">=</span> <span class=\"token number\">10</span><span class=\"token punctuation\">;</span>\n\nhello<span class=\"token template-string\"><span class=\"token string\">`Hello </span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span> a <span class=\"token operator\">+</span> b <span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\"> world </span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span> a <span class=\"token operator\">*</span> b<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\">`</span></span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// \"Hello \"</span>\n<span class=\"token comment\">// \" world \"</span>\n<span class=\"token comment\">// \"\"</span>\n<span class=\"token comment\">// 15</span>\n<span class=\"token comment\">// 50</span>\n<span class=\"token comment\">// \"OK\"</span></code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n<p>标签模板被设计用来对输入进行过滤和处理，例如：过滤用户的非法输入、多语言国际化等，虽然不及 Mastache 来得强大，但很多功能都可以通过标签进一步实现，标签模板还能很好的和 React，甚至是 Java 等语言共用。</p>\n<h2>String.raw()</h2>\n<p>ES6 中新增的 <code class=\"gatsby-code-text\">String</code> 类的原生方法，用于返回一个连转义符号本身也被转义的最“原始”的字符串。该方法常用于处理模板字符串。其具体实现为：</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre style=\"counter-reset: linenumber NaN\" class=\"gatsby-code-javascript line-numbers\"><code class=\"gatsby-code-javascript\">String<span class=\"token punctuation\">.</span><span class=\"token function-variable function\">raw</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span>strings<span class=\"token punctuation\">,</span> <span class=\"token operator\">...</span>values<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">var</span> output <span class=\"token operator\">=</span> <span class=\"token string\">\"\"</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">var</span> index <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> index <span class=\"token operator\">&lt;</span> values<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">;</span> index<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    output <span class=\"token operator\">+=</span> strings<span class=\"token punctuation\">.</span>raw<span class=\"token punctuation\">[</span>index<span class=\"token punctuation\">]</span> <span class=\"token operator\">+</span> values<span class=\"token punctuation\">[</span>index<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n\n  output <span class=\"token operator\">+=</span> strings<span class=\"token punctuation\">.</span>raw<span class=\"token punctuation\">[</span>index<span class=\"token punctuation\">]</span>\n  <span class=\"token keyword\">return</span> output<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n<p>和标签模板非常类似，但这是一个更加“正常”的函数。 <code class=\"gatsby-code-text\">String.raw()</code> 的第一个参数必须是一个具有 <code class=\"gatsby-code-text\">raw</code> 属性的对象，其值为一个数组或类数组对象。</p>\n<h2>该系列的其他文章</h2>\n<p>上一篇：<a href=\"/blog/2016/02/19/es6-daily-04-babel\">每天一点ES6(4)：Babel</a></p>\n<p>下一篇：<a href=\"/blog/2016/04/06/es6-daily-06-regexp\">每天一点ES6(6)：正则的扩展</a></p>","frontmatter":{"title":"每天一点ES6(5)：字符串的扩展","description":"不变的字符串现在更加多变了","date":"2016-04-05","cover":{"publicURL":"/static/es6daily-0950334fb8899f1006423341cbfeecb9.jpg"},"tags":["ecmascript","2015","es6","javascript","string"],"series":"es6daily","draft":null},"fields":{"id":"es6-daily-05-string"}}},"pageContext":{"slug":"/blog/2016/04/05/es6-daily-05-string"}}