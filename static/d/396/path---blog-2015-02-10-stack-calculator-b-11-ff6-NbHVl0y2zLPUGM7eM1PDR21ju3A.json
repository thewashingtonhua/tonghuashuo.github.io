{"data":{"site":{"siteMetadata":{"title":"童话说","keywords":["tonghuashuo","github","front-end","javascript","typescript","react","node","washington","hua","童话","童话说","前端","博客","技术","计算机","互联网"]}},"markdownRemark":{"html":"<h2>简单说两句</h2>\n<p>用栈实现计算器，这是数据结构中关于栈的一个经典案例，在很多数据结构的教材中也都有明确的算法说明。这里我们给出一个用 JavaScript 实现的版本。</p>\n<h2>原理</h2>\n<p>这个案例的原理，是通过建立两个栈，分别存储读入的操作符和数字，在读取过程中判断操作符之间的优先级关系，来进行计算或等待。因此算法的核心其实是要建立起一张关于操作符优先级的关系表，我们可以通过二维数组来记录这张表，并实现比较。</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre style=\"counter-reset: linenumber NaN\" class=\"gatsby-code-javascript line-numbers\"><code class=\"gatsby-code-javascript\"><span class=\"token keyword\">function</span> <span class=\"token function\">compare</span><span class=\"token punctuation\">(</span>op1<span class=\"token punctuation\">,</span> op2<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">var</span> table <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Array</span><span class=\"token punctuation\">(</span><span class=\"token number\">7</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token comment\">//  1: '>'</span>\n  <span class=\"token comment\">// -1: '&lt;'</span>\n  <span class=\"token comment\">//  0: '='</span>\n  <span class=\"token comment\">//  9: 没有关系</span>\n  table<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span>  <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span>  <span class=\"token number\">1</span><span class=\"token punctuation\">,</span>  <span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n  table<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span>  <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span>  <span class=\"token number\">1</span><span class=\"token punctuation\">,</span>  <span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n  table<span class=\"token punctuation\">[</span><span class=\"token number\">2</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span>  <span class=\"token number\">1</span><span class=\"token punctuation\">,</span>  <span class=\"token number\">1</span><span class=\"token punctuation\">,</span>  <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span>  <span class=\"token number\">1</span><span class=\"token punctuation\">,</span>  <span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n  table<span class=\"token punctuation\">[</span><span class=\"token number\">3</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span>  <span class=\"token number\">1</span><span class=\"token punctuation\">,</span>  <span class=\"token number\">1</span><span class=\"token punctuation\">,</span>  <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span>  <span class=\"token number\">1</span><span class=\"token punctuation\">,</span>  <span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n  table<span class=\"token punctuation\">[</span><span class=\"token number\">4</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span>  <span class=\"token number\">0</span><span class=\"token punctuation\">,</span>  <span class=\"token number\">9</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n  table<span class=\"token punctuation\">[</span><span class=\"token number\">5</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span>  <span class=\"token number\">1</span><span class=\"token punctuation\">,</span>  <span class=\"token number\">1</span><span class=\"token punctuation\">,</span>  <span class=\"token number\">1</span><span class=\"token punctuation\">,</span>  <span class=\"token number\">9</span><span class=\"token punctuation\">,</span>  <span class=\"token number\">1</span><span class=\"token punctuation\">,</span>  <span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n  table<span class=\"token punctuation\">[</span><span class=\"token number\">6</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span>  <span class=\"token number\">9</span><span class=\"token punctuation\">,</span>  <span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token comment\">// 定位 2 个操作符</span>\n  <span class=\"token keyword\">var</span> ops <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token string\">'+'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'-'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'*'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'/'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'('</span><span class=\"token punctuation\">,</span> <span class=\"token string\">')'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'#'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">var</span> row <span class=\"token operator\">=</span> ops<span class=\"token punctuation\">.</span><span class=\"token function\">indexOf</span><span class=\"token punctuation\">(</span>op1<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">var</span> col <span class=\"token operator\">=</span> ops<span class=\"token punctuation\">.</span><span class=\"token function\">indexOf</span><span class=\"token punctuation\">(</span>op2<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token keyword\">return</span> table<span class=\"token punctuation\">[</span>row<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>col<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n<p><code class=\"gatsby-code-text\">table</code> 就是前面说到的优先级关系表，其顺序对应了 <code class=\"gatsby-code-text\">ops</code> 中定义的操作符的顺序。其中 <code class=\"gatsby-code-text\">#</code> 是我们额外加入的一个标记，用于标记方程式解析的开始和结束，在操作符栈 <code class=\"gatsby-code-text\">op</code> 的栈底和方程式的最右边各有一个，其本身并不是操作符。 <code class=\"gatsby-code-text\">table[i]</code> 记录了 <code class=\"gatsby-code-text\">ops</code> 中第i个操作符在遇到其它操作符时的优先级关系。</p>\n<p>有了这张表，接下来我们就可以进行方程式的解析了。首先创建两个栈 <code class=\"gatsby-code-text\">num</code> 和 <code class=\"gatsby-code-text\">op</code> （在JavaScript中栈其实也是数组），分别用于存储读入的数字和操作符，然后在 <code class=\"gatsby-code-text\">op</code> 中线存入一个 <code class=\"gatsby-code-text\">#</code> ，用于初始化。</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre style=\"counter-reset: linenumber NaN\" class=\"gatsby-code-javascript line-numbers\"><code class=\"gatsby-code-javascript\"><span class=\"token keyword\">function</span> <span class=\"token function\">calculate</span> <span class=\"token punctuation\">(</span>formula<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">var</span> num <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 用于存储数字的栈</span>\n  <span class=\"token keyword\">var</span> op <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 用于存储操作符的栈</span>\n  op<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span><span class=\"token string\">'#'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 起始符号</span>\n  <span class=\"token function\">displayStatus</span><span class=\"token punctuation\">(</span>op<span class=\"token punctuation\">,</span> num<span class=\"token punctuation\">,</span> formula<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 自定义函数，打印初始状态</span>\n\n  <span class=\"token keyword\">var</span> cache <span class=\"token operator\">=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 缓存上一个的符号</span>\n  <span class=\"token keyword\">var</span> c <span class=\"token operator\">=</span> formula<span class=\"token punctuation\">.</span><span class=\"token function\">charAt</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 获取第一个符号</span>\n  <span class=\"token keyword\">while</span><span class=\"token punctuation\">(</span>c <span class=\"token operator\">!=</span> <span class=\"token string\">'#'</span> <span class=\"token operator\">||</span> op<span class=\"token punctuation\">[</span>op<span class=\"token punctuation\">.</span>length<span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">!=</span> <span class=\"token string\">'#'</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span> <span class=\"token comment\">// # 表示计算结束</span>\n    <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span> <span class=\"token function\">isNumber</span><span class=\"token punctuation\">(</span>c<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\n      <span class=\"token comment\">// 处理多位数</span>\n      <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>cache <span class=\"token operator\">!=</span> <span class=\"token keyword\">null</span> <span class=\"token operator\">&amp;&amp;</span> <span class=\"token function\">isNumber</span><span class=\"token punctuation\">(</span>cache<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">var</span> tmp <span class=\"token operator\">=</span> <span class=\"token function\">Number</span><span class=\"token punctuation\">(</span>cache<span class=\"token punctuation\">)</span><span class=\"token operator\">*</span><span class=\"token number\">10</span> <span class=\"token operator\">+</span> <span class=\"token function\">Number</span><span class=\"token punctuation\">(</span>c<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        num<span class=\"token punctuation\">[</span>num<span class=\"token punctuation\">.</span>length<span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> tmp<span class=\"token punctuation\">;</span>\n      <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span>\n        num<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span>c<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n      <span class=\"token punctuation\">}</span>\n      cache <span class=\"token operator\">=</span> c<span class=\"token punctuation\">;</span> <span class=\"token comment\">// 缓存上一个字符</span>\n      formula <span class=\"token operator\">=</span> formula<span class=\"token punctuation\">.</span><span class=\"token function\">substring</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> formula<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n      c <span class=\"token operator\">=</span> formula<span class=\"token punctuation\">.</span><span class=\"token function\">charAt</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 获取下一个符号</span>\n    <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span> <span class=\"token comment\">// 非数字，操作符</span>\n      <span class=\"token keyword\">switch</span><span class=\"token punctuation\">(</span><span class=\"token function\">compare</span><span class=\"token punctuation\">(</span>op<span class=\"token punctuation\">[</span>op<span class=\"token punctuation\">.</span>length<span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> c<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">case</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">:</span> <span class=\"token comment\">// 后者优先级更高，等待</span>\n          op<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span>c<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n          cache <span class=\"token operator\">=</span> c<span class=\"token punctuation\">;</span>\n          formula <span class=\"token operator\">=</span> formula<span class=\"token punctuation\">.</span><span class=\"token function\">substring</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> formula<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n          c <span class=\"token operator\">=</span> formula<span class=\"token punctuation\">.</span><span class=\"token function\">charAt</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n          <span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">case</span> <span class=\"token number\">0</span><span class=\"token punctuation\">:</span> <span class=\"token comment\">// 优先级相等，或是 ')'、'#'</span>\n          op<span class=\"token punctuation\">.</span><span class=\"token function\">pop</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n          cache <span class=\"token operator\">=</span> c<span class=\"token punctuation\">;</span>\n          formula <span class=\"token operator\">=</span> formula<span class=\"token punctuation\">.</span><span class=\"token function\">substring</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> formula<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n          c <span class=\"token operator\">=</span> formula<span class=\"token punctuation\">.</span><span class=\"token function\">charAt</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n          <span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">case</span> <span class=\"token number\">1</span><span class=\"token punctuation\">:</span> <span class=\"token comment\">// 前者优先级更高，计算</span>\n          <span class=\"token keyword\">var</span> o <span class=\"token operator\">=</span> op<span class=\"token punctuation\">.</span><span class=\"token function\">pop</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n          <span class=\"token keyword\">var</span> b <span class=\"token operator\">=</span> num<span class=\"token punctuation\">.</span><span class=\"token function\">pop</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n          <span class=\"token keyword\">var</span> a <span class=\"token operator\">=</span> num<span class=\"token punctuation\">.</span><span class=\"token function\">pop</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n          <span class=\"token keyword\">var</span> r <span class=\"token operator\">=</span> <span class=\"token function\">cal</span><span class=\"token punctuation\">(</span>o<span class=\"token punctuation\">,</span> a<span class=\"token punctuation\">,</span> b<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n          num<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span>r<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n          cache <span class=\"token operator\">=</span> c<span class=\"token punctuation\">;</span>\n          <span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">default</span><span class=\"token punctuation\">:</span>\n          <span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span>\n      <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token function\">displayStatus</span><span class=\"token punctuation\">(</span>op<span class=\"token punctuation\">,</span> num<span class=\"token punctuation\">,</span> formula<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n  <span class=\"token keyword\">return</span> num<span class=\"token punctuation\">[</span>num<span class=\"token punctuation\">.</span>length<span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n<p>上面代码中的 <code class=\"gatsby-code-text\">displayStatus(op, num, formula)</code> 是我自定义的一个函数，用于将解析的过程展现出来，每经过一步之后各个栈里都包含了哪些元素一目了然。 <code class=\"gatsby-code-text\">isNumber(c)</code> 用于判断读入的字符是数字还是操作符、 <code class=\"gatsby-code-text\">compare(op1, op2)</code> 在第一段代码中已经给出，用于比较两个操作符的优先级、 <code class=\"gatsby-code-text\">cal(o, a, b)</code> 用于执行二元运算。这些函数实现起来都很简单，这里就不贴代码了。</p>\n<p>程序每次从方程式的左边读入一个字符，判断是数字还是操作符，然后压入对应的栈中，并对 <code class=\"gatsby-code-text\">op</code> 栈中最靠近栈顶的两个操作符进行优先级的比较，确定是进行计算还是需要等待更高优先级的计算。如此往复，直到最后 <code class=\"gatsby-code-text\">op</code> 只剩下 <code class=\"gatsby-code-text\">#</code> ，即为结束。</p>\n<p>方程式的读取方式是每次读取一个字符，这就带来一个问题：如果数字>9（即不止个位数，例如：23、768、1024……）怎么办？因此在栈初始化完成之后，我设立了一个变量 <code class=\"gatsby-code-text\">cache</code> ，这个变量会缓存上一个读入的字符，和即将读入的字符作比较，如果两者都是数字，就把它们拼接成一个数字。</p>\n<p>同理还有一个负数的问题，即减号后面跟一个数字，这时需要对减号进行判断，一方面是判断减号到底是操作符还是数字的一部分，另一方面这种情况通常意味着要么减号前面有一个左括号，要么减号是方程式的第一个字符，即方程式中的第一个数字就是负数。</p>\n<p>另外还有一个问题，小数，因为是逐字符读入，因此小数点也会被单独读入，需要手动进行拼接。</p>\n<p>好了，现在我们能够正常读取数字，并且正确分辨操作符了，接下来就要根据读入的内容进行解析了：如果读入的是数字，那就直接压入 <code class=\"gatsby-code-text\">num</code> 栈中；如果读入的是操作符，那么就要根据操作符之间的优先级关系进行判断，是立即执行计算，还是需要等待观望后序的方程内容。操作符之间的优先级关系无非3种情况：（这里我们约定， <code class=\"gatsby-code-text\">op</code> 的栈顶元素为 <code class=\"gatsby-code-text\">op1</code> ，新读取到的操作符为 <code class=\"gatsby-code-text\">op2</code> ）</p>\n<h3>1.  <code class=\"gatsby-code-text\">op1</code> 优先级低于 <code class=\"gatsby-code-text\">op2</code></h3>\n<p>这种情况下，后面有可能还会有优先级更高的运算出现，因此需要先讲当前的状态暂存（即将新读入的操作符压入 <code class=\"gatsby-code-text\">op</code> 栈中），并继续读取后序的字符。</p>\n<h3>2.  <code class=\"gatsby-code-text\">op1</code> 优先级高于 <code class=\"gatsby-code-text\">op2</code></h3>\n<p>当出现这种情况时，说明短时间内不会出现比当前栈中已保存的运算优先级更高的运算了，因此可以立即进行一次运算。先不把新读入的字符压栈，从 <code class=\"gatsby-code-text\">num</code> 栈的栈顶出栈两个数字，并让 <code class=\"gatsby-code-text\">op</code> 栈的栈顶出栈，将这三个元素组合起来进行一次运算，运算结果压回 <code class=\"gatsby-code-text\">num</code> 栈中。</p>\n<h3>3.  <code class=\"gatsby-code-text\">op1</code> 和 <code class=\"gatsby-code-text\">op2</code> 优先级相同</h3>\n<p>出现这种情况只有两种可能，要么 <code class=\"gatsby-code-text\">op</code> 的栈顶是左括号，新读入的是右括号，两者匹配，可以消除；要么 <code class=\"gatsby-code-text\">op</code> 栈顶是 <code class=\"gatsby-code-text\">#</code> ，新读入的也是 <code class=\"gatsby-code-text\">#</code> ，表示方程式读取完毕，计算全部结束。</p>\n<h2>小结</h2>\n<p>栈是数据结构中最基本的一种，用栈实现方程式的整式计算更是一个经典的案例，不过大部分的教材都是以10以内正整数的四则运算为例简单描述了一下算法，并未涉及一些特殊的情况，例如负数、小数、多位数等等，因此还是很有必要亲自写一遍感受一下。</p>","frontmatter":{"title":"栈计算器","description":"通过“栈”实现的方程式计算器","cover":{"publicURL":"/static/stack-calculator-256bbf9439e7f58974c946bc16f54832.jpg"},"tags":["stack","calculator","algorithm","project"],"series":"","draft":false},"fields":{"id":"stack-calculator","date":"2015-02-09T16:00:00.000Z"}}},"pageContext":{"slug":"/blog/2015/02/10/stack-calculator"}}