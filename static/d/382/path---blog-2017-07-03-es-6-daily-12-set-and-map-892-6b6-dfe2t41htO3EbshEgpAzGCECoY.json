{"data":{"site":{"siteMetadata":{"title":"童话说","keywords":["tonghuashuo","github","front-end","javascript","typescript","react","node","washington","hua","童话","童话说","前端","博客","技术","计算机","互联网"]}},"markdownRemark":{"html":"<h2>Set，一个独一无二的数组</h2>\n<p>Set 是 ES6 中新增的一种数据类型，可以理解为一种特殊的数组，重点区别在于 Set 的成员值都是唯一的，绝对不会重复。</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre style=\"counter-reset: linenumber NaN\" class=\"gatsby-code-javascript line-numbers\"><code class=\"gatsby-code-javascript\"><span class=\"token keyword\">const</span> s <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Set</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4</span><span class=\"token punctuation\">,</span> <span class=\"token number\">5</span><span class=\"token punctuation\">,</span> <span class=\"token number\">5</span><span class=\"token punctuation\">,</span> <span class=\"token number\">5</span><span class=\"token punctuation\">,</span> <span class=\"token number\">5</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span><span class=\"token function\">forEach</span><span class=\"token punctuation\">(</span>x <span class=\"token operator\">=></span> s<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">let</span> i <span class=\"token keyword\">of</span> s<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token comment\">// 1, 2, 3, 4, 5</span></code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n<p>注意到上面代码中最后重复的 5 仅被 <code class=\"gatsby-code-text\">add()</code> 了一次，重复的值并未被添加。</p>\n<p>Set 可以接受一个数组（或其他具有 Iterable 接口的数据结构）作为参数来进行初始化。反过来也可以把 Set 作为参数来初始化一个数组。</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre style=\"counter-reset: linenumber NaN\" class=\"gatsby-code-javascript line-numbers\"><code class=\"gatsby-code-javascript\"><span class=\"token keyword\">const</span> s <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Set</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 1, 2, 3</span>\n<span class=\"token keyword\">const</span> a <span class=\"token operator\">=</span> Array<span class=\"token punctuation\">.</span><span class=\"token keyword\">from</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">Set</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// [1, 2, 3]</span></code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span></span></pre></div>\n<p>利用 Set 中的值不会重复的特点，可以用它来对数组进行去重。</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre style=\"counter-reset: linenumber NaN\" class=\"gatsby-code-javascript line-numbers\"><code class=\"gatsby-code-javascript\"><span class=\"token punctuation\">[</span><span class=\"token operator\">...</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">Set</span><span class=\"token punctuation\">(</span>array<span class=\"token punctuation\">)</span><span class=\"token punctuation\">]</span>\n\n<span class=\"token comment\">// 可以进一步封装为函数</span>\n<span class=\"token keyword\">function</span> <span class=\"token function\">dedupe</span><span class=\"token punctuation\">(</span>array<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">return</span> Array<span class=\"token punctuation\">.</span><span class=\"token keyword\">from</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">Set</span><span class=\"token punctuation\">(</span>array<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token function\">dedupe</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// [1, 2, 3]</span></code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n<p>向 Set 中添加值时不会进行类型转换，因此 <code class=\"gatsby-code-text\">5</code> 和 <code class=\"gatsby-code-text\">&#39;5&#39;</code> 是两个不同的值。Set 内部判断的方式类似于 <code class=\"gatsby-code-text\">===</code> ，主要区别在于对 Set 而言， <code class=\"gatsby-code-text\">NaN</code> 等于自身，而 <code class=\"gatsby-code-text\">===</code> 认为 <code class=\"gatsby-code-text\">NaN</code> 不等于自身。</p>\n<h3>Set 实例的属性和方法</h3>\n<ul>\n<li><code class=\"gatsby-code-text\">size</code> ：返回实例的成员总数。</li>\n<li><code class=\"gatsby-code-text\">add(value)</code> ：添加某个值，返回添加后的 Set。</li>\n<li><code class=\"gatsby-code-text\">delete(value)</code> ：删除某个值，返回删除后的 Set。</li>\n<li><code class=\"gatsby-code-text\">has(value)</code> ：返回一个布尔值，表示该值时候是 Set 的成员。</li>\n<li><code class=\"gatsby-code-text\">clear()</code> ：清除所有成员，没有返回。</li>\n</ul>\n<p> <code class=\"gatsby-code-text\">add()</code> 和 <code class=\"gatsby-code-text\">delete()</code> 都会返回修改后的 Set，因此可以链式调用。</p>\n<p>Set 是一种特殊的 Object，在定义属性以及属性检测的写法上略有不同，但对 Set 判断类型得到的依然是 Object。</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre style=\"counter-reset: linenumber NaN\" class=\"gatsby-code-javascript line-numbers\"><code class=\"gatsby-code-javascript\"><span class=\"token keyword\">typeof</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">Set</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// \"object\"</span></code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span></span></pre></div>\n<h3>Set 的遍历</h3>\n<ul>\n<li><code class=\"gatsby-code-text\">keys()</code> ：返回键名。</li>\n<li><code class=\"gatsby-code-text\">values()</code> ：返回值。</li>\n<li><code class=\"gatsby-code-text\">entries()</code> ：返回键值对。</li>\n<li><code class=\"gatsby-code-text\">forEach()</code> ：使用回调函数遍历。</li>\n</ul>\n<p>由于 Set 的结构更接近数组，只有值没有键（或者说键就是值），因此 <code class=\"gatsby-code-text\">keys()</code> 和 <code class=\"gatsby-code-text\">values()</code> 都是返回相同的内容，即 Set 的成员数组， <code class=\"gatsby-code-text\">entries()</code> 返回一个二维数组 <code class=\"gatsby-code-text\">[[k1,v1], [k2,v2], ...]</code> ，相当于每个成员输出两遍。</p>\n<p>在对 Set 进行遍历时，Set 不会对成员进行排序，遍历顺序就是插入顺序。</p>\n<p>Set 的实例默认可遍历，遍历时默认使用 <code class=\"gatsby-code-text\">values()</code> 生成结果，可以直接用 <code class=\"gatsby-code-text\">for...of</code> 进行遍历，事实上 <code class=\"gatsby-code-text\">...</code> 运算符内部就是用的 <code class=\"gatsby-code-text\">for...of</code> 。</p>\n<p> <code class=\"gatsby-code-text\">map()</code> 和 <code class=\"gatsby-code-text\">filter()</code> 同样也适用于 Set。</p>\n<h2>WeakSet</h2>\n<p>WeakSet 类似于 Set，但有两点区别：（除此之外和 Set 的使用一样）</p>\n<ul>\n<li>WeakSet成员只能是对象，不能是别的类型（数值、字符串、Symbol）。</li>\n<li>WeakSet中的对象都是弱引用，GC 机制不会考虑 WeakSet 中引用的对象，如果该对象在别处不再被引用，就会被GC，WeakSet中的引用不作数，但内容继续保留，可以访问。</li>\n</ul>\n<p>利用 WeakSet 弱引用的特点，可以使用 WeakSet 保存一组临时对象，以及和对象绑定的信息（例如一组 DOM 节点），只要这些对象在外部消失，WeakSet 内部的引用就会自动消失，不会导致内存泄漏。但也正因为这一特性，WeakSet 的成员不适合用作引用，因为会随时消失，WeakSet 中成员的数量会受 GC 的影响，而 GC 运行的时机是不可预测的，所以 ES6 规定 WeakSet 不可遍历，甚至连 <code class=\"gatsby-code-text\">size</code> 属性也没有。（如果允许遍历，可能刚遍历完成员就没了，甚至遍历到一半就没了）</p>\n<p>对 WeakSet 的使用常见的一种错误就是直接用成员不是对象的一维数组去初始化，这与前面提到的 WeakSet 的第一条不同点相违背。</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre style=\"counter-reset: linenumber NaN\" class=\"gatsby-code-javascript line-numbers\"><code class=\"gatsby-code-javascript\"><span class=\"token keyword\">const</span> a1 <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span><span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">const</span> a2 <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">const</span> w1 <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">WeakSet</span><span class=\"token punctuation\">(</span>a1<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// [1, 2], [3, 4]</span>\n<span class=\"token keyword\">const</span> w2 <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">WeakSet</span><span class=\"token punctuation\">(</span>a2<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// Uncaught TypeError</span>\n\n<span class=\"token comment\">// 真正传入的内容不是 a1、a2 本身，而是其各自的成员。</span>\n<span class=\"token comment\">// a1 的成员是数组，数组属于对象，因此两个成员被放入 WeakSet</span>\n<span class=\"token comment\">// a2 的成员是数字，数字不属于对象，因此报错</span></code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n<h2>Map，一个独一无二无所不能的对象</h2>\n<p>Map 是对 Object 的改进，同样是键值对的结构，Object 中的键只能是字符串，如果试图把一个 DOM 节点用作键，Object 会自动将其转成字符串\"[object HTMLDivElement]\"，这样一来很容易就会导致命名冲突。Map 支持任何类型的键，换句话说，Object 是“键-值”的映射，Map 是“值-值”的映射</p>\n<h3>Map 的操作</h3>\n<ul>\n<li><code class=\"gatsby-code-text\">set(k, v)</code> ：设置新的属性/覆盖原有属性，返回修改后的 Map（即支持链式调用）</li>\n<li><code class=\"gatsby-code-text\">get(k)</code> ：从 Map 中获取指定键对应的值</li>\n<li><code class=\"gatsby-code-text\">has(k)</code> ：Map 中是否包含指定的键。</li>\n<li><code class=\"gatsby-code-text\">delete(k)</code> ：删除 Map 中指定的键，返回修改后的 Map（即支持链式调用）。</li>\n<li><code class=\"gatsby-code-text\">clear()</code> ：清空 Map 中所有的键。</li>\n<li><code class=\"gatsby-code-text\">size</code> ：返回 Map 中属性的数量。</li>\n</ul>\n<p>Map 支持传入一个二维数组进行初始化，二维数组中的每个元素都是一个\"[k, v]\"结构的数组。事实上任何实现了 Iterator 接口的数据结构都可以用于生成 Map，包括 Set 和 Map。</p>\n<p>由于 Map 中的键可以是任意类型，尤其需要注意对象/数组类型，必须是对同一个对象/数组的引用才会被认为是同一个键，值相等的不同引用会被认为是两个属性（引用的内存地址不同），这会导致两个键看上去一模一样，但实际上却是两个不同的键。</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre style=\"counter-reset: linenumber NaN\" class=\"gatsby-code-javascript line-numbers\"><code class=\"gatsby-code-javascript\"><span class=\"token keyword\">const</span> map <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Map</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\nmap<span class=\"token punctuation\">.</span><span class=\"token keyword\">set</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token string\">'a'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nmap<span class=\"token punctuation\">.</span><span class=\"token keyword\">get</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token string\">'a'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// undefined</span>\n\n<span class=\"token keyword\">const</span> k1 <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token string\">'a'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">const</span> k2 <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token string\">'a'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\nmap<span class=\"token punctuation\">.</span><span class=\"token keyword\">set</span><span class=\"token punctuation\">(</span>k1<span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nmap<span class=\"token punctuation\">.</span><span class=\"token keyword\">set</span><span class=\"token punctuation\">(</span>k2<span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nmap<span class=\"token punctuation\">.</span><span class=\"token keyword\">get</span><span class=\"token punctuation\">(</span>k1<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 2</span>\nmap<span class=\"token punctuation\">.</span><span class=\"token keyword\">get</span><span class=\"token punctuation\">(</span>k2<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 3</span></code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n<p>对于简单类型，只要两者严格相等，就认为是同一个键，NaN 虽然不严格等于自身，但在这儿被视为同一个键。</p>\n<h3>Map 的遍历</h3>\n<p>Map 的遍历和 Set 基本一样，除了不支持 <code class=\"gatsby-code-text\">map()</code> 和 <code class=\"gatsby-code-text\">filter()</code> 外。</p>\n<h3>Map 的转换</h3>\n<p>Map 可以和对象、数组、JSON 互相转换，前两者较为方便，对象和数组都可以用于创建 Map，Map 转对象和数组不过是逆过程；和 JSON 互转时可能会需要用对象作为中介。</p>\n<h2>WeakMap</h2>\n<p>WeakMap 和 WeakSet 的存在价值相似，只接受对象作键名、弱引用、无法遍历、没有 <code class=\"gatsby-code-text\">size</code> 和 <code class=\"gatsby-code-text\">clear()</code> 。</p>\n<p>WeakMap 的设计用于在对象上保存一些不需要参与引用计数的临时数据。注意 WeakMap 弱引用的是键名，键值依然是正常引用。</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre style=\"counter-reset: linenumber NaN\" class=\"gatsby-code-javascript line-numbers\"><code class=\"gatsby-code-javascript\"><span class=\"token keyword\">const</span> wm <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">WeakMap</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">let</span> key <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">let</span> obj <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>foo<span class=\"token punctuation\">:</span> <span class=\"token number\">1</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\nwm<span class=\"token punctuation\">.</span><span class=\"token keyword\">set</span><span class=\"token punctuation\">(</span>key<span class=\"token punctuation\">,</span> obj<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nobj <span class=\"token operator\">=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span>\nwm<span class=\"token punctuation\">.</span><span class=\"token keyword\">get</span><span class=\"token punctuation\">(</span>key<span class=\"token punctuation\">)</span>\n<span class=\"token comment\">// Object {foo: 1}</span></code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n<h3>WeakMap 的用途</h3>\n<p>WeakMap 最大的用途是用来避免内存泄漏。</p>\n<p>WeakMap 的一个典型应用场景就是以 DOM 节点作为键名，保存一些监听函数，当节点被删除时，对应的至也会消失，不存在内存泄漏的风险。</p>\n<p>或是用于定义私有属性，把类的私有属性部署到外部的 WeakMap 中，这里私有属性以弱引用的形式存在。当实例被销毁，对应的私有属性也会消失。</p>\n<h2>小结</h2>\n<p>Set / Map 其实是对 Array / Object 的完善，主要是做了去重。</p>\n<p>WeakSet / WeakMap 则是在 Set / Map 的基础上，限制了键名必须是对象，以及限制为弱引用（因而不可遍历、没有 <code class=\"gatsby-code-text\">size</code> 、没有 <code class=\"gatsby-code-text\">clear()</code> ）。</p>\n<p>ES6 最大的意义，其实就是对各个原始类型和数据结构的完善以及规范化，在该系列的之前几篇文章中，我们已经先后提到了对字符串、正则、数字、数组、函数、对象的完善和规范化，这篇则是对数组和对象这两种数据结构的完善和规范。</p>\n<h2>该系列的其他文章</h2>\n<p>上一篇：<a href=\"/blog/2017/07/02/es6-daily-11-symbol\">每天一点ES6(11)：Symbol</a></p>\n<p>下一篇：<a href=\"/blog/2017/12/20/es6-daily-13-proxy-and-reflect\">每天一点ES6(13)：Proxy</a></p>","frontmatter":{"title":"每天一点ES6(12)：Set 和 Map","description":"多余的，一概不要","date":"2017-07-03","cover":{"publicURL":"/static/es6daily-0950334fb8899f1006423341cbfeecb9.jpg"},"tags":["ecmascript","2015","es6","javascript","map","set"],"series":"es6daily","draft":null},"fields":{"id":"es6-daily-12-set-and-map","date":"2017-07-02T16:00:00.000Z"}}},"pageContext":{"slug":"/blog/2017/07/03/es6-daily-12-set-and-map"}}