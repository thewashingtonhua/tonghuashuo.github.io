{"data":{"site":{"siteMetadata":{"title":"童话说","keywords":["tonghuashuo","github","front-end","javascript","typescript","react","node","washington","hua","童话","童话说","前端","博客","技术","计算机","互联网"]}},"markdownRemark":{"html":"<h2>为什么是次日？</h2>\n<p>上手 TypeScript 并不难，有 JavaScript 基础的同学，花个一天时间过一遍文档，基本就都清楚了。如果你刚好还有 Java、C# 等后端语言的基础，那么相信你对「接口」、「枚举」、「泛型」等概念也不会陌生。毕竟 TypeScript 的设计结合了 JavaScript 和 C# 的特点。</p>\n<p>如果你看过文档就准备开始把 TypeScript 用到项目中去，那么恭喜你，你很快就会遇到各种坑，而且你无法直接从文档中寻找到对应的解决方案。这篇文章的存在，就是希望能够填补这中间的空白，帮助各位顺利的把 TypeScript 落地到项目中。这便是标题中「次日」的由来。</p>\n<p>如果你还没有看过 TypeScript 的文档，那么这篇文章现在还不适合你，建议先收藏起来，等看完了文档再回来。</p>\n<p>如果你已经准备好了，那么我们开始吧。</p>\n<h2>什么时候该用 TypeScript？</h2>\n<p>TypeScript 的好不用我多言，不喜欢 TypeScript 的朋友也不会把这篇文章看到这里。大家因为各种原因入了坑，但 TypeScript 并非必须。</p>\n<p>每个人接触 TypeScript 的原因不同，有的是被人安利，有的是因为新加入的团队在用，有的是因为用了 Angular。\n我属于最后那一种，但当时的目的只是为了使用 Angular，并没有非常完整地去学习这门语言，只要不影响使用 Angular 就没去多管，代码中遍地 <code class=\"gatsby-code-text\">any</code> 那是家常便饭。后来随着 TypeScript 的发展，越来越多的项目开始对其提供了支持，甚至彻底改写；配合 VS Code 还能获得非常好的代码补全支持（这在使用 JavaScript 时是难以实现的）。我特别喜欢这种不用看文档就可以看到某个组件有哪些可用的 <code class=\"gatsby-code-text\">props</code> 的感觉，于是受此吸引，决定认真学习一下这门语言。</p>\n<p>学过 TypeScript 的朋友都知道，TypeScript 可以简单理解为 JavaScript + Types。从实现业务的角度，TypeScript 并没有比 JavaScript 有多大优势，反而增加了不少用于定义类型的代码。这时候就要权衡一下成本，如果多出来的这部分代码并不能给项目带来足够的收益，那么这笔投入就不是很值得。所以决定是否需要使用 TypeScript 的关键，就在于我们是否需要类型定义。</p>\n<p>那什么类型定义有什么用呢？</p>\n<p>因此 TypeScript 比较适合大型项目，尤其是需要团队开发的那种，有助于提高代码的整理质量，降低沟通成本。小型项目就不推荐使用了，用 JavaScript 更加的快捷。</p>\n<h2>和 jsDoc 不冲突</h2>\n<p>TypeScript 虽然解决了类型推断的问题，但这并不代表我们的代码就不需要注释了。</p>\n<p>当然，有了 TypeScript 的类型系统，<code class=\"gatsby-code-text\">@param</code> 不需要再指定数据类型了，只要对变量的用途进行描述就好了。</p>\n<p>最近在做的一个项目就是这样，十万多行的代码，基本没几个注释，变量名的定义又非常的混乱，阅读起来非常的心累。不得已，只能一边看代码，一边给老代码加注释。</p>\n<h2>常见 Type（DOM、React）</h2>\n<h3>节点类型</h3>\n<p>Node -> ELement -> HTMLElement -> HTMLInputElement</p>\n<h3>事件类型</h3>\n<p>onClick, onChange 等的类型</p>\n<h2>标准 lib 也会出错</h2>\n<p>比如 classList</p>\n<h2>FAQ</h2>\n<h3>多重 extends</h3>\n<p>当一个类型 <code class=\"gatsby-code-text\">extends</code> 了多个其它类型，重复属性左边覆盖右边</p>\n<h3>obj[param]无法访问怎么办</h3>\n<p>定义 index</p>\n<h3>OptionBag</h3>\n<p>介绍这种形式</p>","frontmatter":{"title":"TypeScript 次日指南","description":"坑这种东西，是不会写在文档上的","cover":{"publicURL":"/static/typescript-8239307adc5ccdfc32320e1bcadb6300.jpg"},"tags":["typescript"],"series":"","draft":true},"fields":{"id":"typescript-the-second-day","date":"2019-07-27T16:00:00.000Z"}}},"pageContext":{"isCreatedByStatefulCreatePages":false,"slug":"/blog/2019/07/28/typescript-the-second-day"}}