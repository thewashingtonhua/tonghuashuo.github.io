{"data":{"site":{"siteMetadata":{"title":"童话说","keywords":["tonghuashuo","github","front-end","javascript","typescript","react","node","washington","hua","童话","童话说","前端","博客","技术","计算机","互联网"]}},"markdownRemark":{"html":"<h2>标准这事儿吧……</h2>\n<p>ES 2019（ES 10）标准于年前正式发布，借此机会，我们来看看都有哪些特性有幸转正吧。顺带把 ES 2018 的内容也补一下。</p>\n<p>ECMAScript 标准的制定过程，自 2015 年大改，至今已经是第 5 个年头了，想必大家都心里有数了。与 Java 等语言不同，JS 并非先制定标准再开始使用，恰恰相反，是大家先用着，觉得合适的，才收录进标准。标准的存在更像是一个“年度优秀特性合集”。对绝大部分开发者来说，一项特性进没进标准不重要，Babel 支不支持才重要。标准你随便写，不用 Babel 算我输。</p>\n<p>那么接下来，我们就来看看 2018 和 2019 两个年度的大合集都有些啥吧。</p>\n<h2>ES2018（ES9）</h2>\n<h3>1）异步迭代器（Asynchronous Iteration）</h3>\n<p>总有那么些时候，我们会想要同步执行一些异步的操作，比如下面这样的：</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre style=\"counter-reset: linenumber NaN\" class=\"gatsby-code-javascript line-numbers\"><code class=\"gatsby-code-javascript\"><span class=\"token keyword\">const</span> actions <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span>\n  Promise<span class=\"token punctuation\">.</span><span class=\"token function\">resolve</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n  Promise<span class=\"token punctuation\">.</span><span class=\"token function\">resolve</span><span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n  Promise<span class=\"token punctuation\">.</span><span class=\"token function\">resolve</span><span class=\"token punctuation\">(</span><span class=\"token number\">3</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">]</span></code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n<p>利用 <code class=\"gatsby-code-text\">async / await</code> 语法，我们可以很轻松的做到这点。</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre style=\"counter-reset: linenumber NaN\" class=\"gatsby-code-javascript line-numbers\"><code class=\"gatsby-code-javascript\"><span class=\"token keyword\">async</span> <span class=\"token keyword\">function</span> <span class=\"token function\">process</span> <span class=\"token punctuation\">(</span>actions<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> action <span class=\"token keyword\">of</span> actions<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">await</span> <span class=\"token function\">asyncFunc</span><span class=\"token punctuation\">(</span>action<span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n<p>上面的写法，会按顺序执行 <code class=\"gatsby-code-text\">asyncFunc</code>，上一个结束之后才会开始下一个，每次得到的 <code class=\"gatsby-code-text\">action</code> 都是一个异步操作本身（比如这里是一个 Promise 对象）。</p>\n<p>ES 2018 为我们提供了一种新的方式，在前面代码的基础之上，让每次得到的 <code class=\"gatsby-code-text\">action</code> 直接是异步操作完成之后的结果（比如这里是 Promise 被 resolve 之后的结果）。</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre style=\"counter-reset: linenumber NaN\" class=\"gatsby-code-javascript line-numbers\"><code class=\"gatsby-code-javascript\"><span class=\"token keyword\">async</span> <span class=\"token keyword\">function</span> <span class=\"token function\">process</span> <span class=\"token punctuation\">(</span>actions<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">for</span> <span class=\"token keyword\">await</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> action <span class=\"token keyword\">of</span> actions<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token function\">asyncFunc</span><span class=\"token punctuation\">(</span>action<span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n<h3>2）Rest/Spread Properties 开始适用于对象</h3>\n<p>这是一个从 ES 2015 开始就被广泛使用的特性，只不过 ES 2015 的标准只支持用于数组，从 ES 2018 开始也支持对象了。</p>\n<p>事实上 Map、Set、String 同样支持 <code class=\"gatsby-code-text\">...</code>，但具体是哪个版本引入的我还真没数。（反正我已经用了很久了，不管了）</p>\n<h3>3）Promise.finally</h3>\n<p>正如它的名字，finally。这也是个用了好久终于进标准的特性。</p>\n<p>在处理 Promise 的返回时，我们经常会遇到这样的情况：无论结果状态是 resolved 还是 rejected，都执行一样的逻辑。</p>\n<p>早先遇到这种情况，我们不得不在 <code class=\"gatsby-code-text\">then()</code> 和 <code class=\"gatsby-code-text\">catch()</code> 里都写一遍，现在可以一次性写在 <code class=\"gatsby-code-text\">finally()</code> 里。一个 <code class=\"gatsby-code-text\">finally()</code> 就等价于一组回调函数相同的 <code class=\"gatsby-code-text\">then()</code> 和 <code class=\"gatsby-code-text\">catch()</code>。</p>\n<p>虽然名字叫“最终”，但并不代表这是 Promise 执行的终点。<code class=\"gatsby-code-text\">finally()</code> 后面还可以继续跟 <code class=\"gatsby-code-text\">then()</code> 和 <code class=\"gatsby-code-text\">catch()</code>，无限跟。</p>\n<h3>4）移除对“在‘带标签的模版字面量’中使用非法转义序列”的限制</h3>\n<p>从这里开始的内容比较高阶，一般用不到，赶时间的话你可以跳过，直接去看 ES 2019。</p>\n<p>这一节的标题有点绕，我们拆开来讲。首先是“带标签的模版字面量”。</p>\n<p>ES 2015 引入了“模板字面量”的特性，相信大家都很熟悉了，长这样：</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre style=\"counter-reset: linenumber NaN\" class=\"gatsby-code-javascript line-numbers\"><code class=\"gatsby-code-javascript\"><span class=\"token keyword\">const</span> name <span class=\"token operator\">=</span> <span class=\"token string\">'John'</span>\n<span class=\"token keyword\">const</span> greetings <span class=\"token operator\">=</span> <span class=\"token template-string\"><span class=\"token string\">`Hi, </span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>name<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\">`</span></span> <span class=\"token comment\">// 'Hi, John'</span></code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span></span></pre></div>\n<p>这个特性有一个生僻用法，它允许我们自定义一个字符串模板函数，比如下面这样：</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre style=\"counter-reset: linenumber NaN\" class=\"gatsby-code-javascript line-numbers\"><code class=\"gatsby-code-javascript\"><span class=\"token keyword\">function</span> <span class=\"token function\">myTag</span><span class=\"token punctuation\">(</span>strings<span class=\"token punctuation\">,</span> <span class=\"token operator\">...</span>params<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token comment\">// strings: ['that ', ' is a ', '']</span>\n\n  <span class=\"token keyword\">const</span> name <span class=\"token operator\">=</span> params<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span>\n  <span class=\"token keyword\">const</span> age <span class=\"token operator\">=</span> params<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span>\n  <span class=\"token keyword\">const</span> title <span class=\"token operator\">=</span> age <span class=\"token operator\">></span> <span class=\"token number\">99</span> <span class=\"token operator\">?</span> <span class=\"token string\">'centenarian'</span> <span class=\"token punctuation\">:</span> <span class=\"token string\">'youngster'</span>\n\n  <span class=\"token keyword\">return</span> strings<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">+</span> name <span class=\"token operator\">+</span> strings<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">+</span> title\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">const</span> person <span class=\"token operator\">=</span> <span class=\"token string\">'Mike'</span>\n<span class=\"token keyword\">const</span> age <span class=\"token operator\">=</span> <span class=\"token number\">28</span>\n<span class=\"token keyword\">const</span> output <span class=\"token operator\">=</span> myTag<span class=\"token template-string\"><span class=\"token string\">`that </span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span> person <span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\"> is a </span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span> age <span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\">`</span></span>\n<span class=\"token comment\">// that Mike is a youngster</span></code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n<p>这就是“带标签的模版字面量”。尽管我严重怀疑这个用法的实用性（或许是觉得这样更加语义化？普通函数语义也不差啊？），但 ES 2018 还是选择了对这个特性进行完善。</p>\n<p>ES 2016 为这个特性加入了对转义序列的支持，比如八进制（\\ 开头）、十六进制（\\x 开头）、Unicode 字符（\\u 开头），但前提必须是一个有效的转义序列。如果是无效的序列，会报错。</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre style=\"counter-reset: linenumber NaN\" class=\"gatsby-code-javascript line-numbers\"><code class=\"gatsby-code-javascript\">latex<span class=\"token template-string\"><span class=\"token string\">`\\u00A9`</span></span>   <span class=\"token comment\">// 合法，表示“版权符号”</span>\nlatex<span class=\"token template-string\"><span class=\"token string\">`\\unicode`</span></span> <span class=\"token comment\">// 不合法，报错</span></code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span></span></pre></div>\n<p>ES 2018 去掉了这个限制，主要是考虑到对一些领域特定语言的支持，比如 <a target='_blank' href='https://www.latex-project.org/'>LaTeX</a>。（学术界一种常用的标记型语言，类似 HTML，其语法会用到大量形如转义序列的指令，如<code class=\"gatsby-code-text\">\\section</code>、<code class=\"gatsby-code-text\">\\frac</code>、<code class=\"gatsby-code-text\">\\sum</code> 等）</p>\n<p>但去掉限制只是说不报错了，模板中的无效转义序列会被替换为 undefined。比如下面这样：</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre style=\"counter-reset: linenumber NaN\" class=\"gatsby-code-javascript line-numbers\"><code class=\"gatsby-code-javascript\"><span class=\"token keyword\">function</span> <span class=\"token function\">myTag</span> <span class=\"token punctuation\">(</span>template<span class=\"token punctuation\">,</span> <span class=\"token operator\">...</span>params<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span> template<span class=\"token punctuation\">,</span> params <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">const</span> foo <span class=\"token operator\">=</span> <span class=\"token string\">'foo'</span>\n<span class=\"token keyword\">const</span> bar <span class=\"token operator\">=</span> <span class=\"token string\">'bar'</span>\nmyTag<span class=\"token template-string\"><span class=\"token string\">`aaa</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>foo<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\">\\unicode</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>bar<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\">bbb`</span></span>\n<span class=\"token comment\">/* {\n  template: ['aaa', undefined, 'bbb', raw: ['aaa', '\\unicode', 'bbb]],\n  params: ['foo', 'bar']\n} */</span></code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n<p>上面的代码里，<code class=\"gatsby-code-text\">template</code> 是模板部分被 <code class=\"gatsby-code-text\">${foo}</code> 等变量分割形成的数组；<code class=\"gatsby-code-text\">params</code> 就是 <code class=\"gatsby-code-text\">${foo}</code> 等变量组成的数组。可以看到，<code class=\"gatsby-code-text\">\\unicode</code> 由于是无效的转义序列，被替换为 <code class=\"gatsby-code-text\">undefined</code>，但在 <code class=\"gatsby-code-text\">template.raw</code> 里得以保留。</p>\n<p><code class=\"gatsby-code-text\">template.raw</code> 是“带标签的模版字面量”中 <code class=\"gatsby-code-text\">template</code> 参数特有的一个属性，保存了未被替换的原始字符串。</p>\n<p>这样一来，既避免了报错，又保留了开发者自行处理这些转义序列的能力。</p>\n<h3>5）关于正则表达式的一些改进</h3>\n<h4>5.1）<code class=\"gatsby-code-text\">s</code> 标志（dotAll 模式）</h4>\n<p>在正则表达式中，点号 <code class=\"gatsby-code-text\">.</code> 表示匹配任一单个字符，但这不包含换行符（如：<code class=\"gatsby-code-text\">\\n</code>、<code class=\"gatsby-code-text\">\\r</code>、<code class=\"gatsby-code-text\">\\f</code> 等）。</p>\n<p>现在可以通过在尾部增加 <code class=\"gatsby-code-text\">s</code> 标志的方式，让它匹配了。</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre style=\"counter-reset: linenumber NaN\" class=\"gatsby-code-javascript line-numbers\"><code class=\"gatsby-code-javascript\"><span class=\"token regex\">/hello.world/</span><span class=\"token punctuation\">.</span><span class=\"token function\">test</span><span class=\"token punctuation\">(</span><span class=\"token string\">'hello\\nworld'</span><span class=\"token punctuation\">)</span>  <span class=\"token comment\">// false</span>\n<span class=\"token operator\">/</span>hello<span class=\"token punctuation\">.</span>world<span class=\"token operator\">/</span>s<span class=\"token punctuation\">.</span><span class=\"token function\">test</span><span class=\"token punctuation\">(</span><span class=\"token string\">'hello\\nworld'</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// true</span></code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span></span></pre></div>\n<h4>5.2）扩展 Unicode 匹配范围</h4>\n<p>一直以来，要编写正则表达式来匹配各种 Unicode 字符并不容易，像 <code class=\"gatsby-code-text\">\\w</code>、<code class=\"gatsby-code-text\">\\W</code>、<code class=\"gatsby-code-text\">\\d</code> 等都只能匹配英文字符和数字，对于除此之外的字符就很难匹配了，例如非英语的文字。</p>\n<p>幸运的是，Unicode 为每个符号添加了元数据属性，并使用它来对各种符号进行分组和描述。例如，Unicode 数据库给所有印地语字符（हिन्दी）设置了 Script 属性，取值为 Devanagari（梵文），还设置了一个 Script_Extensions 属性，同样取值为 Devanagari。我们可以通过搜索 Script=Devanagari 来得到所有印地文字符。</p>\n<p>ES 2018 允许正则表达式通过 <code class=\"gatsby-code-text\">\\p{...}</code> 来扩展 Unicode 符号的匹配范围。例如：</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre style=\"counter-reset: linenumber NaN\" class=\"gatsby-code-javascript line-numbers\"><code class=\"gatsby-code-javascript\"><span class=\"token comment\">// 扩展匹配范围，允许匹配希腊字符</span>\n<span class=\"token keyword\">const</span> reGreekSymbol <span class=\"token operator\">=</span> <span class=\"token regex\">/\\p{Script=Greek}/u</span>\nreGreekSymbol<span class=\"token punctuation\">.</span><span class=\"token function\">test</span><span class=\"token punctuation\">(</span><span class=\"token string\">'π'</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// true</span>\n\n<span class=\"token comment\">// 扩展匹配范围，允许匹配 Emoji</span>\n<span class=\"token keyword\">const</span> reEmoji <span class=\"token operator\">=</span> <span class=\"token regex\">/\\p{Emoji}\\p{Emoji_Modifier}/u</span>\nreEmoji<span class=\"token punctuation\">.</span><span class=\"token function\">test</span><span class=\"token punctuation\">(</span><span class=\"token string\">'✌🏽'</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">//true</span></code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n<p>我们还可以通过 <code class=\"gatsby-code-text\">\\P{...}</code>（注意，大写 P）来去反，缩小匹配范围。</p>\n<h4>5.3）正则表达式命名捕获组</h4>\n<p>正则表达式支持通过括号在一个表达式中指定多个捕获组，就像下面这样：</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre style=\"counter-reset: linenumber NaN\" class=\"gatsby-code-javascript line-numbers\"><code class=\"gatsby-code-javascript\"><span class=\"token keyword\">const</span>\n  reDate <span class=\"token operator\">=</span> <span class=\"token regex\">/([0-9]{4})-([0-9]{2})-([0-9]{2})/</span><span class=\"token punctuation\">,</span>\n  match  <span class=\"token operator\">=</span> reDate<span class=\"token punctuation\">.</span><span class=\"token function\">exec</span><span class=\"token punctuation\">(</span><span class=\"token string\">'2019-02-11'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n  year   <span class=\"token operator\">=</span> match<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> <span class=\"token comment\">// 2019</span>\n  month  <span class=\"token operator\">=</span> match<span class=\"token punctuation\">[</span><span class=\"token number\">2</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> <span class=\"token comment\">// 02</span>\n  day    <span class=\"token operator\">=</span> match<span class=\"token punctuation\">[</span><span class=\"token number\">3</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 11</span></code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n<p>这样的代码虽然可以跑通，但阅读起来比较难懂，而且修改正则有可能会影响到匹配内容的索引。</p>\n<p>ES 2018 允许在 <code class=\"gatsby-code-text\">(</code> 后立即使用符号 <code class=\"gatsby-code-text\">?&lt;name&gt;</code> 对捕获组进行命名，匹配失败的会返回 <code class=\"gatsby-code-text\">undefined</code>，就像下面这样：</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre style=\"counter-reset: linenumber NaN\" class=\"gatsby-code-javascript line-numbers\"><code class=\"gatsby-code-javascript\"><span class=\"token keyword\">const</span>\n  reDate <span class=\"token operator\">=</span> <span class=\"token regex\">/(?&lt;year>[0-9]{4})-(?&lt;month>[0-9]{2})-(?&lt;day>[0-9]{2})/</span><span class=\"token punctuation\">,</span>\n  match  <span class=\"token operator\">=</span> reDate<span class=\"token punctuation\">.</span><span class=\"token function\">exec</span><span class=\"token punctuation\">(</span><span class=\"token string\">'2019-02-11'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n  year   <span class=\"token operator\">=</span> match<span class=\"token punctuation\">.</span>groups<span class=\"token punctuation\">.</span>year<span class=\"token punctuation\">,</span>  <span class=\"token comment\">// 2019</span>\n  month  <span class=\"token operator\">=</span> match<span class=\"token punctuation\">.</span>groups<span class=\"token punctuation\">.</span>month<span class=\"token punctuation\">,</span> <span class=\"token comment\">// 02</span>\n  day    <span class=\"token operator\">=</span> match<span class=\"token punctuation\">.</span>groups<span class=\"token punctuation\">.</span>day   <span class=\"token comment\">// 11</span></code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n<p>命名捕获组也可以用在 <code class=\"gatsby-code-text\">replace()</code> 中，用 <code class=\"gatsby-code-text\">$&lt;name&gt;</code> 进行引用（注意，虽然这里的语法和模板字面量很像，但并不是）。例如改变日期格式的顺序：</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre style=\"counter-reset: linenumber NaN\" class=\"gatsby-code-javascript line-numbers\"><code class=\"gatsby-code-javascript\"><span class=\"token keyword\">const</span>\n  reDate <span class=\"token operator\">=</span> <span class=\"token regex\">/(?&lt;year>[0-9]{4})-(?&lt;month>[0-9]{2})-(?&lt;day>[0-9]{2})/</span><span class=\"token punctuation\">,</span>\n  d      <span class=\"token operator\">=</span> <span class=\"token string\">'2019-02-11'</span><span class=\"token punctuation\">,</span>\n  usDate <span class=\"token operator\">=</span> d<span class=\"token punctuation\">.</span><span class=\"token function\">replace</span><span class=\"token punctuation\">(</span>reDate<span class=\"token punctuation\">,</span> <span class=\"token string\">'$&lt;month>-$&lt;day>-$&lt;year>'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 02-11-2019</span></code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span><span></span></span></pre></div>\n<h4>5.4）正则表达式的反向断言（lookbehind）</h4>\n<p>正则表达式支持正向断言（lookahead），例如：</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre style=\"counter-reset: linenumber NaN\" class=\"gatsby-code-javascript line-numbers\"><code class=\"gatsby-code-javascript\"><span class=\"token comment\">// 正向肯定查找</span>\n<span class=\"token operator\">/</span><span class=\"token function\">x</span><span class=\"token punctuation\">(</span><span class=\"token operator\">?</span><span class=\"token operator\">=</span>y<span class=\"token punctuation\">)</span><span class=\"token operator\">/</span> <span class=\"token comment\">// 匹配 x，但仅当 x 后面紧跟着 y 时</span>\n<span class=\"token operator\">/</span><span class=\"token function\">Jack</span><span class=\"token punctuation\">(</span><span class=\"token operator\">?</span><span class=\"token operator\">=</span>Sprat<span class=\"token punctuation\">)</span><span class=\"token operator\">/</span><span class=\"token punctuation\">.</span><span class=\"token function\">exec</span><span class=\"token punctuation\">(</span><span class=\"token string\">'JackSprat'</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// 'Jack'</span>\n<span class=\"token operator\">/</span><span class=\"token function\">Jack</span><span class=\"token punctuation\">(</span><span class=\"token operator\">?</span><span class=\"token operator\">=</span>Sprat<span class=\"token punctuation\">)</span><span class=\"token operator\">/</span><span class=\"token punctuation\">.</span><span class=\"token function\">exec</span><span class=\"token punctuation\">(</span><span class=\"token string\">'JackFrost'</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// null</span>\n<span class=\"token operator\">/</span><span class=\"token function\">Jack</span><span class=\"token punctuation\">(</span><span class=\"token operator\">?</span><span class=\"token operator\">=</span>Sprat<span class=\"token operator\">|</span>Frost<span class=\"token punctuation\">)</span><span class=\"token operator\">/</span><span class=\"token punctuation\">.</span><span class=\"token function\">exec</span><span class=\"token punctuation\">(</span><span class=\"token string\">'JackFrost'</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// 'Jack'</span>\n\n<span class=\"token comment\">// 正向否定查找</span>\n<span class=\"token operator\">/</span><span class=\"token function\">x</span><span class=\"token punctuation\">(</span><span class=\"token operator\">?</span><span class=\"token operator\">!</span>y<span class=\"token punctuation\">)</span><span class=\"token operator\">/</span> <span class=\"token comment\">// 匹配 x，但仅当 x 后面不紧跟着 y 时</span>\n<span class=\"token operator\">/</span><span class=\"token function\">Jack</span><span class=\"token punctuation\">(</span><span class=\"token operator\">?</span><span class=\"token operator\">!</span>Sprat<span class=\"token punctuation\">)</span><span class=\"token operator\">/</span><span class=\"token punctuation\">.</span><span class=\"token function\">exec</span><span class=\"token punctuation\">(</span><span class=\"token string\">'JackSprat'</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// null</span>\n<span class=\"token operator\">/</span><span class=\"token function\">Jack</span><span class=\"token punctuation\">(</span><span class=\"token operator\">?</span><span class=\"token operator\">!</span>Sprat<span class=\"token punctuation\">)</span><span class=\"token operator\">/</span><span class=\"token punctuation\">.</span><span class=\"token function\">exec</span><span class=\"token punctuation\">(</span><span class=\"token string\">'Jack Sprat'</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// 'Jack'</span></code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n<p>ES 2018 引入了工作方式相同，但是方向相反的反向断言（lookbehind），语法上的差别就在于 <code class=\"gatsby-code-text\">?</code> 变成了 <code class=\"gatsby-code-text\">?&lt;</code>，例如：</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre style=\"counter-reset: linenumber NaN\" class=\"gatsby-code-javascript line-numbers\"><code class=\"gatsby-code-javascript\"><span class=\"token comment\">// 反向肯定断言</span>\n<span class=\"token operator\">/</span><span class=\"token punctuation\">(</span><span class=\"token operator\">?</span><span class=\"token operator\">&lt;</span>x<span class=\"token punctuation\">)</span>y<span class=\"token operator\">/</span> <span class=\"token comment\">// 匹配 y，但仅当它紧跟在 x 后面时</span>\n<span class=\"token operator\">/</span><span class=\"token punctuation\">(</span><span class=\"token operator\">?</span><span class=\"token operator\">&lt;=</span>\\<span class=\"token constant\">D</span><span class=\"token punctuation\">)</span>\\d<span class=\"token operator\">+</span><span class=\"token operator\">/</span><span class=\"token punctuation\">.</span><span class=\"token function\">exec</span><span class=\"token punctuation\">(</span><span class=\"token string\">'$123.89'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span> <span class=\"token comment\">// 123.89</span>\n\n<span class=\"token comment\">// 反向否定断言</span>\n<span class=\"token operator\">/</span><span class=\"token punctuation\">(</span><span class=\"token operator\">?</span><span class=\"token operator\">&lt;</span><span class=\"token operator\">!</span>x<span class=\"token punctuation\">)</span>y<span class=\"token operator\">/</span> <span class=\"token comment\">// 匹配 y，但仅当它紧跟在 x 后面时</span>\n<span class=\"token operator\">/</span><span class=\"token punctuation\">(</span><span class=\"token operator\">?</span><span class=\"token operator\">&lt;</span><span class=\"token operator\">!</span>\\<span class=\"token constant\">D</span><span class=\"token punctuation\">)</span>\\d<span class=\"token operator\">+</span><span class=\"token operator\">/</span><span class=\"token punctuation\">.</span><span class=\"token function\">exec</span><span class=\"token punctuation\">(</span><span class=\"token string\">'$123.89'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span> <span class=\"token comment\">// null</span></code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n<h2>ES 2019</h2>\n<h3>1）JSON 成为 ECMAScript 的完全子集</h3>\n<p>从学习 JSON 的第一课起，我们就被告知 JSON 应该是专为 JavaScript 而存在的，因此 JSON 是 JavaScript 的子集这一点应该毫无争议啊，这算什么新特性！？</p>\n<p>然而细心的开发者却发现，有两个符号是例外：行分隔符（U + 2028）和段分隔符（U + 2029）。在 <code class=\"gatsby-code-text\">JSON.parse()</code> 中使用这两个会报语法错误。</p>\n<p>ES 2019 把这两个也收入囊中，从今往后，JSON 真正成为 ECMAScript 的完全子集，一个都不少。</p>\n<h3>2）更友好的 <code class=\"gatsby-code-text\">JSON.stringify()</code></h3>\n<p>过去，对于一些超出 Unicode 范围的转义序列，<code class=\"gatsby-code-text\">JSON.stringify()</code> 会输出未知字符。</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre style=\"counter-reset: linenumber NaN\" class=\"gatsby-code-javascript line-numbers\"><code class=\"gatsby-code-javascript\"><span class=\"token constant\">JSON</span><span class=\"token punctuation\">.</span><span class=\"token function\">stringify</span><span class=\"token punctuation\">(</span><span class=\"token string\">'\\uDF06\\uD834'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// '\"��\"'</span>\n<span class=\"token constant\">JSON</span><span class=\"token punctuation\">.</span><span class=\"token function\">stringify</span><span class=\"token punctuation\">(</span><span class=\"token string\">'\\uDEAD'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// '\"�\"'</span></code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span></span></pre></div>\n<p>现在，<code class=\"gatsby-code-text\">JSON.stringify()</code> 会为其重新转义，显示为有效的 Unicode 序列。</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre style=\"counter-reset: linenumber NaN\" class=\"gatsby-code-javascript line-numbers\"><code class=\"gatsby-code-javascript\"><span class=\"token constant\">JSON</span><span class=\"token punctuation\">.</span><span class=\"token function\">stringify</span><span class=\"token punctuation\">(</span><span class=\"token string\">'\\uDF06\\uD834'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// '\"\\\\udf06\\\\ud834\"'</span>\n<span class=\"token constant\">JSON</span><span class=\"token punctuation\">.</span><span class=\"token function\">stringify</span><span class=\"token punctuation\">(</span><span class=\"token string\">'\\uDEAD'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// '\"\\\\udead\"'</span></code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span></span></pre></div>\n<p>这和 ES 2018 中对“带标签的模板字面量”的修正，似乎有些许联系。结合历代 ECMAScript 标准，ECMAScript 在处理 Unicode 的问题上着实吓了不少功夫。</p>\n<h3>3）<code class=\"gatsby-code-text\">Function.prototpye.toString()</code> 显示更加完善</h3>\n<p>对一个函数使用 <code class=\"gatsby-code-text\">toString()</code> 会返回函数定义的内容。</p>\n<p>过去，返回的内容中 <code class=\"gatsby-code-text\">function</code> 关键字和函数名之间的注释，以及函数名和参数列表左括号之间的空格，是不会被打出来的。ES 2019 现在回精确返回这些内容，函数怎么定义的，这就就怎么显示。</p>\n<h3>4）<code class=\"gatsby-code-text\">Array.prorptype.flat()</code> 和 <code class=\"gatsby-code-text\">Array.prorptype.flatMap()</code></h3>\n<p>ES 2019 为数组新增两个函数。</p>\n<p><code class=\"gatsby-code-text\">flat()</code> 用于对数组进行降维，它可以接收一个参数，用于指定降多少维，默认为 1。降维最多降到一维。</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre style=\"counter-reset: linenumber NaN\" class=\"gatsby-code-javascript line-numbers\"><code class=\"gatsby-code-javascript\"><span class=\"token keyword\">const</span> array <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span><span class=\"token number\">3</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">]</span>\narray<span class=\"token punctuation\">.</span><span class=\"token function\">flat</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// [1, 2, [3]]</span>\narray<span class=\"token punctuation\">.</span><span class=\"token function\">flat</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// [1, 2, [3]]，默认降 1 维</span>\narray<span class=\"token punctuation\">.</span><span class=\"token function\">flat</span><span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// [1, 2, 3]</span>\narray<span class=\"token punctuation\">.</span><span class=\"token function\">flat</span><span class=\"token punctuation\">(</span><span class=\"token number\">3</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// [1, 2, 3]，最多降到一维</span></code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n<p><code class=\"gatsby-code-text\">flatMap()</code> 允许在对数组进行降维之前，先进行一轮映射，用法和 <code class=\"gatsby-code-text\">map()</code> 一样。然后再将映射的结果降低一个维度。可以说 <code class=\"gatsby-code-text\">arr.flatMap(fn)</code> 等效于 <code class=\"gatsby-code-text\">arr.map(fn).flat(1)</code>。（但是根据 <a target='_blank' href='https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Array/flatMap'>MDN</a>）</p>\n<p><code class=\"gatsby-code-text\">flat()</code> 和 <code class=\"gatsby-code-text\">flatMap()</code> 都是返回新的数组，原数组不变。</p>\n<h2>遗憾</h2>\n<p>ES 2019 已经非常完善了，但还是有很多我们非常熟悉，甚至已经用了好久的特性没能进入标准，比如：</p>\n<ul>\n<li>\n<p>Stage 3（明年见？）</p>\n<ul>\n<li>Dynamic Import</li>\n<li>私有属性</li>\n</ul>\n</li>\n<li>\n<p>Stage 2（加油？）</p>\n<ul>\n<li>装饰器</li>\n</ul>\n</li>\n<li>\n<p>Stage 1（你们慢慢讨论，我们先用为敬）</p>\n<ul>\n<li>Observable</li>\n<li>Promise.try</li>\n<li>String.prototype.replaceAll</li>\n<li>do</li>\n</ul>\n</li>\n</ul>\n<p>不过这不重要，标准只是官宣，只要 Babel 支持就好，哈哈哈哈哈哈。</p>","frontmatter":{"title":"你可能已经知道的 ES 2018 和 2019","description":"好饭不怕晚","cover":{"publicURL":"/static/es2019-5646b4878e533cd7c725ce4c17984071.jpg"},"tags":["ecmascript","2018","2019"],"series":null,"draft":true},"fields":{"id":"es2018-and-es2019","date":"2019-02-10T16:00:00.000Z"}}},"pageContext":{"slug":"/blog/2019/02/11/es2018-and-es2019"}}