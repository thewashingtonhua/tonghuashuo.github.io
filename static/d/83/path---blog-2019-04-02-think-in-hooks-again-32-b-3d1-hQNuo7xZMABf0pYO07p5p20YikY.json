{"data":{"site":{"siteMetadata":{"title":"童话说","keywords":["tonghuashuo","github","front-end","javascript","typescript","react","node","washington","hua","童话","童话说","前端","博客","技术","计算机","互联网"]}},"markdownRemark":{"html":"<h2>Again？Why？</h2>\n<p>在 Hooks 刚刚发布之际，官方曾明确表示：</p>\n<ol>\n<li>我们不打算移除 Class。（至少短期内不会）。</li>\n<li>大家也不用着急现在就迁移到 Hooks（毕竟变化很大，给大家适应的时间）</li>\n<li>但未来是属于 Hooks 的。（所以最终你还是会迁移到 Hooks）</li>\n</ol>\n<p>因此在这个阶段，大家最关心的问题，就是怎么把现有的 Class 组件改造成 Hooks 的方式。我之前写过 <a href=\"/blog/2019/02/15/how-to-think-in-hooks\">一篇博客</a>，讲的就是 Class 组件的各个生命周期在 Hooks 中对应的方案。</p>\n<p>在亲自踩了 1 个多月的坑，并且掺和了一脚 <a href=\"https://github.com/reactjs/zh-hans.reactjs.org/pull/121\">React 官网的翻译工作</a> 之后，我发现，事情似乎没那么简单。单纯用这个思维来考虑问题，并不能很好地解释 Hooks 的一些行为，比如 <code class=\"gatsby-code-text\">useEffect</code> 中的变量没有按预期的方式去更新、命令式与声明式的冲突等。</p>\n<p>相信 React 的老用户们对 overreacted.io 这个网站都已经非常熟悉了，这是 React 核心开发者 Dan Abramov 的个人博客，博客内容主要围绕 React 的一些深入解读，是除了官网之外，了解 React 的最佳去处。近期 Dan 更新了 <a href=\"https://overreacted.io/making-setinterval-declarative-with-react-hooks/\">几篇</a> <a href=\"https://overreacted.io/a-complete-guide-to-useeffect/\">博客</a>，拜读之后，我豁然醒悟，对「如何 Think in Hooks」有了新的认识。</p>\n<h2>欲练此功，必先……忘记过去之所学</h2>\n<p>Hooks 正确打开方式，</p>","frontmatter":{"title":"Think in Hooks, Again","description":"忘记过去之所学，我们从头来过","cover":{"publicURL":"/static/think-in-hooks-26d13ef2591ee05a3c4bba7fc34daa88.jpg"},"tags":["react","hooks"],"series":"","draft":true},"fields":{"id":"think-in-hooks-again","date":"2019-04-01T16:00:00.000Z"}}},"pageContext":{"slug":"/blog/2019/04/02/think-in-hooks-again"}}