{"data":{"site":{"siteMetadata":{"title":"童话说","keywords":["tonghuashuo","github","front-end","javascript","typescript","react","node","washington","hua","童话","童话说","前端","博客","技术","计算机","互联网"]}},"markdownRemark":{"html":"<h2>写在前面</h2>\n<p>这次轮到遍历了。其实 ES5 中就已经有好多种用于遍历的方法：</p>\n<ul>\n<li><code class=\"gatsby-code-text\">while</code></li>\n<li><code class=\"gatsby-code-text\">do-while</code></li>\n<li><code class=\"gatsby-code-text\">for</code></li>\n<li><code class=\"gatsby-code-text\">for-in</code></li>\n<li><code class=\"gatsby-code-text\">forEach</code></li>\n<li><code class=\"gatsby-code-text\">map</code></li>\n</ul>\n<p>那么这次 ES6 又打算在遍历上搞什么花样劲？</p>\n<h2>Iterator</h2>\n<p>算上 ES6 新引入的数据类型，JavaScript 原生用于表示集合的数据结构就有：Array、Object、Map、Set 四种，开发者还可以自定义由各种数据结构组成的集合。面对众多的数据结构，我们需要一个统一的方式来遍历各种数据结构，Iterator 就是为此而生。</p>\n<p>Iterator 是 ES6 新引入的接口，为各种不同的数据结构提供了一种统一的访问机制。任何数据结构只要部署了 Iterator 接口，就可以执行遍历操作。ES6 为此提供了 <code class=\"gatsby-code-text\">for...of</code> 语法来遍历部署了 Iterator 接口的数据结构。只要数据结构部署了 Iterator 接口，我们就称之为“可遍历的”。</p>\n<p>在 ES6 的规范中，以下数据结构原生就具备 Iterator 接口：</p>\n<ul>\n<li>Array</li>\n<li>Map</li>\n<li>Set</li>\n<li>String</li>\n<li>TypedArray</li>\n<li>函数的 arguments 对象</li>\n<li>NodeList 对象</li>\n</ul>\n<p>Iterator 本质是一个遍历器对象，它向数据结构中部署了一个指针，默认指向其开始开始位置，然后提供了 <code class=\"gatsby-code-text\">next()</code> 方法用来依次访问下一个元素。每次调用 <code class=\"gatsby-code-text\">next()</code> 会返回一个对象，对象具有 <code class=\"gatsby-code-text\">value</code> 和 <code class=\"gatsby-code-text\">done</code> 两个属性，分别表示当前项的取值，和是否还有下一项。</p>\n<p>以下代码实现了一个简单的遍历器对象：</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre style=\"counter-reset: linenumber NaN\" class=\"gatsby-code-js line-numbers\"><code class=\"gatsby-code-js\"><span class=\"token keyword\">const</span> it <span class=\"token operator\">=</span> <span class=\"token function\">makeIterator</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token string\">'a'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'b'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n\nit<span class=\"token punctuation\">.</span><span class=\"token function\">next</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// { value: \"a\", done: false }</span>\nit<span class=\"token punctuation\">.</span><span class=\"token function\">next</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// { value: \"b\", done: false }</span>\nit<span class=\"token punctuation\">.</span><span class=\"token function\">next</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// { value: undefined, done: true }</span>\n\n<span class=\"token keyword\">const</span> <span class=\"token function-variable function\">makeIterator</span> <span class=\"token operator\">=</span> <span class=\"token parameter\">array</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">let</span> nextIndex <span class=\"token operator\">=</span> <span class=\"token number\">0</span>\n  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token function-variable function\">next</span><span class=\"token punctuation\">:</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> nextIndex <span class=\"token operator\">&lt;</span> array<span class=\"token punctuation\">.</span>length\n      <span class=\"token operator\">?</span> <span class=\"token punctuation\">{</span> value<span class=\"token punctuation\">:</span> array<span class=\"token punctuation\">[</span>nextIndex<span class=\"token operator\">++</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> done<span class=\"token punctuation\">:</span> <span class=\"token boolean\">false</span> <span class=\"token punctuation\">}</span>\n      <span class=\"token punctuation\">:</span> <span class=\"token punctuation\">{</span> value<span class=\"token punctuation\">:</span> <span class=\"token keyword\">undefined</span><span class=\"token punctuation\">,</span> done<span class=\"token punctuation\">:</span> <span class=\"token boolean\">true</span> <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n<p>Iterator 只是把接口应用到数据结构上，和数据结构本身没有关联。</p>\n<p>ES6 规定，默认的 Iterator 接口部署在 <code class=\"gatsby-code-text\">Symbol.iterator</code> 属性，具备这个属性的接口就是“可遍历的”。 <code class=\"gatsby-code-text\">Symbol.iterator</code> 的值是一个函数，执行该函数会返回一个遍历器。属性名 <code class=\"gatsby-code-text\">Symbol.iterator</code> 本身是一个表达式，返回 Symbol 对象的 iterator 属性，这是一个预定义好的、类型为 Symbol 的特殊值，所以必须要放在方括号内。</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre style=\"counter-reset: linenumber NaN\" class=\"gatsby-code-js line-numbers\"><code class=\"gatsby-code-js\"><span class=\"token keyword\">const</span> obj <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n  data<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">[</span> <span class=\"token string\">'hello'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'world'</span> <span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">[</span>Symbol<span class=\"token punctuation\">.</span>iterator<span class=\"token punctuation\">]</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">const</span> self <span class=\"token operator\">=</span> <span class=\"token keyword\">this</span>\n    <span class=\"token keyword\">let</span> index <span class=\"token operator\">=</span> <span class=\"token number\">0</span>\n    <span class=\"token keyword\">return</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token function\">next</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">return</span> index <span class=\"token operator\">&lt;</span> self<span class=\"token punctuation\">.</span>data<span class=\"token punctuation\">.</span>length\n          <span class=\"token operator\">?</span> <span class=\"token punctuation\">{</span> value<span class=\"token punctuation\">:</span> self<span class=\"token punctuation\">.</span>data<span class=\"token punctuation\">[</span>index<span class=\"token operator\">++</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> done<span class=\"token punctuation\">:</span> <span class=\"token boolean\">false</span> <span class=\"token punctuation\">}</span>\n          <span class=\"token punctuation\">:</span> <span class=\"token punctuation\">{</span> value<span class=\"token punctuation\">:</span> <span class=\"token keyword\">undefined</span><span class=\"token punctuation\">,</span> done<span class=\"token punctuation\">:</span> <span class=\"token boolean\">true</span> <span class=\"token punctuation\">}</span>\n      <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n<p>对于类似数组的对象（存在数值键名和 length 属性），可以直接将 <code class=\"gatsby-code-text\">Array.prototype[Symbol.iterator]</code> 赋值给对象的 <code class=\"gatsby-code-text\">[Symbol.iterator]</code> 属性。</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre style=\"counter-reset: linenumber NaN\" class=\"gatsby-code-js line-numbers\"><code class=\"gatsby-code-js\"><span class=\"token class-name\">Obj</span><span class=\"token punctuation\">.</span>prototype<span class=\"token punctuation\">[</span>Symbol<span class=\"token punctuation\">.</span>iterator<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token class-name\">Array</span><span class=\"token punctuation\">.</span>prototype<span class=\"token punctuation\">[</span>Symbol<span class=\"token punctuation\">.</span>iterator<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n<span class=\"token class-name\">Obj</span><span class=\"token punctuation\">.</span>prototype<span class=\"token punctuation\">[</span>Symbol<span class=\"token punctuation\">.</span>iterator<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>Symbol<span class=\"token punctuation\">.</span>iterator<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 效果相同</span>\n\n<span class=\"token keyword\">const</span> iterable <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token number\">0</span><span class=\"token punctuation\">:</span> <span class=\"token string\">'a'</span><span class=\"token punctuation\">,</span>\n  <span class=\"token number\">1</span><span class=\"token punctuation\">:</span> <span class=\"token string\">'b'</span><span class=\"token punctuation\">,</span>\n  <span class=\"token number\">2</span><span class=\"token punctuation\">:</span> <span class=\"token string\">'c'</span><span class=\"token punctuation\">,</span>\n  length<span class=\"token punctuation\">:</span> <span class=\"token number\">3</span><span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">[</span>Symbol<span class=\"token punctuation\">.</span>iterator<span class=\"token punctuation\">]</span><span class=\"token punctuation\">:</span> <span class=\"token class-name\">Array</span><span class=\"token punctuation\">.</span>prototype<span class=\"token punctuation\">[</span>Symbol<span class=\"token punctuation\">.</span>iterator<span class=\"token punctuation\">]</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> item <span class=\"token keyword\">of</span> iterable<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>item<span class=\"token punctuation\">)</span> <span class=\"token comment\">// 'a', 'b', 'c'</span>\n<span class=\"token punctuation\">}</span></code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n<p>字符串某种程度上也可以看作是数组，因此也默认部署了 Iterator 接口，可以使用 <code class=\"gatsby-code-text\">for...of</code> 遍历。</p>\n<h2>Iterator 的调用</h2>\n<p>以下情况下会调用 Iterator 接口：</p>\n<ul>\n<li><code class=\"gatsby-code-text\">for...of</code></li>\n<li>解构赋值</li>\n<li>扩展运算符</li>\n<li><code class=\"gatsby-code-text\">yield*</code></li>\n<li><code class=\"gatsby-code-text\">Array.from</code></li>\n<li><code class=\"gatsby-code-text\">Map()</code> 、 <code class=\"gatsby-code-text\">Set()</code> 、 <code class=\"gatsby-code-text\">WeekMap()</code> 、 <code class=\"gatsby-code-text\">WeekSet()</code> ，例如： <code class=\"gatsby-code-text\">new Map([[&#39;a&#39;, 1], [&#39;b&#39;, 2]])</code></li>\n<li><code class=\"gatsby-code-text\">Promise.all()</code> 、 <code class=\"gatsby-code-text\">Promise.race()</code></li>\n</ul>\n<h2>Iterator 和 Generator</h2>\n<p>日常使用中和 Iterator 关系最大的，要数 Generator —— ES6 中新引入的一种异步解决方案，后面会讲到。通过 Generator，我们可以非常快捷的部署 Iterator 接口，只需一步步写出每次要输出的 value 即可，不用费心去管理 done。</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre style=\"counter-reset: linenumber NaN\" class=\"gatsby-code-js line-numbers\"><code class=\"gatsby-code-js\"><span class=\"token keyword\">const</span> obj <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token operator\">*</span> <span class=\"token punctuation\">[</span>Symbol<span class=\"token punctuation\">.</span>iterator<span class=\"token punctuation\">]</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">yield</span> <span class=\"token string\">'hello'</span>\n    <span class=\"token keyword\">yield</span> <span class=\"token string\">'world'</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token punctuation\">[</span><span class=\"token operator\">...</span>obj<span class=\"token punctuation\">]</span> <span class=\"token comment\">// [\"hello\", \"world\"]</span></code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n<h2>遍历器对象的 return() 和 throw()</h2>\n<p>除了  <code class=\"gatsby-code-text\">next()</code> ，遍历器对象还包含了 <code class=\"gatsby-code-text\">return()</code> 和 <code class=\"gatsby-code-text\">throw()</code> 两个可选的方法。</p>\n<p>如果 <code class=\"gatsby-code-text\">for...of</code> 提前退出（异常，或者遇到 <code class=\"gatsby-code-text\">break</code> 、 <code class=\"gatsby-code-text\">continue</code> 语句）， <code class=\"gatsby-code-text\">return()</code> 会被调用，通常用于在对象完成遍历前释放资源占用。</p>\n<p>举个例子：</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre style=\"counter-reset: linenumber NaN\" class=\"gatsby-code-js line-numbers\"><code class=\"gatsby-code-js\"><span class=\"token comment\">// readLinesSync 接受一个文件对象作为参数，返回一个遍历器对象</span>\n<span class=\"token keyword\">function</span> <span class=\"token function\">readLinesSync</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">file</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token punctuation\">[</span>Symbol<span class=\"token punctuation\">.</span>iterator<span class=\"token punctuation\">]</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token keyword\">return</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token function\">next</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n          <span class=\"token keyword\">return</span> <span class=\"token punctuation\">{</span> done<span class=\"token punctuation\">:</span> <span class=\"token boolean\">false</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n        <span class=\"token keyword\">return</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n          file<span class=\"token punctuation\">.</span><span class=\"token function\">close</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n          <span class=\"token keyword\">return</span> <span class=\"token punctuation\">{</span> done<span class=\"token punctuation\">:</span> <span class=\"token boolean\">true</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n      <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\">// 情况一，输出文件的第一行以后，执行 return 方法，关闭这个文件</span>\n<span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">let</span> line <span class=\"token keyword\">of</span> <span class=\"token function\">readLinesSync</span><span class=\"token punctuation\">(</span>fileName<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>line<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\">// 情况二，输出所有行以后，执行 return 方法，关闭该文件</span>\n<span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">let</span> line <span class=\"token keyword\">of</span> <span class=\"token function\">readLinesSync</span><span class=\"token punctuation\">(</span>fileName<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>line<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">continue</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\">// 情况三，执行 return 方法关闭文件之后，再抛出错误</span>\n<span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">let</span> line <span class=\"token keyword\">of</span> <span class=\"token function\">readLinesSync</span><span class=\"token punctuation\">(</span>fileName<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>line<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">throw</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Error</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n<p>需要注意的是， <code class=\"gatsby-code-text\">return()</code> 必须返回一个对象，z合适 Generator 的规格决定的。 <code class=\"gatsby-code-text\">throw()</code> 主要是配合 Generator 使用，一般的遍历器用不到，后面会具体讲。</p>\n<h2>for...of</h2>\n<p>配合 Iterator，ES6 新增了一个新的循环操作： <code class=\"gatsby-code-text\">for...of</code> ，只要是正确部署了 <code class=\"gatsby-code-text\">Symbol.iterator</code> 属性的数据结构都可以使用它。</p>\n<p><code class=\"gatsby-code-text\">for...of</code> 在使用上和 <code class=\"gatsby-code-text\">for...in</code> 非常相似，最大区别在于 <code class=\"gatsby-code-text\">for...in</code> 每次得到的是对象的属性键，如果用于数组就是返回的下标，而 <code class=\"gatsby-code-text\">for...of</code> 每次得到的是对象的属性值，如果用于数组就是返回的元素值。</p>\n<p>Map 和 Set 也可以通过 <code class=\"gatsby-code-text\">for...of</code> 来遍历，不过是按照元素的添加顺序进行遍历。另外 Set 在遍历时返回的是值，Map 在遍历时返回的是键值数组。</p>\n<p>对象、数组、Map、Set 都支持 <code class=\"gatsby-code-text\">keys()</code> 、 <code class=\"gatsby-code-text\">values()</code> 、 <code class=\"gatsby-code-text\">entries()</code> ，其返回的内容也是遍历器对象，可以通过 <code class=\"gatsby-code-text\">for...of</code> 遍历。</p>\n<h2>小结</h2>\n<p>有了 Iterator，我们可以自由地定义数据结构的遍历方式。这一部分的两个关键点，一个是 <code class=\"gatsby-code-text\">[Symbol.iterator]</code> 属性是个函数，包含必须的 <code class=\"gatsby-code-text\">next()</code> 函数，在一个就是新的循环语法 <code class=\"gatsby-code-text\">for...of</code> 。至于文中提到的 Generator，我们会在该系列之后的文章中进行介绍。</p>\n<h2>该系列的其他文章</h2>\n<p>上一篇：<a href=\"/blog/2017/12/20/es6-daily-13-proxy-and-reflect\">每天一点ES6(13)：Proxy 和 Reflect</a></p>\n<p>下一篇：<a href=\"/blog/2018/03/04/es6-daily-15-promise\">每天一点ES6(15)：Promise</a></p>","frontmatter":{"title":"每天一点ES6(14)：Iterator","description":"遍历也能搞出花来，怎么遍历你说了算","cover":{"publicURL":"/static/es6daily-0950334fb8899f1006423341cbfeecb9.jpg"},"tags":["ecmascript","2015","es6","javascript","iterator","generator"],"series":"es6daily","draft":false},"fields":{"id":"es6-daily-14-iterator","date":"2018-02-27T16:00:00.000Z"}}},"pageContext":{"isCreatedByStatefulCreatePages":false,"slug":"/blog/2018/02/28/es6-daily-14-iterator"}}