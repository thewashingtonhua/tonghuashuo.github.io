{"version":3,"sources":["webpack:///./src/pages/about.tsx","webpack:///./src/config/index.ts","webpack:///./src/images/logo.png","webpack:///./src/components/seo.tsx","webpack:///./src/components/header.tsx","webpack:///./src/components/layout.tsx","webpack:///./src/images/about/brain.png","webpack:///./src/images/QR/qr-dark.png"],"names":["START_DATE","Date","About","props","data","_useState","useState","_useState2","Object","_Users_washingtonhua_Projects_me_tonghuashuo_github_io_node_modules_babel_preset_react_app_node_modules_babel_runtime_helpers_esm_slicedToArray__WEBPACK_IMPORTED_MODULE_0__","experience","setExperience","useEffect","daysPassed","getTime","Math","floor","react__WEBPACK_IMPORTED_MODULE_1___default","a","createElement","_components_layout__WEBPACK_IMPORTED_MODULE_2__","_components_seo__WEBPACK_IMPORTED_MODULE_3__","title","keywords","site","siteMetadata","className","id","src","brain","alt","qr","query","__webpack_require__","d","__webpack_exports__","IS_PROD","process","module","exports","p","SEO","_props$description","description","_props$lang","lang","_props$meta","meta","_props$keywords","_props$title","_props$exactTitle","exactTitle","gatsby__WEBPACK_IMPORTED_MODULE_3__","detailsQuery","render","metaDescription","react_helmet__WEBPACK_IMPORTED_MODULE_2___default","htmlAttributes","titleTemplate","concat","name","content","property","author","length","join","_public_static_d_1025518380_json__WEBPACK_IMPORTED_MODULE_0__","menus","to","text","Header","slicedToArray","navMenuOpen","setNavMenuOpen","close","e","stopPropagation","isMenuActive","isMenuActiveProps","isPartiallyCurrent","react_default","Fragment","gatsby_browser_entry","logo","onClick","map","n","key","getProps","Sentry","dsn","Layout","children","components_header","_755544856"],"mappings":"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","file":"component---src-pages-about-tsx-e9abeebe9a4acfdd15a7.js","sourcesContent":["import React, { useEffect, useState } from 'react'\nimport { graphql } from 'gatsby'\nimport Layout from '../components/layout'\nimport SEO from '../components/seo'\nimport './about.scss'\nimport brain from '../images/about/brain.png'\nimport qr from '../images/QR/qr-dark.png'\nimport { GatsbyDataProps } from '../utils/interface'\nimport { useInterval } from '../hooks'\n\nconst START_DATE = new Date('2016-03-01 10:00:00')\nconst DAYS_PER_MONTH = 365 / 12\n\nconst About = (props: GatsbyDataProps) => {\n  const { data } = props\n\n  const [experience, setExperience] = useState(0)\n\n  const updateExperience = () => {\n    const now = new Date()\n    const secondsPassed = (now.getTime() - START_DATE.getTime()) / 1000\n    const daysPassed = secondsPassed / 60 / 60 / 24\n\n    // const year = Math.floor(daysPassed / 365)\n    // const month = Math.floor(daysPassed / DAYS_PER_MONTH % 12)\n    // const day = Math.floor(daysPassed % DAYS_PER_MONTH)\n    // const hour = Math.floor(secondsPassed / 60 / 60 % 24)\n    // const minute = Math.floor(secondsPassed / 60 % 60)\n    // const second = Math.floor(secondsPassed % 60)\n\n    // setExperience(`${year} 年 ${month} 个月 ${day} 天 ${hour} 小时 ${minute} 分钟 ${second} 秒`)\n    // setExperience(`${year} 年 ${month} 个月 ${day} 天`)\n    setExperience(Math.floor(daysPassed))\n  }\n\n  useEffect(() => {\n    updateExperience()\n  }, [])\n\n  // useInterval(updateExperience, 1000)\n\n  return (\n    <Layout>\n      <SEO\n        title='我'\n        keywords={data.site.siteMetadata.keywords}\n      />\n      <div className='mf-content' id='about'>\n        <article>\n\n          <h1>我</h1>\n          <img src={brain} alt='Code in my left brain. Color in my right brain.' />\n          <p>Washington Hua，花名「童话」</p>\n          <p>一个出道 {experience} 天的工程师</p>\n          <p>目前在马老师门下修福报</p>\n          <p>征途是成为「懂设计的全栈工程师」</p>\n\n          <h1>联系方式</h1>\n          <img src={qr} alt='' />\n\n          <h1>为什么写博客</h1>\n          <ul>\n            <li>把“以为懂了”的东西讲给别人听，以此验证是否真的懂了，顺带加深记忆。</li>\n            <li>Review 自己的代码，看有哪些是可以优化的，哪些甚至是解释不通的。</li>\n            <li>锻炼自己的表达能力，让自己懂和让别人懂是两个境界。</li>\n            <li>如果可能的话，为社区贡献一点有价值的内容。</li>\n            <li>装逼这事儿没什么说不出口的。</li>\n          </ul>\n        </article>\n\n      </div>\n    </Layout>\n  )\n}\n\nexport default About\n\nexport const query = graphql`\nquery {\n  site {\n    siteMetadata {\n      title,\n      keywords\n    }\n  }\n}`\n","export const IS_PROD = process.env.NODE_ENV === 'production'\n\nexport const DEBUG_MODE = !IS_PROD\n","module.exports = __webpack_public_path__ + \"static/logo-8503f6989dba3ce27939964a48c8b787.png\";","import React from 'react'\nimport Helmet from 'react-helmet'\nimport { StaticQuery, graphql } from 'gatsby'\n\ninterface SEOProps {\n  description?: string,\n  lang?: string,\n  meta?: { name: string; content: any; property?: undefined; } | { property: string; content: any; name?: undefined; } | ConcatArray<{ name: string; content: any; property?: undefined; } | { property: string; content: any; name?: undefined; }>,\n  keywords?: string[],\n  title?: string,\n  exactTitle?: boolean\n}\n\nconst SEO = (props: SEOProps) => {\n  const { description = '', lang = `zh`, meta = [], keywords = [], title = '', exactTitle = false } = props\n\n  return (\n    <StaticQuery\n      query={detailsQuery}\n      render={data => {\n        const metaDescription = description || data.site.siteMetadata.description\n\n        return (\n          <Helmet\n            htmlAttributes={{\n              lang,\n            }}\n            title={title}\n            titleTemplate={exactTitle ? '' : `%s | ${data.site.siteMetadata.title}`}\n            meta={[\n              {\n                name: `description`,\n                content: metaDescription,\n              },\n              {\n                property: `og:title`,\n                content: title,\n              },\n              {\n                property: `og:description`,\n                content: metaDescription,\n              },\n              {\n                property: `og:type`,\n                content: `website`,\n              },\n              {\n                name: `twitter:card`,\n                content: `summary`,\n              },\n              {\n                name: `twitter:creator`,\n                content: data.site.siteMetadata.author,\n              },\n              {\n                name: `twitter:title`,\n                content: title,\n              },\n              {\n                name: `twitter:description`,\n                content: metaDescription,\n              }\n            ].concat(\n              keywords.length > 0\n                ? {\n                    name: `keywords`,\n                    content: keywords.join(`,`),\n                  }\n                : []\n            )\n            .concat(meta)}\n          />\n        )\n      }}\n    />\n  )\n}\n\nexport default SEO\n\nconst detailsQuery = graphql`\n  query DefaultSEOQuery {\n    site {\n      siteMetadata {\n        title\n        description\n        author\n      }\n    }\n  }\n`\n","import React, { useState, MouseEvent } from 'react'\nimport { Link } from 'gatsby'\nimport logo from '../images/logo.png'\nimport './header.scss'\nimport { LinkGetProps } from '@reach/router';\n\nconst menus = [\n  { to: '/blog', text: '博客' },\n  { to: '/project', text: '代表作' },\n  { to: '/lab', text: '实验室' },\n  { to: '/friend', text: '朋友' },\n  { to: '/about', text: '我' }\n]\n\nconst Header = () => {\n\n  const [navMenuOpen, setNavMenuOpen] = useState(false)\n\n  function toggle (e: MouseEvent) {\n    e && e.stopPropagation()\n    setNavMenuOpen(!navMenuOpen)\n  }\n\n  function close (e: MouseEvent) {\n    e && e.stopPropagation()\n    setNavMenuOpen(false)\n  }\n\n  function isMenuActive (isMenuActiveProps: LinkGetProps) {\n    const { isPartiallyCurrent } = isMenuActiveProps\n    return isPartiallyCurrent\n      ? { className: 'menu-link active' }\n      : { className: 'menu-link' }\n  }\n\n  return (\n    <>\n      <header id='mf-header'>\n        <div className='mf-header-wrapper'>\n          <Link to='/' className='logo'>\n            <img src={logo} alt=''/>\n            <span>童话说</span>\n          </Link>\n          <div className={'hamberger' + (navMenuOpen ? ' open' : '')} onClick={toggle}>\n            <div className='bar' />\n            <div className='bar' />\n            <div className='bar' />\n          </div>\n          <nav className={'nav-menu' + (navMenuOpen ? ' open' : '')}>\n            <ul className='menus'>\n              { menus.map(n => (\n                <li className='menu' key={n.to}>\n                  <Link\n                    to={n.to}\n                    getProps={isMenuActive}\n                    onClick={close}\n                  >{n.text}</Link>\n                </li>\n              ))}\n            </ul>\n          </nav>\n        </div>\n      </header>\n      <section id='mf-header-placeholder' />\n    </>\n  )\n}\n\nexport default Header\n","import React, { ReactNode } from 'react'\nimport PropTypes from 'prop-types'\nimport { StaticQuery, graphql } from 'gatsby'\nimport * as Sentry from '@sentry/browser'\nimport 'normalize-scss/sass/normalize/_import-now.scss'\nimport './layout.scss'\nimport Header from './header'\nimport { IS_PROD } from 'config';\n\nif (IS_PROD) {\n  Sentry.init({\n    dsn: 'https://9638de4372be4acebf892d0732a86a4a@sentry.io/1450204'\n  })\n}\n\ninterface LayoutProps {\n  children?: ReactNode\n}\n\nconst Layout = (props: LayoutProps) => {\n  const { children } = props\n\n  return <StaticQuery\n    query={graphql`\n      query SiteTitleQuery {\n        site {\n          siteMetadata {\n            title\n          }\n        }\n      }\n    `}\n    render={data => (\n      <>\n        <Header />\n        <main>\n          {children}\n        </main>\n      </>\n    )}\n  />\n}\n\nexport default Layout\n","module.exports = __webpack_public_path__ + \"static/brain-7dc10532e2058d66744cd1398811518d.png\";","module.exports = __webpack_public_path__ + \"static/qr-dark-7e7d253a0f4b7fc17fd963da3065f132.png\";"],"sourceRoot":""}