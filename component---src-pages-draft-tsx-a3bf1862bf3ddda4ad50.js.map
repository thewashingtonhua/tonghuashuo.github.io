{"version":3,"sources":["webpack:///./src/pages/draft.tsx","webpack:///./src/hooks/useBlogViewMode.ts"],"names":["BlogDraftPage","props","data","drafts","allMarkdownRemark","edges","map","n","node","filter","fields","type","NodeType","blog","frontmatter","draft","sort","x","y","date","Date","getTime","useBlogViewMode","viewMode","setViewMode","title","keywords","site","siteMetadata","className","IS_DEV","onViewModeChange","blogs","BlogCatalogViewMode","normal","archive","renderView","query","cachedviewModel","hasWindow","window","localStorage","getItem","initViewMode","useState","useEffect","setItem"],"mappings":"kHAAA,kIA0DeA,UA5B4B,SAACC,GAAU,IAC5CC,EAASD,EAATC,KACFC,EAASD,EAAKE,kBAAkBC,MACnCC,KAAI,SAAAC,GAAC,OAAIA,EAAEC,QACXC,QAAO,SAAAD,GAAI,OAAIA,EAAKE,OAAOC,OAASC,IAASC,MAAQL,EAAKM,YAAYC,SACtEC,MAAK,SAACC,EAAGC,GACR,OAAID,EAAEP,OAAOS,OAASD,EAAER,OAAOS,MAAc,EACtC,IAAIC,KAAKH,EAAEP,OAAOS,MAAME,UAAY,IAAID,KAAKF,EAAER,OAAOS,MAAME,aAPnB,EAUlBC,cAA1BC,EAV4C,EAU5CA,SAAUC,EAVkC,EAUlCA,YAElB,OACE,kBAAC,IAAD,KACE,kBAAC,IAAD,CACEC,MAAM,KACNC,SAAUxB,EAAKyB,KAAKC,aAAaF,WAEnC,yBAAKG,UAAU,2BACXC,KACA,kBAAC,IAAD,CAASP,SAAUA,EAAUQ,iBAAkBP,IA/BtC,SAACD,EAA+BS,GACjD,OAAQT,GACN,KAAKU,IAAoBC,OACvB,OAAO,kBAAC,IAAD,CAAuBF,MAAOA,IACvC,KAAKC,IAAoBE,QACvB,OAAO,kBAAC,IAAD,CAAwBH,MAAOA,IACxC,QACE,OAAO,MA0BHI,CAAWb,EAAUpB,MAQxB,IAAMkC,EAAQ,c,wHCxDRf,EAAkB,WAC7B,IAAMgB,EAAkBC,cACpBC,OAAOC,aAAaC,QAAQ,kBAC5B,KACEC,EAAeL,GAAmBL,IAAoBC,OAJzB,EAKHU,mBAA8BD,GAL3B,mBAK5BpB,EAL4B,KAKlBC,EALkB,KAenC,OARAqB,qBAAU,WACJtB,IAAae,GACXC,eACFC,OAAOC,aAAaK,QAAQ,iBAAkBvB,KAGjD,CAACA,IAEG,CAAEA,WAAUC","file":"component---src-pages-draft-tsx-a3bf1862bf3ddda4ad50.js","sourcesContent":["import React, { FC } from 'react'\nimport { graphql } from 'gatsby'\nimport {\n  Layout,\n  SEO,\n  BlogCatelogNormalView,\n  BlogCatelogArchiveView,\n  Toolbar,\n  BlogCatalogViewMode\n} from '../components'\nimport './blog.scss'\nimport { GatsbyDataProps, BlogNode, NodeType } from '../utils/interface'\nimport { useBlogViewMode } from 'hooks'\nimport { IS_DEV } from 'config'\n\nconst BottomLine: FC<{ text: string }> = (props) => (\n  <div className='bottom-line'><span>{props.text}</span></div>\n)\n\nconst renderView = (viewMode: BlogCatalogViewMode, blogs: BlogNode[]) => {\n  switch (viewMode) {\n    case BlogCatalogViewMode.normal:\n      return <BlogCatelogNormalView blogs={blogs} />\n    case BlogCatalogViewMode.archive:\n      return <BlogCatelogArchiveView blogs={blogs} />\n    default:\n      return null\n  }\n}\n\nconst BlogDraftPage: FC<GatsbyDataProps> = (props) => {\n  const { data } = props\n  const drafts = data.allMarkdownRemark.edges\n    .map(n => n.node as BlogNode)\n    .filter(node => node.fields.type === NodeType.blog && node.frontmatter.draft)\n    .sort((x, y) => {\n      if (x.fields.date && !y.fields.date) return -1\n      return new Date(x.fields.date).getTime() - new Date(y.fields.date).getTime()\n    })\n\n  const { viewMode, setViewMode } = useBlogViewMode()\n\n  return (\n    <Layout>\n      <SEO\n        title='草稿'\n        keywords={data.site.siteMetadata.keywords}\n      />\n      <div className='mf-content blog-catalog'>\n        { IS_DEV &&\n          <Toolbar viewMode={viewMode} onViewModeChange={setViewMode} />\n        }\n        { renderView(viewMode, drafts) }\n      </div>\n    </Layout>\n  )\n}\n\nexport default BlogDraftPage\n\nexport const query = graphql`\nquery {\n  site {\n    siteMetadata {\n      title,\n      keywords\n    }\n  }\n  allMarkdownRemark {\n    totalCount\n    edges {\n      node {\n        id\n        frontmatter {\n          title\n          description\n          tags\n          cover {\n            publicURL\n          }\n          series\n          draft\n          original\n        }\n        fields {\n          id\n          slug\n          type\n          date\n        }\n      }\n    }\n  }\n}`\n","import { useState, useEffect } from 'react'\nimport { BlogCatalogViewMode } from '../components'\nimport { hasWindow } from 'utils'\n\nexport const useBlogViewMode = () => {\n  const cachedviewModel = hasWindow()\n    ? window.localStorage.getItem('blog-view-mode') as BlogCatalogViewMode\n    : null\n  const initViewMode = cachedviewModel || BlogCatalogViewMode.normal\n  const [viewMode, setViewMode] = useState<BlogCatalogViewMode>(initViewMode)\n\n  useEffect(() => {\n    if (viewMode !== cachedviewModel) {\n      if (hasWindow()) {\n        window.localStorage.setItem('blog-view-mode', viewMode)\n      }\n    }\n  }, [viewMode])\n\n  return { viewMode, setViewMode }\n}\n"],"sourceRoot":""}