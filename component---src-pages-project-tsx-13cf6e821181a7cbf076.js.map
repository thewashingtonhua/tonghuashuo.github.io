{"version":3,"sources":["webpack:///./src/pages/project.tsx","webpack:///./src/config/index.ts","webpack:///./src/images/logo.png","webpack:///./src/components/seo.tsx","webpack:///./src/components/header.tsx","webpack:///./src/components/layout.tsx"],"names":["__webpack_require__","r","__webpack_exports__","d","query","react__WEBPACK_IMPORTED_MODULE_0__","react__WEBPACK_IMPORTED_MODULE_0___default","n","gatsby__WEBPACK_IMPORTED_MODULE_1__","_components_layout__WEBPACK_IMPORTED_MODULE_2__","_components_seo__WEBPACK_IMPORTED_MODULE_3__","config__WEBPACK_IMPORTED_MODULE_5__","props","data","projects","allMarkdownRemark","edges","map","node","filter","fields","type","IS_PROD","frontmatter","draft","sort","x","y","Date","from","getTime","personalProjects","category","commercialProjects","visibleProjects","length","push","title","totalCount","reduce","a","createElement","keywords","site","siteMetadata","className","item","key","cover","publicURL","to","slug","id","src","alt","description","process","module","exports","p","SEO","_props$description","_props$lang","lang","_props$meta","meta","_props$keywords","_props$title","_props$exactTitle","exactTitle","react__WEBPACK_IMPORTED_MODULE_1___default","gatsby__WEBPACK_IMPORTED_MODULE_3__","detailsQuery","render","metaDescription","react_helmet__WEBPACK_IMPORTED_MODULE_2___default","htmlAttributes","titleTemplate","concat","name","content","property","author","join","_public_static_d_1025518380_json__WEBPACK_IMPORTED_MODULE_0__","menus","text","Header","_useState","useState","_useState2","Object","slicedToArray","navMenuOpen","setNavMenuOpen","close","e","stopPropagation","isMenuActive","isMenuActiveProps","isPartiallyCurrent","react_default","Fragment","gatsby_browser_entry","logo","onClick","getProps","Sentry","dsn","Layout","children","components_header","_755544856"],"mappings":"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","file":"component---src-pages-project-tsx-13cf6e821181a7cbf076.js","sourcesContent":["import React, { Fragment } from 'react'\nimport { Link, graphql } from 'gatsby'\nimport Layout from '../components/layout'\nimport SEO from '../components/seo'\nimport './project.scss'\nimport { GatsbyDataProps } from '../utils/interface'\nimport { IS_PROD } from 'config';\n\nexport default (props: GatsbyDataProps) => {\n  const { data } = props\n  const nodes = data.allMarkdownRemark.edges.map(n => n.node)\n  const projects = nodes\n    .filter(node => node.fields.type === 'project')\n    .filter(node => !IS_PROD || !node.frontmatter.draft)\n    .sort((x, y) => new Date(y.frontmatter.from).getTime() - new Date(x.frontmatter.from).getTime())\n\n  const personalProjects = projects.filter(node => node.frontmatter.category === 'personal')\n  const commercialProjects = projects.filter(node => node.frontmatter.category === 'commercial')\n\n  const visibleProjects = []\n  if (personalProjects.length) {\n    visibleProjects.push({ title: '个人作品', data: personalProjects })\n  }\n  if (commercialProjects.length) {\n    visibleProjects.push({ title: '商业作品', data: commercialProjects })\n  }\n\n  const totalCount = visibleProjects.map(n => n.data.length).reduce((x, y) => x + y, 0)\n\n  return (\n    <Layout>\n      <SEO\n        title='代表作'\n        keywords={data.site.siteMetadata.keywords}\n      />\n      <div className='mf-content project-catalog'>\n        <h1 className='title'>代表作 ({totalCount})</h1>\n        { visibleProjects.map(item =>\n          <Fragment key={item.title}>\n            <h2 className='project-category-title'>{item.title} ({item.data.length})</h2>\n            <div className='project-list'>\n              { item.data.map(node => {\n                const cover = node.frontmatter.cover\n                  ? node.frontmatter.cover.publicURL\n                  : ''\n                return (\n                  <Link className={'project' + (node.frontmatter.draft ? ' draft' : '')} to={node.fields.slug} key={node.fields.slug} id={node.fields.id}>\n                    <div className='cover'>\n                      <img src={cover} alt='' />\n                    </div>\n                    <div className='intro'>\n                      <h2>{node.frontmatter.title}</h2>\n                      <p>{node.frontmatter.description}</p>\n                    </div>\n                  </Link>\n                )\n              })}\n            </div>\n          </Fragment>\n        )}\n      </div>\n    </Layout>\n  )\n}\n\nexport const query = graphql`\nquery {\n  site {\n    siteMetadata {\n      title,\n      keywords\n    }\n  }\n  allMarkdownRemark(sort: { fields: [frontmatter___from], order: DESC }) {\n    totalCount\n    edges {\n      node {\n        id\n        frontmatter {\n          title\n          description\n          cover {\n            publicURL\n          }\n          from\n          to\n          draft\n          category\n        }\n        fields {\n          id\n          slug\n          type\n        }\n      }\n    }\n  }\n}`\n","export const IS_PROD = process.env.NODE_ENV === 'production'\n\nexport const DEBUG_MODE = !IS_PROD\n","module.exports = __webpack_public_path__ + \"static/logo-8503f6989dba3ce27939964a48c8b787.png\";","import React from 'react'\nimport Helmet from 'react-helmet'\nimport { StaticQuery, graphql } from 'gatsby'\n\ninterface SEOProps {\n  description?: string,\n  lang?: string,\n  meta?: { name: string; content: any; property?: undefined; } | { property: string; content: any; name?: undefined; } | ConcatArray<{ name: string; content: any; property?: undefined; } | { property: string; content: any; name?: undefined; }>,\n  keywords?: string[],\n  title?: string,\n  exactTitle?: boolean\n}\n\nconst SEO = (props: SEOProps) => {\n  const { description = '', lang = `zh`, meta = [], keywords = [], title = '', exactTitle = false } = props\n\n  return (\n    <StaticQuery\n      query={detailsQuery}\n      render={data => {\n        const metaDescription = description || data.site.siteMetadata.description\n\n        return (\n          <Helmet\n            htmlAttributes={{\n              lang,\n            }}\n            title={title}\n            titleTemplate={exactTitle ? '' : `%s | ${data.site.siteMetadata.title}`}\n            meta={[\n              {\n                name: `description`,\n                content: metaDescription,\n              },\n              {\n                property: `og:title`,\n                content: title,\n              },\n              {\n                property: `og:description`,\n                content: metaDescription,\n              },\n              {\n                property: `og:type`,\n                content: `website`,\n              },\n              {\n                name: `twitter:card`,\n                content: `summary`,\n              },\n              {\n                name: `twitter:creator`,\n                content: data.site.siteMetadata.author,\n              },\n              {\n                name: `twitter:title`,\n                content: title,\n              },\n              {\n                name: `twitter:description`,\n                content: metaDescription,\n              }\n            ].concat(\n              keywords.length > 0\n                ? {\n                    name: `keywords`,\n                    content: keywords.join(`,`),\n                  }\n                : []\n            )\n            .concat(meta)}\n          />\n        )\n      }}\n    />\n  )\n}\n\nexport default SEO\n\nconst detailsQuery = graphql`\n  query DefaultSEOQuery {\n    site {\n      siteMetadata {\n        title\n        description\n        author\n      }\n    }\n  }\n`\n","import React, { useState, MouseEvent } from 'react'\nimport { Link } from 'gatsby'\nimport logo from '../images/logo.png'\nimport './header.scss'\nimport { LinkGetProps } from '@reach/router';\n\nconst menus = [\n  { to: '/blog', text: '博客' },\n  { to: '/project', text: '代表作' },\n  { to: '/lab', text: '实验室' },\n  { to: '/friend', text: '朋友' },\n  { to: '/about', text: '我' }\n]\n\nconst Header = () => {\n\n  const [navMenuOpen, setNavMenuOpen] = useState(false)\n\n  function toggle (e: MouseEvent) {\n    e && e.stopPropagation()\n    setNavMenuOpen(!navMenuOpen)\n  }\n\n  function close (e: MouseEvent) {\n    e && e.stopPropagation()\n    setNavMenuOpen(false)\n  }\n\n  function isMenuActive (isMenuActiveProps: LinkGetProps) {\n    const { isPartiallyCurrent } = isMenuActiveProps\n    return isPartiallyCurrent\n      ? { className: 'menu-link active' }\n      : { className: 'menu-link' }\n  }\n\n  return (\n    <>\n      <header id='mf-header'>\n        <div className='mf-header-wrapper'>\n          <Link to='/' className='logo'>\n            <img src={logo} alt=''/>\n            <span>童话说</span>\n          </Link>\n          <div className={'hamberger' + (navMenuOpen ? ' open' : '')} onClick={toggle}>\n            <div className='bar' />\n            <div className='bar' />\n            <div className='bar' />\n          </div>\n          <nav className={'nav-menu' + (navMenuOpen ? ' open' : '')}>\n            <ul className='menus'>\n              { menus.map(n => (\n                <li className='menu' key={n.to}>\n                  <Link\n                    to={n.to}\n                    getProps={isMenuActive}\n                    onClick={close}\n                  >{n.text}</Link>\n                </li>\n              ))}\n            </ul>\n          </nav>\n        </div>\n      </header>\n      <section id='mf-header-placeholder' />\n    </>\n  )\n}\n\nexport default Header\n","import React, { ReactNode } from 'react'\nimport PropTypes from 'prop-types'\nimport { StaticQuery, graphql } from 'gatsby'\nimport * as Sentry from '@sentry/browser'\nimport 'normalize-scss/sass/normalize/_import-now.scss'\nimport './layout.scss'\nimport Header from './header'\nimport { IS_PROD } from 'config';\n\nif (IS_PROD) {\n  Sentry.init({\n    dsn: 'https://9638de4372be4acebf892d0732a86a4a@sentry.io/1450204'\n  })\n}\n\ninterface LayoutProps {\n  children?: ReactNode\n}\n\nconst Layout = (props: LayoutProps) => {\n  const { children } = props\n\n  return <StaticQuery\n    query={graphql`\n      query SiteTitleQuery {\n        site {\n          siteMetadata {\n            title\n          }\n        }\n      }\n    `}\n    render={data => (\n      <>\n        <Header />\n        <main>\n          {children}\n        </main>\n      </>\n    )}\n  />\n}\n\nexport default Layout\n"],"sourceRoot":""}