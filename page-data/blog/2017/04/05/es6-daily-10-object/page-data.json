{"componentChunkName":"component---src-templates-blog-post-tsx","path":"/blog/2017/04/05/es6-daily-10-object","webpackCompilationHash":"e56705357a6d6b2f84a9","result":{"data":{"site":{"siteMetadata":{"title":"童话说","keywords":["tonghuashuo","github","front-end","javascript","typescript","react","node","washington","hua","童话","童话说","前端","博客","技术","计算机","互联网"]}},"markdownRemark":{"html":"<h2>迟来的更新</h2>\n<p>想来这个系列上一次更新还是去年年底的时候……真心对不起日更的标题，这个 Flag 立大了……虽然时至今日 ES6 已经不再新鲜，不过自己挖的坑说什么也得填完，这一篇咱继续对象的扩展。</p>\n<p>ES5 给对象加入了大量实用的方法，用于创建、枚举、封闭一个对象，ES6 在此基础上进一步完善。</p>\n<h2>属性简写</h2>\n<p>ES6 允许在对象之中直接使用单个变量来代表属性键值对，变量名就是属性名，变量值就是属性值。</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre style=\"counter-reset: linenumber NaN\" class=\"gatsby-code-js line-numbers\"><code class=\"gatsby-code-js\"><span class=\"token keyword\">const</span> foo <span class=\"token operator\">=</span> <span class=\"token string\">'bar'</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">const</span> baz <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>foo<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\nbaz <span class=\"token comment\">// {foo: 'bar'}</span>\n\n<span class=\"token comment\">// 该规则同样适用于函数返回</span>\n<span class=\"token keyword\">function</span> <span class=\"token function\">f</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">x<span class=\"token punctuation\">,</span> y</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">{</span>x<span class=\"token punctuation\">,</span> y<span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token function\">f</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// {x:1, y:2}</span>\n\n<span class=\"token comment\">// 这非常适合用于在 CommonJS 中导出变量</span>\nmodule<span class=\"token punctuation\">.</span>exports <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>f1<span class=\"token punctuation\">,</span> f2<span class=\"token punctuation\">,</span> f3<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span></code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n<p>函数作为属性时也可以省略 <code class=\"gatsby-code-text\">function</code> 关键字，如同在 ES6 的 class 中的写法一样：</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre style=\"counter-reset: linenumber NaN\" class=\"gatsby-code-js line-numbers\"><code class=\"gatsby-code-js\"><span class=\"token keyword\">var</span> o <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token function\">method</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> <span class=\"token string\">'hello'</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n<p>简写的属性名始终被当做字符串看待，不用避讳语言本身的关键字，因此完全可以定义一个方法叫 <code class=\"gatsby-code-text\">class() {}</code> 。</p>\n<h2>属性名表达式</h2>\n<p>ES6 允许在使用字面量定义对象时使用表达式来作为属性名，表达式用方括号包裹：</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre style=\"counter-reset: linenumber NaN\" class=\"gatsby-code-js line-numbers\"><code class=\"gatsby-code-js\"><span class=\"token keyword\">let</span> propKey <span class=\"token operator\">=</span> <span class=\"token string\">'foo'</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">let</span> obj <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token punctuation\">[</span>propKey<span class=\"token punctuation\">]</span><span class=\"token punctuation\">:</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">[</span><span class=\"token string\">'a'</span> <span class=\"token operator\">+</span> <span class=\"token string\">'b'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">:</span> <span class=\"token number\">123</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// obj {foo: true, ab: 123}</span></code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n<p>但这种写法不能和属性简写一起用，否则会报错。（表达式的值就是属性名，属性值无从取得，逻辑上走不通）</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre style=\"counter-reset: linenumber NaN\" class=\"gatsby-code-js line-numbers\"><code class=\"gatsby-code-js\"><span class=\"token keyword\">var</span> foo <span class=\"token operator\">=</span> <span class=\"token string\">'bar'</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">var</span> baz <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span> <span class=\"token punctuation\">[</span>foo<span class=\"token punctuation\">]</span> <span class=\"token punctuation\">}</span>         <span class=\"token comment\">// 报错</span>\n<span class=\"token keyword\">var</span> baz <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span> <span class=\"token punctuation\">[</span>foo<span class=\"token punctuation\">]</span><span class=\"token punctuation\">:</span> <span class=\"token string\">'abc'</span> <span class=\"token punctuation\">}</span>  <span class=\"token comment\">// 正确</span></code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span><span></span></span></pre></div>\n<p>属性名表达式如果是一个对象，那么默认会转为字符串 <code class=\"gatsby-code-text\">[object Object]</code> ，需要留意。</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre style=\"counter-reset: linenumber NaN\" class=\"gatsby-code-js line-numbers\"><code class=\"gatsby-code-js\"><span class=\"token keyword\">const</span> keyA <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>a<span class=\"token punctuation\">:</span> <span class=\"token number\">1</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">const</span> keyB <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>b<span class=\"token punctuation\">:</span> <span class=\"token number\">2</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">const</span> myObject <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token punctuation\">[</span>keyA<span class=\"token punctuation\">]</span><span class=\"token punctuation\">:</span> <span class=\"token string\">'valueA'</span><span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">[</span>keyB<span class=\"token punctuation\">]</span><span class=\"token punctuation\">:</span> <span class=\"token string\">'valueB'</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// Object {[object Object]: \"valueB\"}</span>\n<span class=\"token comment\">// [keyA]、[keyB]都解析为[object Object]，后者将前者覆盖</span></code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n<h2>方法的name属性</h2>\n<p>函数的 <code class=\"gatsby-code-text\">name</code> 属性返回函数名。</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre style=\"counter-reset: linenumber NaN\" class=\"gatsby-code-js line-numbers\"><code class=\"gatsby-code-js\"><span class=\"token keyword\">const</span> person <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token function\">sayName</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'hello!'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\nperson<span class=\"token punctuation\">.</span>sayName<span class=\"token punctuation\">.</span>name   <span class=\"token comment\">// \"sayName\"</span>\n\n<span class=\"token comment\">// 匿名函数返回空字符串</span>\n<span class=\"token punctuation\">(</span><span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>name <span class=\"token comment\">// \"\"</span>\n<span class=\"token comment\">// Function 构造函数创建的返回anonymous</span>\n<span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">Function</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>name <span class=\"token comment\">// anonymous</span>\n\n<span class=\"token comment\">// 用函数表达式构造的函数，优先使用等号右边的函数的名称，如果是匿名函数则返回左边的变量名</span>\n<span class=\"token keyword\">var</span> <span class=\"token function-variable function\">v</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span>\nv<span class=\"token punctuation\">.</span>name <span class=\"token comment\">// \"v\"</span>\n<span class=\"token keyword\">var</span> <span class=\"token function-variable function\">v</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span> <span class=\"token function\">f</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span>\nv<span class=\"token punctuation\">.</span>name <span class=\"token comment\">// \"f\"</span>\n\n<span class=\"token comment\">// 通过bind方法创建的函数，name前面会加上bound字样</span>\n<span class=\"token keyword\">var</span> <span class=\"token function-variable function\">doSomething</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token comment\">// ...</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n<span class=\"token function\">doSomething</span><span class=\"token punctuation\">.</span><span class=\"token function\">bind</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>name <span class=\"token comment\">// \"bound doSomething\"</span></code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n<p>特别的，对于使用了 getter 和 setter 的方法，直接访问 <code class=\"gatsby-code-text\">name</code> 会得到 <code class=\"gatsby-code-text\">undefined</code> ，需要在获得属性描述之后再进一步访问一下 <code class=\"gatsby-code-text\">get</code> / <code class=\"gatsby-code-text\">set</code> 才能访问到 <code class=\"gatsby-code-text\">name</code> 。</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre style=\"counter-reset: linenumber NaN\" class=\"gatsby-code-js line-numbers\"><code class=\"gatsby-code-js\"><span class=\"token keyword\">const</span> obj <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">get</span> <span class=\"token function\">foo</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n  <span class=\"token keyword\">set</span> <span class=\"token function\">foo</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">x</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\nobj<span class=\"token punctuation\">.</span>foo<span class=\"token punctuation\">.</span>name\n<span class=\"token comment\">// TypeError: Cannot read property 'name' of undefined</span>\n\n<span class=\"token keyword\">const</span> descriptor <span class=\"token operator\">=</span> Object<span class=\"token punctuation\">.</span><span class=\"token function\">getOwnPropertyDescriptor</span><span class=\"token punctuation\">(</span>obj<span class=\"token punctuation\">,</span> <span class=\"token string\">'foo'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\ndescriptor<span class=\"token punctuation\">.</span>get<span class=\"token punctuation\">.</span>name <span class=\"token comment\">// \"get foo\"</span>\ndescriptor<span class=\"token punctuation\">.</span>set<span class=\"token punctuation\">.</span>name <span class=\"token comment\">// \"set foo\"</span></code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n<p>如果对象的方法是一个 Symbol 值，那么name属性返回的是这个 Symbol 值的描述。</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre style=\"counter-reset: linenumber NaN\" class=\"gatsby-code-js line-numbers\"><code class=\"gatsby-code-js\"><span class=\"token keyword\">const</span> key1 <span class=\"token operator\">=</span> <span class=\"token function\">Symbol</span><span class=\"token punctuation\">(</span><span class=\"token string\">'description'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">const</span> key2 <span class=\"token operator\">=</span> <span class=\"token function\">Symbol</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">let</span> obj <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token punctuation\">[</span>key1<span class=\"token punctuation\">]</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">[</span>key2<span class=\"token punctuation\">]</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\nobj<span class=\"token punctuation\">[</span>key1<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>name <span class=\"token comment\">// \"[description]\"</span>\nobj<span class=\"token punctuation\">[</span>key2<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>name <span class=\"token comment\">// \"\"，key2没有描述，所以为空</span></code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n<h2>Object.is()</h2>\n<p>ES6 引入了一种“同值相等”比较，作为“==”和“===”的补充。使用“==”时会自动转换类型，使用“===”时NaN不等于自身，+0和-0相等，而 <code class=\"gatsby-code-text\">Object.is()</code> 只要两边的值相等就相等。大部分情况下 <code class=\"gatsby-code-text\">Object.is()</code> 和===等效，但对于两种特殊情况的处理是相反的。</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre style=\"counter-reset: linenumber NaN\" class=\"gatsby-code-js line-numbers\"><code class=\"gatsby-code-js\">Object<span class=\"token punctuation\">.</span><span class=\"token function\">is</span><span class=\"token punctuation\">(</span><span class=\"token string\">'foo'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'foo'</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// true，字符串值相同</span>\nObject<span class=\"token punctuation\">.</span><span class=\"token function\">is</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// false，对象是引用，两个不同的引用不等值</span>\n\nObject<span class=\"token punctuation\">.</span><span class=\"token function\">is</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'1'</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// false，不会自动转换，数字和字符串不等</span>\nObject<span class=\"token punctuation\">.</span><span class=\"token function\">is</span><span class=\"token punctuation\">(</span><span class=\"token operator\">+</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token operator\">-</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// false，区分正负</span>\n\nObject<span class=\"token punctuation\">.</span><span class=\"token function\">is</span><span class=\"token punctuation\">(</span><span class=\"token number\">NaN</span><span class=\"token punctuation\">,</span> <span class=\"token number\">NaN</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// true，NaN 不等于 NaN 本来就不合理</span></code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n<h2>Object.assign()</h2>\n<p>用于合并两个对象，依参数列表顺序右边覆盖左边。此前要么开发者自行实现 <code class=\"gatsby-code-text\">extend()</code> 函数，或者用一些类库封装的 <code class=\"gatsby-code-text\">extend</code> （例如：jQuery 的 <code class=\"gatsby-code-text\">$.extend()</code> ）。常用于插件开发中的自定义参数覆盖默认参数。</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre style=\"counter-reset: linenumber NaN\" class=\"gatsby-code-js line-numbers\"><code class=\"gatsby-code-js\"><span class=\"token keyword\">const</span> opt1 <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>x<span class=\"token punctuation\">:</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> y<span class=\"token punctuation\">:</span><span class=\"token number\">2</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">const</span> opt2 <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>x<span class=\"token punctuation\">:</span><span class=\"token number\">3</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">const</span> opt <span class=\"token operator\">=</span> Object<span class=\"token punctuation\">.</span><span class=\"token function\">assign</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> opt1<span class=\"token punctuation\">,</span> opt2<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// {x:3, y:2}</span></code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span></span></pre></div>\n<p>如果参数只有一项的话，函数会直接返回参数，非对象参数会自动转换成对象。但有一些特殊情况：</p>\n<ul>\n<li>如果 <code class=\"gatsby-code-text\">undefined</code> 或 <code class=\"gatsby-code-text\">null</code> 作为第一个参数则会报错，在之后则会跳过（无法转成对象的都会被跳过）</li>\n<li>数值、布尔值可以被转换成包装对象，但依然会被忽略，因为它们的原始值在包装对象的 <code class=\"gatsby-code-text\">[[PrimitiveValue]]</code> 属性上，而该属性是不可枚举的，因此等效于空对象</li>\n<li>字符串转对象会被拆分成数组，除了原始值会被拷贝到 <code class=\"gatsby-code-text\">[[PrimitiveValue]]</code> 属性中，每个字符都是可枚举的实义属性，因此是有效的。</li>\n</ul>\n<p><code class=\"gatsby-code-text\">Object.assign()</code> 只拷贝对象的自有属性，属性名为 Symbol 的属性也会被拷贝，继承属性和不可枚举的属性不会被拷贝。</p>\n<p><code class=\"gatsby-code-text\">Object.assign()</code> 执行的是浅拷贝，对于同名属性会直接覆盖而非合并。</p>\n<p><code class=\"gatsby-code-text\">Object.assign()</code> 可以用于处理数组，但会把数组转换成属性名为 0、1、2……的对象，并依次替换。</p>\n<h2>Object.keys()、Object.values()、Object.entries()</h2>\n<p>ES5 引入了  <code class=\"gatsby-code-text\">Object.keys()</code> 来返回一个数组，其成员是参数对象的可枚举的自有属性的键名，ES2017 跟着引入了 <code class=\"gatsby-code-text\">Object.values()</code> 和 <code class=\"gatsby-code-text\">Object.entries()</code> 用于返回属性对应的值，以及以键值对数组的形式返回。可以配合 <code class=\"gatsby-code-text\">for...of</code> 循环使用。</p>\n<h2>Object.getOwnPropertyDescriptors()</h2>\n<p>ES5 中有个 <code class=\"gatsby-code-text\">Object.getOwnPropertyDescriptor()</code> 函数用于返回某个对象属性的描述对象（值、是否可修改、可枚举、可配置），ES2017 新增了一个更全面的函数（函数名后面加了个 s），可以直接作用于对象，返回该对象所有自有属性（非继承属性）的描述对象。原理上其实非常简单，就是对对象的所有自有属性循环调用 <code class=\"gatsby-code-text\">Object.getOwnPropertyDescriptor()</code> ，然后返回一个集合。</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre style=\"counter-reset: linenumber NaN\" class=\"gatsby-code-js line-numbers\"><code class=\"gatsby-code-js\"><span class=\"token comment\">// ES5</span>\n<span class=\"token keyword\">var</span> obj <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span> p<span class=\"token punctuation\">:</span> <span class=\"token string\">'a'</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\nObject<span class=\"token punctuation\">.</span><span class=\"token function\">getOwnPropertyDescriptor</span><span class=\"token punctuation\">(</span>obj<span class=\"token punctuation\">,</span> <span class=\"token string\">'p'</span><span class=\"token punctuation\">)</span>\n<span class=\"token comment\">// Object {</span>\n<span class=\"token comment\">//   value: \"a\",</span>\n<span class=\"token comment\">//   writable: true,</span>\n<span class=\"token comment\">//   enumerable: true,</span>\n<span class=\"token comment\">//   configurable: true</span>\n<span class=\"token comment\">// }</span>\n\n<span class=\"token comment\">// ES2017</span>\n<span class=\"token keyword\">const</span> obj <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n  foo<span class=\"token punctuation\">:</span> <span class=\"token number\">123</span><span class=\"token punctuation\">,</span>\n  <span class=\"token keyword\">get</span> <span class=\"token function\">bar</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span> <span class=\"token keyword\">return</span> <span class=\"token string\">'abc'</span> <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\nObject<span class=\"token punctuation\">.</span><span class=\"token function\">getOwnPropertyDescriptors</span><span class=\"token punctuation\">(</span>obj<span class=\"token punctuation\">)</span>\n<span class=\"token comment\">// {</span>\n<span class=\"token comment\">//   foo: {</span>\n<span class=\"token comment\">//     value: 123,</span>\n<span class=\"token comment\">//     writable: true,</span>\n<span class=\"token comment\">//     enumerable: true,</span>\n<span class=\"token comment\">//     configurable: true</span>\n<span class=\"token comment\">//   },</span>\n<span class=\"token comment\">//   bar: {</span>\n<span class=\"token comment\">//     get: [Function: bar],</span>\n<span class=\"token comment\">//     set: undefined,</span>\n<span class=\"token comment\">//     enumerable: true,</span>\n<span class=\"token comment\">//     configurable: true</span>\n<span class=\"token comment\">//   }</span>\n<span class=\"token comment\">// }</span></code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n<p>新函数存在的主要意义，是为了解决 <code class=\"gatsby-code-text\">Object.assign()</code> 无法正确拷贝 getter 和 setter 的问题。</p>\n<p> <code class=\"gatsby-code-text\">Object.assign()</code> 在拷贝对象属性时只拷贝它的值，getter 或者 setter 属性没有 value 描述，因此访问会得到 <code class=\"gatsby-code-text\">undefined</code> 。使用 <code class=\"gatsby-code-text\">Object.getOwnPropertyDescriptors()</code> 配合 <code class=\"gatsby-code-text\">Object.defineProperties</code> 可以实现正确拷贝。</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre style=\"counter-reset: linenumber NaN\" class=\"gatsby-code-js line-numbers\"><code class=\"gatsby-code-js\"><span class=\"token keyword\">const</span> source <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">set</span> <span class=\"token function\">foo</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">value</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>value<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">const</span> target <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\nObject<span class=\"token punctuation\">.</span><span class=\"token function\">defineProperties</span><span class=\"token punctuation\">(</span>target<span class=\"token punctuation\">,</span> Object<span class=\"token punctuation\">.</span><span class=\"token function\">getOwnPropertyDescriptors</span><span class=\"token punctuation\">(</span>source<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nObject<span class=\"token punctuation\">.</span><span class=\"token function\">getOwnPropertyDescriptor</span><span class=\"token punctuation\">(</span>target<span class=\"token punctuation\">,</span> <span class=\"token string\">'foo'</span><span class=\"token punctuation\">)</span>\n<span class=\"token comment\">// {</span>\n<span class=\"token comment\">//   get: undefined,</span>\n<span class=\"token comment\">//   set: [Function: foo],</span>\n<span class=\"token comment\">//   enumerable: true,</span>\n<span class=\"token comment\">//   configurable: true</span>\n<span class=\"token comment\">// }</span></code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n<p>据此，我们可以进一步实现更为完善的 <code class=\"gatsby-code-text\">merge()</code> 、 <code class=\"gatsby-code-text\">clone()</code> 等方法（都是浅拷贝）。</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre style=\"counter-reset: linenumber NaN\" class=\"gatsby-code-js line-numbers\"><code class=\"gatsby-code-js\"><span class=\"token keyword\">const</span> <span class=\"token function-variable function\">merge</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">target<span class=\"token punctuation\">,</span> source</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> Object<span class=\"token punctuation\">.</span><span class=\"token function\">defineProperties</span><span class=\"token punctuation\">(</span>\n  target<span class=\"token punctuation\">,</span>\n  Object<span class=\"token punctuation\">.</span><span class=\"token function\">getOwnPropertyDescriptors</span><span class=\"token punctuation\">(</span>sourse<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">const</span> <span class=\"token function-variable function\">clone</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">obj</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> Object<span class=\"token punctuation\">.</span><span class=\"token function\">create</span><span class=\"token punctuation\">(</span>\n  Object<span class=\"token punctuation\">.</span><span class=\"token function\">getPrototypeOf</span><span class=\"token punctuation\">(</span>obj<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n  Object<span class=\"token punctuation\">.</span><span class=\"token function\">getOwnPropertyDescriptors</span><span class=\"token punctuation\">(</span>obj<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n<h2>属性的遍历</h2>\n<p>ES6 中一共有 5 种遍历对象属性的方法：</p>\n<table>\n<thead>\n<tr>\n<th>方法名</th>\n<th>遍历自有属性（非Symbol）</th>\n<th>遍历自有属性（Symbol）</th>\n<th>遍历继承属性</th>\n<th>遍历不可枚举属性</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>for...in</td>\n<td>是</td>\n<td>否</td>\n<td>是</td>\n<td>否</td>\n</tr>\n<tr>\n<td>Object.keys(obj)</td>\n<td>是</td>\n<td>否</td>\n<td>否</td>\n<td>否</td>\n</tr>\n<tr>\n<td>Object.getOwnPropertyNames(obj)</td>\n<td>是</td>\n<td>否</td>\n<td>否</td>\n<td>是</td>\n</tr>\n<tr>\n<td>Object.getOwnPropertySymbols(obj)</td>\n<td>否</td>\n<td>是</td>\n<td>否</td>\n<td>否</td>\n</tr>\n<tr>\n<td>Reflect.ownKeys(obj)</td>\n<td>是</td>\n<td>是</td>\n<td>否</td>\n<td>是</td>\n</tr>\n</tbody>\n</table>\n<p>这 5 种方法在遍历对象属性时都遵守同样的次序规则：</p>\n<ol>\n<li>先遍历属性名为数值的属性，由小到大</li>\n<li>在遍历属性名为字符串的属性，按生成时间为序</li>\n<li>最后遍历属性名为 Symbol 值的属性，按生成时间为序</li>\n</ol>\n<h2>该系列的其他文章</h2>\n<p>上一篇：<a href=\"/blog/2016/12/20/es6-daily-09-function\">每天一点ES6(9)：函数的扩展</a></p>\n<p>下一篇：<a href=\"/blog/2017/07/02/es6-daily-11-symbol\">每天一点ES6(11)：Symbol</a></p>","frontmatter":{"title":"每天一点ES6(10)：对象的扩展","description":"迟来的更新……","cover":{"publicURL":"/static/es6daily-0950334fb8899f1006423341cbfeecb9.jpg"},"tags":["ecmascript","2015","es6","javascript","object"],"series":"es6daily","draft":false},"fields":{"id":"es6-daily-10-object","date":"2017-04-04T16:00:00.000Z"}}},"pageContext":{"isCreatedByStatefulCreatePages":false,"slug":"/blog/2017/04/05/es6-daily-10-object"}}}