{"componentChunkName":"component---src-templates-blog-post-tsx","path":"/blog/2017/07/02/es6-daily-11-symbol","webpackCompilationHash":"ce31da0dff6dcfcba816","result":{"data":{"site":{"siteMetadata":{"title":"童话说","keywords":["tonghuashuo","github","front-end","javascript","typescript","react","node","washington","hua","童话","童话说","前端","博客","技术","计算机","互联网"]}},"markdownRemark":{"html":"<h2>什么是 Symbol</h2>\n<p>Symbol 是 ES6 中新增的一种原始数据类型，至此 JavsScript 共有 7 种原始数据类型：<code class=\"gatsby-code-text\">object</code>、<code class=\"gatsby-code-text\">number</code>、<code class=\"gatsby-code-text\">string</code>、<code class=\"gatsby-code-text\">boolean</code>、<code class=\"gatsby-code-text\">null</code>、<code class=\"gatsby-code-text\">undefined</code>、<code class=\"gatsby-code-text\">symbol</code>。</p>\n<blockquote>\n<p>注意 array 不是原始数据类型，不要因为可以直接用 <code class=\"gatsby-code-text\">[]</code> 定义数组就以为它也是原始数据类型。</p>\n<p>数组是一种常见的基本数据结构。</p>\n</blockquote>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre style=\"counter-reset: linenumber NaN\" class=\"gatsby-code-js line-numbers\"><code class=\"gatsby-code-js\"><span class=\"token keyword\">let</span> s <span class=\"token operator\">=</span> <span class=\"token function\">Symbol</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">typeof</span> s<span class=\"token punctuation\">;</span> <span class=\"token comment\">// symbol</span>\ns <span class=\"token comment\">// Symbol()</span></code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span></span></pre></div>\n<p>创建 Symbol 不需要 <code class=\"gatsby-code-text\">new</code> 关键字，因为它是原始数据类型，不是对象。但由于不像其他原始数据类型有直接量的写法，一开始很容易忘记这点，习惯了就好。</p>\n<h2>为什么需要 Symbol</h2>\n<p>Symbol 的本意是独一无二的，ES6 引入它用于解决一些命名冲突的问题，此前对象的属性名都是字符串，如果试图给一个现有对象定义一个新的属性，很有可能会因为命名冲突而导致覆盖原有属性，这并不总是我们希望得到的结果，但又在所难免。</p>\n<h2>创建 Symbol</h2>\n<p>创建 Symbol 时可以传入一个字符串，用以给 Symbol 添加描述，如果传入的是对象，则会对其调用 <code class=\"gatsby-code-text\">toString()</code> 转成字符串后再生成。</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre style=\"counter-reset: linenumber NaN\" class=\"gatsby-code-js line-numbers\"><code class=\"gatsby-code-js\"><span class=\"token keyword\">let</span> s1 <span class=\"token operator\">=</span> <span class=\"token function\">Symbol</span><span class=\"token punctuation\">(</span><span class=\"token string\">'foo'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">let</span> s2 <span class=\"token operator\">=</span> <span class=\"token function\">Symbol</span><span class=\"token punctuation\">(</span><span class=\"token string\">'bar'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\ns1 <span class=\"token comment\">// Symbol('foo')</span>\ns2 <span class=\"token comment\">// Symbol('bar')</span></code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n<p>注意这里的参数只适用于描述，和 Symbol 的取值没有任何关系，两个参数相等的 Symbol 并不相等，事实上，就不存在任何两个 Symbol 是相等的。</p>\n<h2>转换</h2>\n<p>Symbol 不能参与数值运算和字符串拼接，会报错。</p>\n<p>但可以显式地把 Symbol 转换成字符串或布尔值（不能转换为数值）。</p>\n<h2>Symbol 用作对象属性名</h2>\n<p>Symbol 最常见的用途就是解决对象属性名冲突的问题，因为 Symbol 绝对不会冲突</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre style=\"counter-reset: linenumber NaN\" class=\"gatsby-code-js line-numbers\"><code class=\"gatsby-code-js\"><span class=\"token keyword\">let</span> mySymbol <span class=\"token operator\">=</span> <span class=\"token function\">Symbol</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// 第一种写法</span>\n<span class=\"token keyword\">let</span> o <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\no<span class=\"token punctuation\">[</span>mySymbol<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token string\">'hello'</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// 第二种写法</span>\n<span class=\"token keyword\">let</span> o <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token punctuation\">[</span>mySymbol<span class=\"token punctuation\">]</span><span class=\"token punctuation\">:</span> <span class=\"token string\">'hello'</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// 第三种写法</span>\n<span class=\"token keyword\">let</span> o <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\nObject<span class=\"token punctuation\">.</span><span class=\"token function\">defineProperty</span><span class=\"token punctuation\">(</span>o<span class=\"token punctuation\">,</span> mySymbol<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span>\n  value<span class=\"token punctuation\">:</span> <span class=\"token string\">'hello'</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// 以上写法均得到此结果</span>\no<span class=\"token punctuation\">[</span>mySymbol<span class=\"token punctuation\">]</span> <span class=\"token comment\">// hello</span></code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n<p>用 Symbol 定义属性时，只能用 <code class=\"gatsby-code-text\">[]</code> 的方式，不能用 <code class=\"gatsby-code-text\">.</code> ，否则会和不同字符串属性冲突，这很容易被忽略。无论是外部定义（ <code class=\"gatsby-code-text\">o[prop] = val</code> ）还是内部定义（ <code class=\"gatsby-code-text\">o = {[prop]: val}</code> ）都是如此。</p>\n<h2>Symbol 用于定义常量</h2>\n<p>Symbol 也可用于定义一组枚举常量，尤其当枚举变量仅用于区分，其取值并不重要时，Symbol 就可以作为不冲突的值赋给它们。</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre style=\"counter-reset: linenumber NaN\" class=\"gatsby-code-js line-numbers\"><code class=\"gatsby-code-js\"><span class=\"token keyword\">const</span> <span class=\"token constant\">DEBUG</span> <span class=\"token operator\">=</span> <span class=\"token function\">Symbol</span><span class=\"token punctuation\">(</span><span class=\"token string\">'debug'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">const</span> <span class=\"token constant\">WARN</span> <span class=\"token operator\">=</span> <span class=\"token function\">Symbol</span><span class=\"token punctuation\">(</span><span class=\"token string\">'warn'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">const</span> <span class=\"token constant\">INFO</span> <span class=\"token operator\">=</span> <span class=\"token function\">Symbol</span><span class=\"token punctuation\">(</span><span class=\"token string\">'info'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">const</span> <span class=\"token constant\">ERROR</span> <span class=\"token operator\">=</span> <span class=\"token function\">Symbol</span><span class=\"token punctuation\">(</span><span class=\"token string\">'error'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span><span></span></span></pre></div>\n<h2>属性名的遍历</h2>\n<p>Symbol 作为属性名时，不会出现在常规的循环或 <code class=\"gatsby-code-text\">Object.keys()</code> 等方法中，必须用 <code class=\"gatsby-code-text\">Object.getOwnPropertySymbols()</code> 进行获取。</p>\n<p>ES6 中还有个新的 API  <code class=\"gatsby-code-text\">Reflect.ownKeys()</code> 可以返回对象多有类型的键名，包括常规的和 Symbol。</p>\n<p>利用该特性，可以给对象定义一些不想暴露为接口的非私有内部方法，以防意外被卷入遍历中。</p>\n<h2>Symbol.for()</h2>\n<p> <code class=\"gatsby-code-text\">Symbol.for()</code> 接受一个字符串参数，搜索是否已有以此为描述的 Symbol 存在，有则返回已有的，没有则新建并返回。</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre style=\"counter-reset: linenumber NaN\" class=\"gatsby-code-js line-numbers\"><code class=\"gatsby-code-js\"><span class=\"token keyword\">let</span> s1 <span class=\"token operator\">=</span> Symbol<span class=\"token punctuation\">.</span><span class=\"token function\">for</span><span class=\"token punctuation\">(</span><span class=\"token string\">'foo'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">let</span> s2 <span class=\"token operator\">=</span> Symbol<span class=\"token punctuation\">.</span><span class=\"token function\">for</span><span class=\"token punctuation\">(</span><span class=\"token string\">'foo'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\ns1 <span class=\"token operator\">===</span> s2 <span class=\"token comment\">// true</span></code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span><span></span></span></pre></div>\n<h2>Symbol.keyFor()</h2>\n<p> <code class=\"gatsby-code-text\">Symbol.for()</code> 在创建的同时会在全局进行登记，以进行检查，而普通的 Symbol 并不会登记， <code class=\"gatsby-code-text\">Symbol.keyFor()</code> 用于检查 Symbol 是否被注册过，注册过的正常返回注册用的参数，否则返回 <code class=\"gatsby-code-text\">undefined</code> 。</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre style=\"counter-reset: linenumber NaN\" class=\"gatsby-code-js line-numbers\"><code class=\"gatsby-code-js\"><span class=\"token keyword\">let</span> s1 <span class=\"token operator\">=</span> Symbol<span class=\"token punctuation\">.</span><span class=\"token function\">for</span><span class=\"token punctuation\">(</span><span class=\"token string\">'foo'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">let</span> s2 <span class=\"token operator\">=</span> <span class=\"token function\">Symbol</span><span class=\"token punctuation\">(</span><span class=\"token string\">'foo'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\nSymbol<span class=\"token punctuation\">.</span><span class=\"token function\">keyFor</span><span class=\"token punctuation\">(</span>s1<span class=\"token punctuation\">)</span> <span class=\"token comment\">// 'foo'</span>\nSymbol<span class=\"token punctuation\">.</span><span class=\"token function\">keyFor</span><span class=\"token punctuation\">(</span>s2<span class=\"token punctuation\">)</span> <span class=\"token comment\">// undefined</span></code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n<h2>内置的 Symbol 值</h2>\n<p>ES6 内置了 11 个 Symbol 值，指向语言内部使用的方法：</p>\n<h3>Symbol.hasInstance</h3>\n<p> <code class=\"gatsby-code-text\">foo instanceof Foo</code> 实际上调用的是 <code class=\"gatsby-code-text\">Foo[Symbol.hasInstance](foo)</code> ，需要时可以重写以修改判断实例的规则。（虽然一般不建议这么做，就像不建议直接修改原生数据结构的属性，这里只是提供了一种可能性）</p>\n<h3>Symbol.isConcatSpreadable</h3>\n<p>当该属性为 <code class=\"gatsby-code-text\">true</code> 或 <code class=\"gatsby-code-text\">undefined</code> 时，表示对该对象使用 <code class=\"gatsby-code-text\">Array.prototype.concat</code> 时是否可以展开。</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre style=\"counter-reset: linenumber NaN\" class=\"gatsby-code-js line-numbers\"><code class=\"gatsby-code-js\"><span class=\"token keyword\">let</span> arr1 <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token string\">'c'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'d'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">[</span><span class=\"token string\">'a'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'b'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span><span class=\"token function\">concat</span><span class=\"token punctuation\">(</span>arr1<span class=\"token punctuation\">,</span> <span class=\"token string\">'e'</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// ['a', 'b', 'c', 'd', 'e']</span>\narr1<span class=\"token punctuation\">[</span>Symbol<span class=\"token punctuation\">.</span>isConcatSpreadable<span class=\"token punctuation\">]</span> <span class=\"token comment\">// undefined</span>\n\n<span class=\"token keyword\">let</span> arr2 <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token string\">'c'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'d'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\narr2<span class=\"token punctuation\">[</span>Symbol<span class=\"token punctuation\">.</span>isConcatSpreadable<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">[</span><span class=\"token string\">'a'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'b'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span><span class=\"token function\">concat</span><span class=\"token punctuation\">(</span>arr2<span class=\"token punctuation\">,</span> <span class=\"token string\">'e'</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// ['a', 'b', ['c','d'], 'e']</span></code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n<p>数组的默认行为是可展开，我们可以手动干预让它不可展开。类数组对象同理</p>\n<h3>Symbol.species</h3>\n<p>这个属性指向对象的真实构造函数。创建实例时会调用该方法，返回一个函数作为真正的构造函数，此构造函数和类名可以不一样。（虽然我目前还想不到什么时候会需要这么干，反正人家允许这种操作就是了）</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre style=\"counter-reset: linenumber NaN\" class=\"gatsby-code-js line-numbers\"><code class=\"gatsby-code-js\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">MyArray</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">Array</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">static</span> <span class=\"token keyword\">get</span> <span class=\"token punctuation\">[</span>Symbol<span class=\"token punctuation\">.</span>species<span class=\"token punctuation\">]</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span> <span class=\"token keyword\">return</span> Array<span class=\"token punctuation\">;</span> <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">var</span> a <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">MyArray</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span><span class=\"token number\">3</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">var</span> mapped <span class=\"token operator\">=</span> a<span class=\"token punctuation\">.</span><span class=\"token function\">map</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">x</span> <span class=\"token operator\">=></span> x <span class=\"token operator\">*</span> x<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\nmapped <span class=\"token keyword\">instanceof</span> <span class=\"token class-name\">MyArray</span> <span class=\"token comment\">// false</span>\nmapped <span class=\"token keyword\">instanceof</span> <span class=\"token class-name\">Array</span> <span class=\"token comment\">// true</span></code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n<p>上述代码中构造函数被替换，因此类型检测的结果就变了。</p>\n<h3>Symbol.unscopables</h3>\n<p>该属性指向一个对象，知名使用 <code class=\"gatsby-code-text\">with</code> 关键字时哪些属性会被环境排除。（鉴于严格模式下 <code class=\"gatsby-code-text\">with</code> 已经被禁用，因此该属性的使用价值似乎并不大，同样的，只是提供这种操作而已）</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre style=\"counter-reset: linenumber NaN\" class=\"gatsby-code-js line-numbers\"><code class=\"gatsby-code-js\"><span class=\"token comment\">// 没有 unscopables 时</span>\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">MyClass</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token function\">foo</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span> <span class=\"token keyword\">return</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span> <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">var</span> <span class=\"token function-variable function\">foo</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span> <span class=\"token keyword\">return</span> <span class=\"token number\">2</span><span class=\"token punctuation\">;</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">with</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">MyClass</span><span class=\"token punctuation\">.</span>prototype<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token function\">foo</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 1</span>\n<span class=\"token punctuation\">}</span> <span class=\"token comment\">// 正常的改变作用域，调用了MyClass.foo()，返回1</span>\n\n<span class=\"token comment\">// 有 unscopables 时</span>\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">MyClass</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token function\">foo</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span> <span class=\"token keyword\">return</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span> <span class=\"token punctuation\">}</span>\n  <span class=\"token keyword\">get</span> <span class=\"token punctuation\">[</span>Symbol<span class=\"token punctuation\">.</span>unscopables<span class=\"token punctuation\">]</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> <span class=\"token punctuation\">{</span> foo<span class=\"token punctuation\">:</span> <span class=\"token boolean\">true</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span> <span class=\"token comment\">// 改变作用域时，MyClass.foo()会被排除</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">var</span> <span class=\"token function-variable function\">foo</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span> <span class=\"token keyword\">return</span> <span class=\"token number\">2</span><span class=\"token punctuation\">;</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">with</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">MyClass</span><span class=\"token punctuation\">.</span>prototype<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token function\">foo</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 2</span>\n<span class=\"token punctuation\">}</span> <span class=\"token comment\">// 由于 MyClass.foo 被排除，因此 MyClass.prototype 对这里的 foo 没有影响，向上寻找到全局的 foo ，返回2</span></code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n<h3>Symbol.match / replace / search / split / iterator / toPrimitive / toStringTag</h3>\n<p>这些属性都是指向一个函数，可以自定义当这些方法被执行时的行为，重新定义规则。（虽然这么做似乎不是很合逻辑，但当你需要自行封装一些东西的时候们或许还是有用的，反正 JS 提供了这样的操作，用不用那是开发者自己的选择了）</p>\n<p>由于这写些用法一般用不到，因此这里不浪费篇幅一一给出示例介绍具体用法了，需要时候去看阮大原文的实例，或者 MDN 上的文档就好了。</p>\n<h2>在我看来 Symbol 的价值</h2>\n<p>Symbol 最实际的作用，还是在定义对象属性时候用于解决命名冲突，以及配合做枚举类型的值。Symbol 不可被常规方法枚举的特点私以为优劣参半，看需求，用作内部方法时还是挺好的特性，但枚举对象的全部属性时会略麻烦一些。后面提到的这些内置 Symbol 值知道一下即可，一般用不到，用到时现查文档即可。</p>\n<h2>关于迟更</h2>\n<p>鉴于该系列迟更严重，完全对不起标题中“每天”的说法，我决定……以后就不吐槽这个梗了，每次都要自黑一遍，我都快词穷了。反正你们也知道在这件事上我有多不靠谱了……[/手动摊手]。</p>\n<p>不过说实话，前端这两年变化太快，要学的东西太多，上个月刚把 NG4 和 TypeScript 看完，最近在看 React 全家桶，看着看着就把博客的事儿给忘了，好久才想起来：卧槽，博客好久没更了。ES6 在实战中倒是已经用了不少，但是博客更新的进度实在是落后，距离阮大这种级别的还差太多太多。（回过头看看阮大的《ES6 入门》系列第一版都啥时候的事了，黄花菜不光凉了都放馊了）</p>\n<h2>该系列的其他文章</h2>\n<p>上一篇：<a href=\"/blog/2017/04/05/es6-daily-10-object\">每天一点ES6(10)：对象的扩展</a></p>\n<p>下一篇：<a href=\"/blog/2017/07/03/es6-daily-12-set-and-map\">每天一点ES6(12)：Set 和 Map</a></p>","frontmatter":{"title":"每天一点ES6(11)：Symbol","description":"原始类型家族的新成员","cover":{"publicURL":"/static/es6daily-0950334fb8899f1006423341cbfeecb9.jpg"},"tags":["ecmascript","2015","es6","javascript","symbol"],"series":"es6daily","draft":false},"fields":{"id":"es6-daily-11-symbol","date":"2017-07-01T16:00:00.000Z"}}},"pageContext":{"isCreatedByStatefulCreatePages":false,"slug":"/blog/2017/07/02/es6-daily-11-symbol"}}}