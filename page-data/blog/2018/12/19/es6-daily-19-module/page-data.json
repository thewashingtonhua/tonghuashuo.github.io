{"componentChunkName":"component---src-templates-blog-post-tsx","path":"/blog/2018/12/19/es6-daily-19-module","result":{"data":{"site":{"siteMetadata":{"title":"童话说","keywords":["tonghuashuo","github","front-end","javascript","typescript","react","node","washington","hua","童话","童话说","前端","博客","技术","计算机","互联网"]}},"markdownRemark":{"html":"<h2>模块化</h2>\n<p>但凡有一定资历的开发者，对“模块化”的概念应该都非常熟悉了。C、PHP 有 <code class=\"gatsby-code-text\">include</code> 、Java、Python 有 <code class=\"gatsby-code-text\">import</code> ，Ruby 有 <code class=\"gatsby-code-text\">require</code> ，连 CSS 都有 <code class=\"gatsby-code-text\">@import</code> 。然而 JavaScript 却一直都没有语言层面的模块化方案 —— 直到 ES6。</p>\n<h2>简史</h2>\n<p>不过这个问题也不怪 JavaScript 的发明者，毕竟时代不同，当初的需求很简单，就只是一个简单的脚本语言。</p>\n<p>随着 Web 的发展，JavaScript 被开发出更多的可能性，前端项目的复杂度与日俱增，语言特性的缺失成为了发展的瓶颈，于是便有了 ES6 大刀阔斧的变革。</p>\n<p>在 ES6 之前，社区也曾出现过 CommonJS、AMD、CMD、UMD 等各种模块化方案。ES6 为我们带来了语言层面上的解决方案，我们称之为 ESM（ECMAScript Module），并且很快取代之前的所有方案，一统了江湖。</p>\n<blockquote>\n<p>由于一些历史原因，CommonJS 在未来很长一段时间还会继续存在，但 Node.js 的开发团队计划未来迁移到 ESM，为此正在研发一套平滑的迁移方案。对于普通开发者，只需要知道：万物终将基于 ESM。</p>\n</blockquote>\n<h2>静态加载</h2>\n<p>熟悉 Node 的朋友应该都清楚，CommonJS 的模块本质就是一个对象，当我们 <code class=\"gatsby-code-text\">reuqire</code> 一个模块的时候，会引入整个模块，也就是把整个对象给搬了过来，然后访问对象上的属性。这种模块加载方式我们称之为“动态加载”，因为只有在运行时才能得到这个对象。动态加载的好处是灵活方便，可以根据条件判断选择性地加载模块；坏处是要么不加载，要加载就是整个模块，没办法只加载用到部分（因此没法做 Tree-Shaking），而且没法在编译阶段做“静态优化”（实现 Tree-Shaking 的另一个阻碍）。</p>\n<p>ESM 采用静态加载的方式，牺牲一部分灵活性（Dynamic Import 提案弥补了这一缺陷，现已进入 Stage-3，主流环境都已经支持，可以期待在 ES2019 中见到它），换取“静态优化”的可能性，大家熟悉的 Tree-Shaking、类型检测等功能都要归功于此。</p>\n<h2>严格模式</h2>\n<p>ESM 自动采用严格模式，无论是否在模块顶部加上 <code class=\"gatsby-code-text\">&quot;use strict&quot;;</code></p>\n<p>严格模式本身属于 ES5 的内容，ES6 并没有对其做修改，只是强制启用。换个角度理解，未来其实也就没有严格模式一说了，所有 JavaScript 代码都必须遵守严格模式的规则。</p>\n<h2>export</h2>\n<p>ESM 的核心是两个命令， <code class=\"gatsby-code-text\">export</code> 用于导出， <code class=\"gatsby-code-text\">import</code> 用于导入，非常直观。（从英文的角度，include 表示“包含”，被包含的代码块会被简单复制到引用之处；require 表示“需要”，import 表示“引进”，后两者虽然从英文语法上没有强调是“整体”还是“局部”，但和“包含”还有明显区别的）</p>\n<p>ESM 中，一个模块就是一个独立的文件，文件中定义的变量，除非用 <code class=\"gatsby-code-text\">export</code> 命令导出，在外部是无法访问的。</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre style=\"counter-reset: linenumber NaN\" class=\"gatsby-code-js line-numbers\"><code class=\"gatsby-code-js\"><span class=\"token comment\">// 定义后立即导出</span>\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">const</span> firstName <span class=\"token operator\">=</span> <span class=\"token string\">'Phil'</span>\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">const</span> firstName <span class=\"token operator\">=</span> <span class=\"token string\">'Coulson'</span>\n\n<span class=\"token comment\">// 先定义，后统一导出</span>\n<span class=\"token keyword\">const</span> year <span class=\"token operator\">=</span> <span class=\"token number\">1962</span>\n<span class=\"token keyword\">const</span> gender <span class=\"token operator\">=</span> <span class=\"token string\">'Male'</span>\n<span class=\"token keyword\">export</span> <span class=\"token punctuation\">{</span> year<span class=\"token punctuation\">,</span> gender <span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\">// 导出函数</span>\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">function</span> <span class=\"token function\">add</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">x<span class=\"token punctuation\">,</span> y</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">return</span> x <span class=\"token operator\">+</span> y\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\">// 导出类</span>\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Point</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\">// 给导出的内容设置别名</span>\n<span class=\"token keyword\">function</span> <span class=\"token function\">v1</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">function</span> <span class=\"token function\">v2</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">export</span> <span class=\"token punctuation\">{</span>\n  v1 <span class=\"token keyword\">as</span> funcV1<span class=\"token punctuation\">,</span>\n  v2 <span class=\"token keyword\">as</span> funcV2<span class=\"token punctuation\">,</span>\n  v2 <span class=\"token keyword\">as</span> funcV3 <span class=\"token comment\">// 一个变量可以有多个别名</span>\n<span class=\"token punctuation\">}</span></code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n<p><code class=\"gatsby-code-text\">export</code> 规定的是对外的接口，且必须和文件内的变量一一对应，不能直接导出一个直接量。换句话说，导出内容的本体必须是一个具名的变量、函数、类，导出时可以直接使用这个名字，也可以指定别名。</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre style=\"counter-reset: linenumber NaN\" class=\"gatsby-code-js line-numbers\"><code class=\"gatsby-code-js\"><span class=\"token comment\">// 报错</span>\n<span class=\"token keyword\">export</span> <span class=\"token number\">1</span>\n\n<span class=\"token comment\">// 报错</span>\n<span class=\"token keyword\">const</span> m <span class=\"token operator\">=</span> <span class=\"token number\">1</span>\n<span class=\"token keyword\">export</span> m\n\n<span class=\"token comment\">// 正确</span>\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">const</span> m <span class=\"token operator\">=</span> <span class=\"token number\">1</span>\n\n<span class=\"token comment\">// 正确</span>\n<span class=\"token keyword\">const</span> m <span class=\"token operator\">=</span> <span class=\"token number\">1</span>\n<span class=\"token keyword\">export</span> <span class=\"token punctuation\">{</span> m <span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\">// 正确</span>\n<span class=\"token keyword\">const</span> n <span class=\"token operator\">=</span> <span class=\"token number\">1</span>\n<span class=\"token keyword\">export</span> <span class=\"token punctuation\">{</span> n <span class=\"token keyword\">as</span> m <span class=\"token punctuation\">}</span></code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n<p><code class=\"gatsby-code-text\">export</code> 导出的是一个接口，与之对应的值是动态绑定关系，通过这个接口可以取到模块内部实时的值。如果所导出的内容在未来发生变化，外部引用也会相应更新。</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre style=\"counter-reset: linenumber NaN\" class=\"gatsby-code-js line-numbers\"><code class=\"gatsby-code-js\"><span class=\"token keyword\">export</span> <span class=\"token keyword\">const</span> foo <span class=\"token operator\">=</span> <span class=\"token string\">'bar'</span>\n<span class=\"token function\">setTimeout</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> foo <span class=\"token operator\">=</span> <span class=\"token string\">'baz'</span><span class=\"token punctuation\">,</span> <span class=\"token number\">500</span><span class=\"token punctuation\">)</span>\n<span class=\"token comment\">// 500 毫秒后，foo 的引用会被改变</span></code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span></span></pre></div>\n<h2>import</h2>\n<p><code class=\"gatsby-code-text\">import</code> 用于导入一个模块</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre style=\"counter-reset: linenumber NaN\" class=\"gatsby-code-js line-numbers\"><code class=\"gatsby-code-js\"><span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span> lastName <span class=\"token keyword\">as</span> surname<span class=\"token punctuation\">,</span> firstname <span class=\"token punctuation\">}</span> form <span class=\"token string\">'./profile.js'</span></code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span></span></pre></div>\n<p>导入同样支持指定别名。导入的内容都是只读的，不能直接重新赋值，但如果导入的是一个对象/数组，可以重新设置其中的属性/元素。但建议最好还是保持导入内容的只读性。</p>\n<p><code class=\"gatsby-code-text\">from</code> 后面是模块的路径，支持绝对路径、相对路径， <code class=\"gatsby-code-text\">*.js</code> 后缀可以省略（配合 Webpack 等工具还能支持更多类型的模块）</p>\n<p><code class=\"gatsby-code-text\">import</code> 自带提升效果，会提升到整个模块的头部，多个 <code class=\"gatsby-code-text\">import</code> 会按顺序加载，习惯上最好手动把所有的 <code class=\"gatsby-code-text\">import</code> 写在模块的顶部。由于 <code class=\"gatsby-code-text\">import</code> 是在编译阶段执行的，因此 <code class=\"gatsby-code-text\">import</code> 中不能使用表达式和变量等运行时才能确定取值的语法结构。</p>\n<p>对于一些特定的模块（例如 lodash），可能会有 <code class=\"gatsby-code-text\">import &#39;lodash&#39;</code> 这样的用法，这种用法会执行所加载的模块，但不输入任何值。</p>\n<p><code class=\"gatsby-code-text\">import</code> 是单例的。重复同一条 <code class=\"gatsby-code-text\">import</code> 语句并不会导致多次导入，只会执行一次。分多条语句导入同一模块的不同的接口，和在同一条语句中一次性导入所有需要的接口是等价的。不会多次执行。但最好还是不要这样，大部分规范都会限制同一模块只导入一次，在一条语句中导入所需内容。</p>\n<p>通过 Babel 转码，我们可以在 ESM 的模块中混用 CommonJS 的模块，但由于 <code class=\"gatsby-code-text\">import</code> 和 <code class=\"gatsby-code-text\">require</code> 执行时机的差别，最好把 <code class=\"gatsby-code-text\">import</code> 放在最顶部。</p>\n<h2>模块的整体加载</h2>\n<p>如果想一次性加载一个模块里所有导出的接口，除了手动列举所有的接口外，还可以使用如下语法：</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre style=\"counter-reset: linenumber NaN\" class=\"gatsby-code-js line-numbers\"><code class=\"gatsby-code-js\"><span class=\"token keyword\">import</span> <span class=\"token operator\">*</span> <span class=\"token keyword\">as</span> circle <span class=\"token keyword\">from</span> <span class=\"token string\">'./circle'</span></code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span></span></pre></div>\n<h2>export default</h2>\n<p>开发者在引入一个模块时，不可能总是清楚的知道模块里有哪些导出，因此 ESM 提供了一个“默认导出”的特性。默认导出本身可以有自己的变量名，但用户在引入模块的默认导出时不必非得使用这个名字，可以为其指定任意名字（不需要 <code class=\"gatsby-code-text\">as</code> ，也不需要花括号）。</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre style=\"counter-reset: linenumber NaN\" class=\"gatsby-code-js line-numbers\"><code class=\"gatsby-code-js\"><span class=\"token comment\">// export-default.js</span>\n<span class=\"token comment\">// 默认导出匿名函数</span>\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">default</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'foo'</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\">// 默认导出具名函数，但引入时未必要用这个名字</span>\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">default</span> <span class=\"token keyword\">function</span> <span class=\"token function\">foo</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'foo'</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\">// 默认导出同样可以定义和导出分开</span>\n<span class=\"token keyword\">function</span> <span class=\"token function\">foo</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  condole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'foo'</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">default</span> foo\n\n<span class=\"token comment\">// import-default.js</span>\n<span class=\"token comment\">// 默认导出在被导入时可以任意命名</span>\n<span class=\"token keyword\">import</span> customName <span class=\"token keyword\">from</span> <span class=\"token string\">'./export-default'</span>\n<span class=\"token function\">customeName</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// 'foo'</span></code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n<p>一个模块只能有一个默认导出，不允许重复。</p>\n<p>一个模块可以同时包含默认导出和普通导出，导入时也可以在同一条语句中导入，比如我们在使用 React 时经常会看到这样的写法：</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre style=\"counter-reset: linenumber NaN\" class=\"gatsby-code-js line-numbers\"><code class=\"gatsby-code-js\"><span class=\"token keyword\">import</span> React<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span> Component <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'react'</span></code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span></span></pre></div>\n<p>默认导出本质上就是输出一个名叫 <code class=\"gatsby-code-text\">default</code> 的变量，然后允许在导入时任意起名，因此默认导出也可以写作：</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre style=\"counter-reset: linenumber NaN\" class=\"gatsby-code-js line-numbers\"><code class=\"gatsby-code-js\"><span class=\"token comment\">// modules.js</span>\n<span class=\"token keyword\">function</span> <span class=\"token function\">add</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">x<span class=\"token punctuation\">,</span> y</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">return</span> x <span class=\"token operator\">+</span> y\n<span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">export</span> <span class=\"token punctuation\">{</span> add <span class=\"token keyword\">as</span> <span class=\"token keyword\">default</span> <span class=\"token punctuation\">}</span>\n<span class=\"token comment\">// 等同于 export default add</span>\n\n<span class=\"token comment\">// app.js</span>\n<span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span> <span class=\"token keyword\">default</span> <span class=\"token keyword\">as</span> foo <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'modules'</span>\n<span class=\"token comment\">// 等同于 import foo from modules</span></code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n<p>默认导出后面不允许跟变量申明语句（即不是用 <code class=\"gatsby-code-text\">var</code> 、 <code class=\"gatsby-code-text\">let</code> 、 <code class=\"gatsby-code-text\">const</code> 声明的），可以是一个已声明的变量，或是常规的函数声明、类定义，特别的，由于默认导出已经有变量名 <code class=\"gatsby-code-text\">default</code> 了，因此它还可以是一个直接量。</p>\n<h2>export 与 import 的复合写法</h2>\n<blockquote>\n<p>该提案目前还处于 Stage 1 阶段</p>\n</blockquote>\n<p>有一些特殊的场景，我们需要先导入再导出同一个模块，这时候我们可以把 <code class=\"gatsby-code-text\">export</code> 和 <code class=\"gatsby-code-text\">import</code> 语句写在一起。</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre style=\"counter-reset: linenumber NaN\" class=\"gatsby-code-js line-numbers\"><code class=\"gatsby-code-js\"><span class=\"token comment\">// 把导入的内容直接导出</span>\n<span class=\"token comment\">// 相当于简单转达，模块内部无法访问</span>\n<span class=\"token keyword\">export</span> <span class=\"token punctuation\">{</span> foo<span class=\"token punctuation\">,</span> bar <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'my_module'</span>\n<span class=\"token comment\">// 可以简单理解为：</span>\n<span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span> foo<span class=\"token punctuation\">,</span> bar <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'my_module'</span>\n<span class=\"token keyword\">export</span> <span class=\"token punctuation\">{</span> foo<span class=\"token punctuation\">,</span> bar <span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\">// 支持接口改名</span>\n<span class=\"token keyword\">export</span> <span class=\"token punctuation\">{</span> foo <span class=\"token keyword\">as</span> myFoo <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'my_module'</span>\n\n<span class=\"token comment\">// 支持整体输出</span>\n<span class=\"token comment\">// 这种写法中，会忽略 my_module 的 default</span>\n<span class=\"token keyword\">export</span> <span class=\"token operator\">*</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'my_module'</span>\n\n<span class=\"token comment\">// 具名导出和默认导出可以互转</span>\n<span class=\"token comment\">// 但新的导出还是只能有一个默认导出</span>\n<span class=\"token keyword\">export</span> <span class=\"token punctuation\">{</span> es6 <span class=\"token keyword\">as</span> <span class=\"token keyword\">default</span> <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'./someModule'</span>\n<span class=\"token keyword\">export</span> <span class=\"token punctuation\">{</span> <span class=\"token keyword\">default</span> <span class=\"token keyword\">as</span> es6 <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'./someModule'</span>\n\n<span class=\"token comment\">// 一下三种形式的导入暂且还不支持使用复合写法</span>\n<span class=\"token keyword\">import</span> <span class=\"token operator\">*</span> <span class=\"token keyword\">as</span> someIdentifier <span class=\"token keyword\">from</span> <span class=\"token string\">'someModule'</span>\n<span class=\"token keyword\">import</span> someIdentifier <span class=\"token keyword\">from</span> <span class=\"token string\">'someModule'</span>\n<span class=\"token keyword\">import</span> someIdentifier<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span> namedIdentifier <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'someModule'</span></code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n<p>特别的， <code class=\"gatsby-code-text\">export * form &#39;some-module&#39;</code> 会导出被导入模块的所有普通导出，但会忽略被导入模块的 <code class=\"gatsby-code-text\">default</code> ，即默认导出。如果新的模块需要默认导出，得手动指定。</p>\n<h2>模块的继承</h2>\n<p>模块也能继承。模块的继承其实就是整体导入一个或几个模块，增加点自己的内容，最后一并导出。有点像是把一个或几个模块打包重新导出成一个的意思。</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre style=\"counter-reset: linenumber NaN\" class=\"gatsby-code-js line-numbers\"><code class=\"gatsby-code-js\"><span class=\"token comment\">// circleplus.js</span>\n<span class=\"token keyword\">export</span> <span class=\"token operator\">*</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'circle'</span>\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">const</span> e <span class=\"token operator\">=</span> <span class=\"token number\">2.71828182846</span>\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">default</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">x</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">return</span> Math<span class=\"token punctuation\">.</span><span class=\"token function\">exp</span><span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\">// main.js</span>\n<span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span> <span class=\"token operator\">*</span> <span class=\"token keyword\">as</span> math <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> exp <span class=\"token keyword\">from</span> <span class=\"token string\">'circleplus'</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token function\">exp</span><span class=\"token punctuation\">(</span>math<span class=\"token punctuation\">.</span>e<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n<h2>跨模块常量</h2>\n<p>跨模块共享常量是模块化开发中最常用的手段之一，JavaScript 中通过 <code class=\"gatsby-code-text\">const</code> 定义的常量只能在当前模块中使用，但是导出之后，就可以被其它模块导入，进而实现共享。</p>\n<h2>Dynamic Import (Stage-3)</h2>\n<p>前面说到 ESM 是牺牲了动态加载换来了静态分析的可能性，但动态加载的需求又确实存在，难道就没有两全其美的解决方案吗？Dynamic Import 就是来弥补这个缺陷的。</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre style=\"counter-reset: linenumber NaN\" class=\"gatsby-code-js line-numbers\"><code class=\"gatsby-code-js\"><span class=\"token keyword\">const</span> main <span class=\"token operator\">=</span> document<span class=\"token punctuation\">.</span><span class=\"token function\">querySelector</span><span class=\"token punctuation\">(</span><span class=\"token string\">'main'</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token keyword\">import</span><span class=\"token punctuation\">(</span><span class=\"token string\">'./section-modules/${someVariable}.js'</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">.</span><span class=\"token function\">then</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">module</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n    module<span class=\"token punctuation\">.</span><span class=\"token function\">loadPageIntro</span><span class=\"token punctuation\">(</span>main<span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">.</span><span class=\"token function\">catch</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">err</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n    main<span class=\"token punctuation\">.</span>textContent <span class=\"token operator\">=</span> err<span class=\"token punctuation\">.</span>message\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span></code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n<p><code class=\"gatsby-code-text\">import()</code> 根据传入的参数按需加载模块，并在加载完成时返回一个 Promise 对象，后续就可以在 <code class=\"gatsby-code-text\">then()</code> 里访问获取到的模块。</p>\n<h2>小结</h2>\n<p>可能是 ES6 中对未来影响最大的一项改变 —— 这个形容我觉得一点都不过分，原生模块化的加入使得 JavaScript 具备了开发大型系统的能力，可以应对日益复杂的交互需求。</p>\n<h2>该系列的其他文章</h2>\n<p>上一篇：<a href=\"/blog/2018/12/17/es6-daily-18-class\">每天一点ES6(18)：Class</a></p>\n<!-- 下一篇：[每天一点ES6(20)：rest & spread]('') -->","frontmatter":{"title":"每天一点ES6(19)：Module","description":"可能是 ES6 中对未来影响最大的一项改变","cover":{"publicURL":"/static/es6daily-0950334fb8899f1006423341cbfeecb9.jpg"},"tags":["ecmascript","2015","es6","javascript","module","import","export"],"series":"es6daily","draft":false},"fields":{"id":"es6-daily-19-module","date":"2018-12-18T16:00:00.000Z"}}},"pageContext":{"slug":"/blog/2018/12/19/es6-daily-19-module"}}}