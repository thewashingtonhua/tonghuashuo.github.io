{"componentChunkName":"component---src-templates-blog-post-tsx","path":"/blog/2018/12/17/es6-daily-18-class","result":{"data":{"site":{"siteMetadata":{"title":"童话说","keywords":["tonghuashuo","github","front-end","javascript","typescript","react","node","washington","hua","童话","童话说","前端","博客","技术","计算机","互联网"]}},"allMarkdownRemark":{"totalCount":77,"edges":[{"node":{"id":"f6124abb-a556-558d-8053-b55bda280fc3","frontmatter":{"title":"Github-Flutter","description":"基于 Flutter 开发的 Github 客户端","tags":null,"cover":{"publicURL":"/static/72e94c39ebb670dd23625675c0a22ace/blank.jpg"},"series":null,"draft":true,"original":null},"fields":{"id":"github-flutter","slug":"/project/github-flutter","type":"project","date":null}}},{"node":{"id":"52c14666-2e1f-5d9d-8200-41713b54c39a","frontmatter":{"title":"FBC","description":"联合办公空间的会员服务","tags":null,"cover":{"publicURL":"/static/73b8b250e607c97c493edf1b542345fa/fbc.jpg"},"series":null,"draft":false,"original":null},"fields":{"id":"fbc","slug":"/project/fbc","type":"project","date":null}}},{"node":{"id":"eb774da5-3c5b-5dc1-bf6d-9f1ec040e222","frontmatter":{"title":"CSS Scan","description":"VSCode 扩展，自动补全 CSS 变量","tags":null,"cover":{"publicURL":"/static/72e94c39ebb670dd23625675c0a22ace/blank.jpg"},"series":null,"draft":true,"original":null},"fields":{"id":"css-scan","slug":"/project/css-scan","type":"project","date":null}}},{"node":{"id":"1c347cf5-624a-553b-9ba1-5200bcbe404e","frontmatter":{"title":"Fridge","description":"Teambition 设计资产速查工具","tags":null,"cover":{"publicURL":"/static/97b869f04b74e763be87e4369e4690e3/fridge.jpg"},"series":null,"draft":true,"original":null},"fields":{"id":"fridge","slug":"/project/fridge","type":"project","date":null}}},{"node":{"id":"deb4a6cb-73b2-5ef6-a124-4315ff0ea7a6","frontmatter":{"title":"Teamedia","description":"Teambition 出品的网盘应用","tags":null,"cover":{"publicURL":"/static/a5318825484a23816f7831bab7f12d82/teamedia.jpg"},"series":null,"draft":true,"original":null},"fields":{"id":"teamedia","slug":"/project/teamedia","type":"project","date":null}}},{"node":{"id":"49b65e31-f0a3-5d35-8eca-75779aea26b7","frontmatter":{"title":"小书签","description":"让 Chrome 的书签更好用","tags":null,"cover":{"publicURL":"/static/72e94c39ebb670dd23625675c0a22ace/blank.jpg"},"series":null,"draft":true,"original":null},"fields":{"id":"the-collector","slug":"/project/the-collector","type":"project","date":null}}},{"node":{"id":"55b24908-59a1-5e57-9e8b-179b74161064","frontmatter":{"title":"小图标","description":"一站式 Favicon 解决方案","tags":null,"cover":{"publicURL":"/static/72e94c39ebb670dd23625675c0a22ace/blank.jpg"},"series":null,"draft":false,"original":null},"fields":{"id":"the-favicon","slug":"/project/the-favicon","type":"project","date":null}}},{"node":{"id":"57655088-0ae6-54b7-aa97-c9df05e9a957","frontmatter":{"title":"小扫描","description":"磁盘占用一眼","tags":null,"cover":{"publicURL":"/static/72e94c39ebb670dd23625675c0a22ace/blank.jpg"},"series":null,"draft":true,"original":null},"fields":{"id":"the-scanner","slug":"/project/the-scanner","type":"project","date":null}}},{"node":{"id":"2fbcc3fe-6081-5ea1-a85b-af0ad5891342","frontmatter":{"title":"小剧透","description":"Web 版「剧情连拍」","tags":null,"cover":{"publicURL":"/static/72e94c39ebb670dd23625675c0a22ace/blank.jpg"},"series":null,"draft":true,"original":null},"fields":{"id":"the-spoiler","slug":"/project/the-spoiler","type":"project","date":null}}},{"node":{"id":"e66d25c0-b3d3-5be1-b1ce-8b3cc5796db0","frontmatter":{"title":"INEX 影力所","description":"泛娱乐领域的垂直数字货币交易所","tags":null,"cover":{"publicURL":"/static/40ff0dfa20bfd2e8e2b2ea8abb900b5b/inex.jpg"},"series":null,"draft":false,"original":null},"fields":{"id":"inex","slug":"/project/inex","type":"project","date":null}}},{"node":{"id":"620f5a4f-5f68-5c8c-adb5-d9ce78e36ce7","frontmatter":{"title":"Thoughts 所思","description":"Teambition 出品的企业知识管理应用","tags":null,"cover":{"publicURL":"/static/faff3495c115cab9b6fd951f3c6b96f9/thoughts.jpg"},"series":null,"draft":false,"original":null},"fields":{"id":"thoughts","slug":"/project/thoughts","type":"project","date":null}}},{"node":{"id":"ffd2167f-246b-54a5-8ac1-75e907753ef5","frontmatter":{"title":"Xshowroom 买手圈","description":"时尚业专业买手服务平台","tags":null,"cover":{"publicURL":"/static/72ea2ae7921cb5aa0b3b4f56578ed2b9/xshowroom.jpg"},"series":null,"draft":false,"original":null},"fields":{"id":"xshowroom","slug":"/project/xshowroom","type":"project","date":null}}},{"node":{"id":"730b99c7-1786-5732-996d-7e988979e77a","frontmatter":{"title":"新阅","description":"在线视频协作平台","tags":null,"cover":{"publicURL":"/static/64b35564f5bc639232b66b6559065b31/xinyue.jpg"},"series":null,"draft":false,"original":null},"fields":{"id":"xinyue","slug":"/project/xinyue","type":"project","date":null}}},{"node":{"id":"4b88a8c7-531c-5d5a-88c2-0248abe7825c","frontmatter":{"title":"再来聊聊前端面试","description":"人嘛，总是在不断的试错中成长起来的","tags":["interview"],"cover":{"publicURL":"/static/c6ee2544d5e90e8349ec2b751c37e298/interview.jpg"},"series":"","draft":true,"original":true},"fields":{"id":"thoughts-about-fe-interview","slug":"/blog/2020/01/20/thoughts-about-fe-interview","type":"blog","date":"2020-01-20"}}},{"node":{"id":"e3e16ec9-50ee-5e7f-8b5a-3a58b94f5e26","frontmatter":{"title":"聊聊「深色模式」","description":"你说的黑不是黑，你说的暗是什么暗","tags":["design","dark"],"cover":{"publicURL":"/static/d221320d45d5d7ac530fe7af1ab4cd79/blank.jpg"},"series":"","draft":true,"original":true},"fields":{"id":"dark-mode","slug":"/blog/2020/03/15/dark-mode","type":"blog","date":"2020-03-15"}}},{"node":{"id":"d4daf12f-fd60-5e74-b1ba-c346c84a8d92","frontmatter":{"title":"「童话说」又改版啦","description":"只为遇见更好的自己","tags":["blog","4.0","update"],"cover":{"publicURL":"/static/d221320d45d5d7ac530fe7af1ab4cd79/blank.jpg"},"series":"","draft":true,"original":true},"fields":{"id":"introducing-ths-v4","slug":"/blog/2020/03/15/introducing-ths-v4","type":"blog","date":"2020-03-15"}}},{"node":{"id":"6f7cc28d-7a7b-5a2d-b66b-428c0f78abc5","frontmatter":{"title":"为什么我们总是在不断地造轮子","description":"圆的圆的圆的东西","tags":["thinking"],"cover":{"publicURL":"/static/120fefa8e824de66889cf2e45b746ebe/wheel.jpg"},"series":"","draft":true,"original":true},"fields":{"id":"why-do-we-keep-building-wheels","slug":"/blog/2020/05/10/why-do-we-keep-building-wheels","type":"blog","date":"2020-05-10"}}},{"node":{"id":"6f125f9c-2618-512e-9a71-4df69bf960f8","frontmatter":{"title":"提效 50%，榨干 webpack","description":"我们的目标是：榨干 webpack","tags":["webpack"],"cover":{"publicURL":"/static/d221320d45d5d7ac530fe7af1ab4cd79/blank.jpg"},"series":"","draft":true,"original":true},"fields":{"id":"speed-up-your-build","slug":"/blog/2020/02/20/speed-up-your-build","type":"blog","date":"2020-02-20"}}},{"node":{"id":"d3336392-f32b-5510-a57b-101ed2d0d909","frontmatter":{"title":"基于 Sass 的主题定制方案","description":"本以为很简单的事情，然而……","tags":["css","sass","theme"],"cover":{"publicURL":"/static/d221320d45d5d7ac530fe7af1ab4cd79/blank.jpg"},"series":"","draft":true,"original":true},"fields":{"id":"custom-theme","slug":"/blog/2020/05/31/custom-theme","type":"blog","date":"2020-05-31"}}},{"node":{"id":"aad2bb3c-97c8-5c46-9510-206a702aef93","frontmatter":{"title":"Fridge 背后的故事","description":"能动手的，咱们尽量别吵吵","tags":["electron","iconfont","svg","fridge"],"cover":{"publicURL":"/static/d221320d45d5d7ac530fe7af1ab4cd79/blank.jpg"},"series":"","draft":true,"original":true},"fields":{"id":"story-behind-fridge","slug":"/blog/2020/08/11/story-behind-fridge","type":"blog","date":"2020-08-11"}}},{"node":{"id":"7895e729-cfea-58a7-87b8-d720f3130851","frontmatter":{"title":"GraphQL：从起飞到落地","description":"你经手的下一个项目，很可能就有它","tags":["design"],"cover":{"publicURL":"/static/d221320d45d5d7ac530fe7af1ab4cd79/blank.jpg"},"series":"","draft":true,"original":true},"fields":{"id":"adopting-graphql","slug":"/blog/2020/08/10/adopting-graphql","type":"blog","date":"2020-08-10"}}},{"node":{"id":"9b1edfe0-1c9a-5870-a750-4d415456e0fd","frontmatter":{"title":"Flutter 扫雷记","description":"穿上新买的鞋，走上复古的小路","tags":["flutter"],"cover":{"publicURL":"/static/b6ce1e63c11d6fddd7a988bfb312deb5/flutter.jpg"},"series":"","draft":true,"original":true},"fields":{"id":"learning-flutter","slug":"/blog/2020/04/03/learning-flutter","type":"blog","date":"2020-04-03"}}},{"node":{"id":"93194ae7-8949-5ba1-96f6-5935a746f504","frontmatter":{"title":"除了 SSR，就没有别的办法了吗","description":"当 MVVM 遇上 SEO，该如何是好","tags":["static","site","gatsby","pug"],"cover":{"publicURL":"/static/c2ac5cf49eafd77a1b2ce1fab7f53515/explore-static-site-generation.jpg"},"series":"","draft":false,"original":true},"fields":{"id":"explore-static-site-generation","slug":"/blog/2019/02/07/explore-static-site-generation","type":"blog","date":"2019-02-07"}}},{"node":{"id":"711fcaa8-350a-581f-9182-83af7a066ef3","frontmatter":{"title":"设计一套乐观更新机制","description":"做人呐，最重要的就是乐观啦","tags":["design","optimistic","update"],"cover":{"publicURL":"/static/92603cdac7e5c420caea18ea2c459646/optimistic-update.jpg"},"series":"","draft":false,"original":true},"fields":{"id":"building-an-optimisic-update-mechanism","slug":"/blog/2020/07/13/building-an-optimisic-update-mechanism","type":"blog","date":"2020-07-13"}}},{"node":{"id":"5438f8b3-6d57-508a-bfb4-668398c3fea0","frontmatter":{"title":"你可能已经知道的 ES 2018 和 2019","description":"好饭不怕晚","tags":["ecmascript","2018","2019"],"cover":{"publicURL":"/static/5646b4878e533cd7c725ce4c17984071/es2019.jpg"},"series":"","draft":false,"original":true},"fields":{"id":"es2018-and-es2019","slug":"/blog/2019/02/11/es2018-and-es2019","type":"blog","date":"2019-02-11"}}},{"node":{"id":"1c7d5f58-bf2f-52ca-88b0-c53c8e639257","frontmatter":{"title":"如何 Think in Hooks","description":"差不多是时候该换换脑子了","tags":["react","hooks"],"cover":{"publicURL":"/static/26d13ef2591ee05a3c4bba7fc34daa88/think-in-hooks.jpg"},"series":"","draft":false,"original":true},"fields":{"id":"how-to-think-in-hooks","slug":"/blog/2019/02/15/how-to-think-in-hooks","type":"blog","date":"2019-02-15"}}},{"node":{"id":"1380bd6b-1af2-5b4b-a1ba-b2306f104cca","frontmatter":{"title":"【译】我们为什么要写 super(props)?","description":"好像知道，又好像不知道","tags":["react"],"cover":{"publicURL":"/static/9fbf74366dc5b9e4aab57572a9f0470d/overreacted.jpg"},"series":"overreacted","draft":false,"original":false},"fields":{"id":"why-do-we-write-super-props","slug":"/blog/2019/02/22/why-do-we-write-super-props","type":"blog","date":"2019-02-22"}}},{"node":{"id":"7e2c164b-3855-5c39-9077-10a1c6d95461","frontmatter":{"title":"【译】React 如何区分 Class 和 Function？","description":"所谓的简单，只是因为有人帮你把复杂的问题给解决掉了","tags":["react"],"cover":{"publicURL":"/static/9fbf74366dc5b9e4aab57572a9f0470d/overreacted.jpg"},"series":"overreacted","draft":false,"original":false},"fields":{"id":"how-does-react-tell-a-class-from-a-function","slug":"/blog/2019/03/06/how-does-react-tell-a-class-from-a-function","type":"blog","date":"2019-03-06"}}},{"node":{"id":"273757fd-f6c0-5927-a4a5-8ad1d5a0fe08","frontmatter":{"title":"探索 React 组件之间的生命周期","description":"有时候，生活就是一团麻","tags":["react","lifecycle"],"cover":{"publicURL":"/static/0edf69056144aaf512a28d0670b53b57/react-lifecycle.jpg"},"series":"","draft":false,"original":true},"fields":{"id":"react-lifecycle","slug":"/blog/2019/05/02/react-lifecycle","type":"blog","date":"2019-05-02"}}},{"node":{"id":"1689b67b-a5fc-5bd1-92ec-437e8651321b","frontmatter":{"title":"TypeScript：又一个终将逝去的青春","description":"你，轰轰烈烈地来；你，平平淡淡地走。","tags":["typescript"],"cover":{"publicURL":"/static/b7b7642447ca6a5b28abf9f90bf06ef8/typescript-another-fading-youth.jpg"},"series":"","draft":false,"original":true},"fields":{"id":"typescript-another-fading-youth","slug":"/blog/2019/10/10/typescript-another-fading-youth","type":"blog","date":"2019-10-10"}}},{"node":{"id":"aa911d0a-c6f8-5b75-a468-7b98fec25ce4","frontmatter":{"title":"重新 Think in Hooks","description":"忘记过去之所学，我们从头来过","tags":["react","hooks"],"cover":{"publicURL":"/static/f9fcd719dcab55af4a1ad3d3cfbe0585/rethink-in-hooks.jpg"},"series":"","draft":false,"original":true},"fields":{"id":"rethink-in-hooks","slug":"/blog/2019/05/27/rethink-in-hooks","type":"blog","date":"2019-05-27"}}},{"node":{"id":"da18a414-9b36-5dc7-92d5-792baf93a0ec","frontmatter":{"title":"TypeScript 次日指南","description":"坑这种东西，是不会写在文档上的","tags":["typescript"],"cover":{"publicURL":"/static/8239307adc5ccdfc32320e1bcadb6300/typescript.jpg"},"series":"","draft":false,"original":true},"fields":{"id":"typescript-the-second-day","slug":"/blog/2019/07/28/typescript-the-second-day","type":"blog","date":"2019-07-28"}}},{"node":{"id":"a36d090f-1508-57bd-9957-902b4d03d960","frontmatter":{"title":"Homebrew 也有后悔药：回退一次小版本更新","description":"有了后悔药，可劲随便造","tags":["homebrew"],"cover":{"publicURL":"/static/2cd1cc709ca5d68b1a1fb9eb6283b820/homebrew.jpg"},"series":"","draft":false,"original":true},"fields":{"id":"how-to-downgrade-from-homebrew","slug":"/blog/2019/10/11/how-to-downgrade-from-homebrew","type":"blog","date":"2019-10-11"}}},{"node":{"id":"e534c1a6-0c0c-5fea-a0b2-f1abb3d10d3f","frontmatter":{"title":"每天一点ES6(15)：Promise","description":"对你的承诺，永远不变","tags":["ecmascript","2015","es6","javascript","promise"],"cover":{"publicURL":"/static/0950334fb8899f1006423341cbfeecb9/es6daily.jpg"},"series":"es6daily","draft":false,"original":true},"fields":{"id":"es6-daily-15-promise","slug":"/blog/2018/03/04/es6-daily-15-promise","type":"blog","date":"2018-03-04"}}},{"node":{"id":"2f1ddce6-841e-55c2-a557-50b5ec3c3713","frontmatter":{"title":"每天一点ES6(16)：Generator","description":"一起来摩擦摩擦发电吧","tags":["ecmascript","2015","es6","javascript","promise"],"cover":{"publicURL":"/static/0950334fb8899f1006423341cbfeecb9/es6daily.jpg"},"series":"es6daily","draft":false,"original":true},"fields":{"id":"es6-daily-16-generator","slug":"/blog/2018/06/14/es6-daily-16-generator","type":"blog","date":"2018-06-14"}}},{"node":{"id":"d76a7f7d-008f-5bb2-a930-639213185d5c","frontmatter":{"title":"每天一点ES6(14)：Iterator","description":"遍历也能搞出花来，怎么遍历你说了算","tags":["ecmascript","2015","es6","javascript","iterator","generator"],"cover":{"publicURL":"/static/0950334fb8899f1006423341cbfeecb9/es6daily.jpg"},"series":"es6daily","draft":false,"original":true},"fields":{"id":"es6-daily-14-iterator","slug":"/blog/2018/02/28/es6-daily-14-iterator","type":"blog","date":"2018-02-28"}}},{"node":{"id":"fe9e19f8-efc1-5d7b-b35e-c2e504114e3a","frontmatter":{"title":"每天一点ES6(17)：Async / Await","description":"异步？先等等！","tags":["ecmascript","2015","es6","javascript","async","await","generator"],"cover":{"publicURL":"/static/0950334fb8899f1006423341cbfeecb9/es6daily.jpg"},"series":"es6daily","draft":false,"original":true},"fields":{"id":"es6-daily-17-async-await","slug":"/blog/2018/10/06/es6-daily-17-async-await","type":"blog","date":"2018-10-06"}}},{"node":{"id":"2c5d0720-ba96-51b5-b9c5-09ee319ac666","frontmatter":{"title":"TradingView + WebSocket 脱坑指南","description":"让我来告诉你，K 线到底该怎么画","tags":["tradingview","chart","library","guide","websocket","webworker","ohlc","kchart"],"cover":{"publicURL":"/static/1ceaf53d99815784a18273970e741bfd/tradingview.jpg"},"series":"","draft":false,"original":true},"fields":{"id":"tradingview-charting-library-simple-guide","slug":"/blog/2018/09/22/tradingview-charting-library-simple-guide","type":"blog","date":"2018-09-22"}}},{"node":{"id":"7cad0010-d083-5470-9782-5bf8effe4971","frontmatter":{"title":"一个非著名前端开发者的 2019","description":"感谢曾经努力的自己","tags":["summary","2019","2020"],"cover":{"publicURL":"/static/1011f23d2ed2635035a07878c03ed1da/summary-2019.jpg"},"series":"summary","draft":false,"original":true},"fields":{"id":"summary-2019","slug":"/blog/2019/12/31/summary-2019","type":"blog","date":"2019-12-31"}}},{"node":{"id":"6bf194a4-a039-5e1f-b22c-d5d61bde30fb","frontmatter":{"title":"每天一点ES6(19)：Module","description":"可能是 ES6 中对未来影响最大的一项改变","tags":["ecmascript","2015","es6","javascript","module","import","export"],"cover":{"publicURL":"/static/0950334fb8899f1006423341cbfeecb9/es6daily.jpg"},"series":"es6daily","draft":false,"original":true},"fields":{"id":"es6-daily-19-module","slug":"/blog/2018/12/19/es6-daily-19-module","type":"blog","date":"2018-12-19"}}},{"node":{"id":"902bdc4e-f005-5757-8b6c-1a7b5a9bbfac","frontmatter":{"title":"每天一点ES6(18)：Class","description":"这回总没人质疑 JS 不是面向对象了吧？","tags":["ecmascript","2015","es6","javascript","class"],"cover":{"publicURL":"/static/0950334fb8899f1006423341cbfeecb9/es6daily.jpg"},"series":"es6daily","draft":false,"original":true},"fields":{"id":"es6-daily-18-class","slug":"/blog/2018/12/17/es6-daily-18-class","type":"blog","date":"2018-12-17"}}},{"node":{"id":"916ca434-4243-579e-bfc0-9619e1ec5e24","frontmatter":{"title":"一个非著名前端开发者的 2018","description":"资本寒冬大概是属燕子的吧，一到年末出现","tags":["summary","2018","2019"],"cover":{"publicURL":"/static/0e9c38c3d5d6b94d53a8dee2a7bdfbae/summary-2018.jpg"},"series":"summary","draft":false,"original":true},"fields":{"id":"summary-2018","slug":"/blog/2018/12/31/summary-2018","type":"blog","date":"2018-12-31"}}},{"node":{"id":"034170ee-35c3-5e70-97bd-1be86317f096","frontmatter":{"title":"解决 macOS 下 MySQL 2002 错误","description":"MySQL 真是个磨人的小妖精","tags":["mac","mysql","2002"],"cover":{"publicURL":"/static/6f1abf9c085f6538df6bced86e008157/mysql-error-2002.jpg"},"series":"","draft":false,"original":true},"fields":{"id":"mysql-error-2002","slug":"/blog/2017/02/07/mysql-error-2002","type":"blog","date":"2017-02-07"}}},{"node":{"id":"14303392-eb0b-52ed-bbdd-b99f7e55381c","frontmatter":{"title":"记 new Date().toString() 的一个坑","description":"万万没想到，竟在这里踩了个坑……","tags":["javascript","date","tostring"],"cover":{"publicURL":"/static/e192283893c7e97feb631571134bb805/date-tostring.jpg"},"series":"","draft":false,"original":true},"fields":{"id":"a-pit-in-date-tostring","slug":"/blog/2017/03/08/a-pit-in-date-tostring","type":"blog","date":"2017-03-08"}}},{"node":{"id":"14d7c2fb-7a6d-587c-8ef2-268e8dd08821","frontmatter":{"title":"PHP 处理多源 CORS 的解决办法","description":"一个老生常谈的话题，碰到了顺便记录一下","tags":["php","cors"],"cover":{"publicURL":"/static/77fc63594cf3a06c31921df671acd258/cors.jpg"},"series":"","draft":false,"original":true},"fields":{"id":"multi-origin-cors-with-php","slug":"/blog/2017/03/30/multi-origin-cors-with-php","type":"blog","date":"2017-03-30"}}},{"node":{"id":"25b0a05a-f39a-5475-b2fb-6e890024a76f","frontmatter":{"title":"每天一点ES6(10)：对象的扩展","description":"迟来的更新……","tags":["ecmascript","2015","es6","javascript","object"],"cover":{"publicURL":"/static/0950334fb8899f1006423341cbfeecb9/es6daily.jpg"},"series":"es6daily","draft":false,"original":true},"fields":{"id":"es6-daily-10-object","slug":"/blog/2017/04/05/es6-daily-10-object","type":"blog","date":"2017-04-05"}}},{"node":{"id":"d7c2c685-5279-5f45-a60e-ac1bedb7ad3b","frontmatter":{"title":"iOS 下 click() 无效的问题","description":"iOS这个傲娇的小公举","tags":["ios","click"],"cover":{"publicURL":"/static/f79051a5758b8a973902b2e5d190b714/ios-click.jpg"},"series":"","draft":false,"original":true},"fields":{"id":"unable-to-trigger-click-on-ios","slug":"/blog/2017/03/31/unable-to-trigger-click-on-ios","type":"blog","date":"2017-03-31"}}},{"node":{"id":"841173f9-3c99-5b6d-90b0-edc1bc03200d","frontmatter":{"title":"Leetcode 第一刷：Two Sum","description":"都闪开，我要开始装逼了","tags":["leetcode","two","sum"],"cover":{"publicURL":"/static/1aa86b8eea674fca29117e535cfba751/leetcode.jpg"},"series":"","draft":false,"original":true},"fields":{"id":"leetcode-01-two-sum","slug":"/blog/2017/04/11/leetcode-01-two-sum","type":"blog","date":"2017-04-11"}}},{"node":{"id":"3c675b7a-e654-516b-a3e2-84f8428baf16","frontmatter":{"title":"Webpack \"Invalid Host Header\"","description":"更新有风险，更新需谨慎……","tags":["webpack","dev","server","invalid","host"],"cover":{"publicURL":"/static/977bc2ebe23a9b6b10fdac4b470847b8/webpack-dev-server.jpg"},"series":"","draft":false,"original":true},"fields":{"id":"webpack-dev-server-invalid-host-header","slug":"/blog/2017/05/04/webpack-dev-server-invalid-host-header","type":"blog","date":"2017-05-04"}}},{"node":{"id":"03a55c90-b656-5fbe-9802-7bacfc9dfda6","frontmatter":{"title":"Electron 安装出坑指南","description":"世界本无坑，用的人多了，也就有了坑","tags":["electron"],"cover":{"publicURL":"/static/a9838665d68ab68d327e48d8720bac3f/electron.jpg"},"series":"","draft":false,"original":true},"fields":{"id":"electron-install-guide","slug":"/blog/2017/07/06/electron-install-guide","type":"blog","date":"2017-07-06"}}},{"node":{"id":"28a799ed-61ac-5c52-ac1f-57be84d09783","frontmatter":{"title":"每天一点ES6(11)：Symbol","description":"原始类型家族的新成员","tags":["ecmascript","2015","es6","javascript","symbol"],"cover":{"publicURL":"/static/0950334fb8899f1006423341cbfeecb9/es6daily.jpg"},"series":"es6daily","draft":false,"original":true},"fields":{"id":"es6-daily-11-symbol","slug":"/blog/2017/07/02/es6-daily-11-symbol","type":"blog","date":"2017-07-02"}}},{"node":{"id":"6bcc4eb9-0018-5fd7-9319-75b1666de383","frontmatter":{"title":"每天一点ES6(12)：Set 和 Map","description":"多余的，一概不要","tags":["ecmascript","2015","es6","javascript","map","set"],"cover":{"publicURL":"/static/0950334fb8899f1006423341cbfeecb9/es6daily.jpg"},"series":"es6daily","draft":false,"original":true},"fields":{"id":"es6-daily-12-set-and-map","slug":"/blog/2017/07/03/es6-daily-12-set-and-map","type":"blog","date":"2017-07-03"}}},{"node":{"id":"429d3de7-b673-59b4-9374-bd47be2d84e8","frontmatter":{"title":"ECMAScript 2017 正式到来","description":"ES 的世界开始日趋平静","tags":["ecmascript","2017","es8","javascript"],"cover":{"publicURL":"/static/77b7677386d27526bcb0b2687218f3f1/es2017.jpg"},"series":"","draft":false,"original":true},"fields":{"id":"ecmascript-2017-is-here","slug":"/blog/2017/07/12/ecmascript-2017-is-here","type":"blog","date":"2017-07-12"}}},{"node":{"id":"83d556ea-b054-54d2-8f01-0503872c8be2","frontmatter":{"title":"Node.js 9.0.0 发布","description":"一转眼，又半年过去了","tags":["nodejs","release"],"cover":{"publicURL":"/static/86f3115cebbb8dd82646ff1d231fa317/nodejs-9-release.jpg"},"series":"","draft":false,"original":true},"fields":{"id":"nodejs-9-release","slug":"/blog/2017/11/01/nodejs-9-release","type":"blog","date":"2017-11-01"}}},{"node":{"id":"941cfa8a-fc4c-558a-81b8-6eaeedcd29c8","frontmatter":{"title":"童话说 V2.0 改版小结","description":"时隔多年，终于换新面貌了","tags":["blog","2.0","update"],"cover":{"publicURL":"/static/630ee6fc7ad1be564eebffb0e0dd447d/introducing-ths-v2.jpg"},"series":"","draft":false,"original":true},"fields":{"id":"introducing-ths-v2","slug":"/blog/2017/08/12/introducing-ths-v2","type":"blog","date":"2017-08-12"}}},{"node":{"id":"ad555a36-adb9-5bd6-b1f5-6f3c4640c27b","frontmatter":{"title":"TypeScript + Vue 踩坑纪实","description":"坑这种东西，多踩踩就平了","tags":["typescript","vue"],"cover":{"publicURL":"/static/fe6f5086d26293f21adf217a84141fd6/guide-for-vue-with-typescript.jpg"},"series":"","draft":false,"original":true},"fields":{"id":"guide-for-vue-with-typescript","slug":"/blog/2017/10/26/guide-for-vue-with-typescript","type":"blog","date":"2017-10-26"}}},{"node":{"id":"7a5bf0b6-4306-57ea-8aa7-c25f84b2e3fd","frontmatter":{"title":"每天一点ES6(13)：Proxy 和 Reflect","description":"对不起，有代理真就是可以为所欲为","tags":["ecmascript","2015","es6","javascript","proxy","reflect"],"cover":{"publicURL":"/static/0950334fb8899f1006423341cbfeecb9/es6daily.jpg"},"series":"es6daily","draft":false,"original":true},"fields":{"id":"es6-daily-13-proxy-and-reflect","slug":"/blog/2017/12/20/es6-daily-13-proxy-and-reflect","type":"blog","date":"2017-12-20"}}},{"node":{"id":"937ef5fa-f090-5154-9e5a-07ac71c21abd","frontmatter":{"title":"一个非著名前端开发者的 2017","description":"哎 ~ 又一年过去了","tags":["summary","2017","2018"],"cover":{"publicURL":"/static/0d96380257d25f6b398d9bc8e47af5a1/summary-2017.jpg"},"series":"summary","draft":false,"original":true},"fields":{"id":"summary-2017","slug":"/blog/2017/12/29/summary-2017","type":"blog","date":"2017-12-29"}}},{"node":{"id":"8d61cd08-e710-556d-9e07-027c78d1f981","frontmatter":{"title":"每天一点ES6(1)：概述","description":"伊艾斯6大法好，每天一点不会老！","tags":["ecmascript","2015","es6","javascript"],"cover":{"publicURL":"/static/0950334fb8899f1006423341cbfeecb9/es6daily.jpg"},"series":"es6daily","draft":false,"original":true},"fields":{"id":"es6-daily-01-intro","slug":"/blog/2016/01/24/es6-daily-01-intro","type":"blog","date":"2016-01-24"}}},{"node":{"id":"4c8921a6-6cf1-55ce-92ff-2db25424d835","frontmatter":{"title":"每天一点ES6(3)：解构赋值","description":"让你一次赋个够","tags":["ecmascript","2015","es6","javascript","destructuring"],"cover":{"publicURL":"/static/0950334fb8899f1006423341cbfeecb9/es6daily.jpg"},"series":"es6daily","draft":false,"original":true},"fields":{"id":"es6-daily-03-destructuring","slug":"/blog/2016/02/02/es6-daily-03-destructuring","type":"blog","date":"2016-02-02"}}},{"node":{"id":"748c4aaa-f157-5f73-b098-822449e3e5fd","frontmatter":{"title":"电梯调度算法","description":"上上下下的感受","tags":["elevator","algorithm","project"],"cover":{"publicURL":"/static/7b7f4cefe4c7bf293ff2cdb266af33d9/elevator.jpg"},"series":"","draft":false,"original":true},"fields":{"id":"elevator","slug":"/blog/2016/02/16/elevator","type":"blog","date":"2016-02-16"}}},{"node":{"id":"23292539-577c-5367-a046-dcd590f4dd9e","frontmatter":{"title":"每天一点ES6(4)：Babel","description":"《圣经》的光辉，永恒！","tags":["ecmascript","2015","es6","javascript","babel","npm"],"cover":{"publicURL":"/static/0950334fb8899f1006423341cbfeecb9/es6daily.jpg"},"series":"es6daily","draft":false,"original":true},"fields":{"id":"es6-daily-04-babel","slug":"/blog/2016/02/19/es6-daily-04-babel","type":"blog","date":"2016-02-19"}}},{"node":{"id":"741e8e7b-be5c-5e76-8b7e-de57174d490e","frontmatter":{"title":"每天一点ES6(5)：字符串的扩展","description":"不变的字符串现在更加多变了","tags":["ecmascript","2015","es6","javascript","string"],"cover":{"publicURL":"/static/0950334fb8899f1006423341cbfeecb9/es6daily.jpg"},"series":"es6daily","draft":false,"original":true},"fields":{"id":"es6-daily-05-string","slug":"/blog/2016/04/05/es6-daily-05-string","type":"blog","date":"2016-04-05"}}},{"node":{"id":"64eae26e-fc44-5e11-b686-c51cde2dea6a","frontmatter":{"title":"每天一点ES6(6)：正则的扩展","description":"四字节 Unicode 的春天","tags":["ecmascript","2015","es6","javascript","regular","expression","regexp"],"cover":{"publicURL":"/static/0950334fb8899f1006423341cbfeecb9/es6daily.jpg"},"series":"es6daily","draft":false,"original":true},"fields":{"id":"es6-daily-06-regexp","slug":"/blog/2016/04/06/es6-daily-06-regexp","type":"blog","date":"2016-04-06"}}},{"node":{"id":"b97439aa-2e04-574e-8a3c-f2ae98ab05dc","frontmatter":{"title":"每天一点ES6(2)：let 和 const","description":"终于，JavaScript 也能用上块级作用域和常量了","tags":["ecmascript","2015","es6","javascript","let","const"],"cover":{"publicURL":"/static/0950334fb8899f1006423341cbfeecb9/es6daily.jpg"},"series":"es6daily","draft":false,"original":true},"fields":{"id":"es6-daily-02-let-and-const","slug":"/blog/2016/01/25/es6-daily-02-let-and-const","type":"blog","date":"2016-01-25"}}},{"node":{"id":"ac9d5bb7-c4df-5f1a-a3da-5fbdeae86177","frontmatter":{"title":"5 分钟彻底明白 JSONP","description":"说穿了，其实没那么难","tags":["javascript","jsonp"],"cover":{"publicURL":"/static/f8f2d118b15646398f7d00e19eb17ff9/jsonp.jpg"},"series":"","draft":false,"original":true},"fields":{"id":"jsonp","slug":"/blog/2016/08/17/jsonp","type":"blog","date":"2016-08-17"}}},{"node":{"id":"6572f129-a62e-5cc5-8f87-be06f67a0bda","frontmatter":{"title":"每天一点ES6(7)：数值的扩展","description":"每一个数字都不能放过","tags":["ecmascript","2015","es6","javascript","number"],"cover":{"publicURL":"/static/0950334fb8899f1006423341cbfeecb9/es6daily.jpg"},"series":"es6daily","draft":false,"original":true},"fields":{"id":"es6-daily-07-number","slug":"/blog/2016/04/12/es6-daily-07-number","type":"blog","date":"2016-04-12"}}},{"node":{"id":"7ee25fb2-ea5c-58c2-a8ac-6b42f8693a6d","frontmatter":{"title":"每天一点ES6(8)：数组的扩展","description":"别拿语法糖不当干粮","tags":["ecmascript","2015","es6","javascript","array"],"cover":{"publicURL":"/static/0950334fb8899f1006423341cbfeecb9/es6daily.jpg"},"series":"es6daily","draft":false,"original":true},"fields":{"id":"es6-daily-08-array","slug":"/blog/2016/07/26/es6-daily-08-array","type":"blog","date":"2016-07-26"}}},{"node":{"id":"4ad27401-b0f3-5269-ae01-3a2ad2dcfbfc","frontmatter":{"title":"每天一点ES6(9)：函数的扩展","description":"博采众长的实用语法糖","tags":["ecmascript","2015","es6","javascript","function"],"cover":{"publicURL":"/static/0950334fb8899f1006423341cbfeecb9/es6daily.jpg"},"series":"es6daily","draft":false,"original":true},"fields":{"id":"es6-daily-09-function","slug":"/blog/2016/12/20/es6-daily-09-function","type":"blog","date":"2016-12-20"}}},{"node":{"id":"5e1e4ab1-d9cd-5c67-bd5d-69efb1c8dfaa","frontmatter":{"title":"一个非著名前端开发者的 2016","description":"回顾 2016，是充实的一年，不负青春。2017 加油继续！","tags":["summary","2016","2017"],"cover":{"publicURL":"/static/d4bc85d6ff1aa8985e03c3875f90ea51/summary-2016.jpg"},"series":"summary","draft":false,"original":true},"fields":{"id":"summary-2016","slug":"/blog/2016/12/31/summary-2016","type":"blog","date":"2016-12-31"}}},{"node":{"id":"eb3ee752-691c-5a06-a50b-6a96899697ce","frontmatter":{"title":"时间是什么颜色的","description":"如果时间有颜色……","tags":["color","time","project"],"cover":{"publicURL":"/static/03c874556dd31d9db5f30b7609751b92/tik-tok-color.jpg"},"series":"","draft":false,"original":true},"fields":{"id":"tik-tok-color","slug":"/blog/2015/02/11/tik-tok-color","type":"blog","date":"2015-02-11"}}},{"node":{"id":"b947a112-1719-5c1e-973b-2857833f2145","frontmatter":{"title":"我的数组返回了啥","description":"功夫再高，一针下去也得倒","tags":["javascript","array"],"cover":{"publicURL":"/static/805a58ee0da37d1812988339eb18df47/array.jpg"},"series":"","draft":true,"original":true},"fields":{"id":"what-does-my-array-return","slug":"/blog/2020/02/30/what-does-my-array-return","type":"blog","date":"2020-02-30"}}},{"node":{"id":"d896acb5-2868-5534-a355-63e02b49a0ae","frontmatter":{"title":"栈计算器","description":"通过“栈”实现的方程式计算器","tags":["stack","calculator","algorithm","project"],"cover":{"publicURL":"/static/256bbf9439e7f58974c946bc16f54832/stack-calculator.jpg"},"series":"","draft":false,"original":true},"fields":{"id":"stack-calculator","slug":"/blog/2015/02/10/stack-calculator","type":"blog","date":"2015-02-10"}}},{"node":{"id":"7499c4c1-4f63-5811-a96a-86630b44e5b9","frontmatter":{"title":"使用 Sublime Text 编写 LaTeX","description":"用你最熟悉的工具来写 LaTeX 吧","tags":["sublime","latex"],"cover":{"publicURL":"/static/e7689b7e9fe6160a6ed614a10125ca29/latex-with-sublime-text.jpg"},"series":"","draft":false,"original":true},"fields":{"id":"latex-with-sublime-text","slug":"/blog/2015/04/01/latex-with-sublime-text","type":"blog","date":"2015-04-01"}}},{"node":{"id":"e984ad39-2991-5a05-aa84-1dffb097c4c0","frontmatter":{"title":"substr() 和 substring() 的区别","description":"两个函数，傻傻分不清楚","tags":["javascript","substr","substring","slice"],"cover":{"publicURL":"/static/289ad52fc38963e15549cd1dc24678e4/substring.jpg"},"series":"","draft":false,"original":true},"fields":{"id":"substr-and-substring","slug":"/blog/2015/05/15/substr-and-substring","type":"blog","date":"2015-05-15"}}},{"node":{"id":"f8806a62-d0b4-55b9-8d0e-cf83410ec466","frontmatter":{"title":"纯 CSS3 绘制月饼","description":"中秋佳节，用CSS3来画个月饼吧","tags":["css","mooncake","project"],"cover":{"publicURL":"/static/9aaefaae86216c79623893c080f1ccc2/css3-mooncake.jpg"},"series":"","draft":false,"original":true},"fields":{"id":"css3-mooncake","slug":"/blog/2015/09/27/css3-mooncake","type":"blog","date":"2015-09-27"}}},{"node":{"id":"ffc4262c-5033-521b-b3d3-025203bb12eb","frontmatter":{"title":"MIUI 图标缓存问题","description":"离奇失踪的图标","tags":["android","miui","icon","cache"],"cover":{"publicURL":"/static/2e66c31a61d5319c1849ea082e8c80ee/miui-icon-cache.jpg"},"series":"","draft":false,"original":true},"fields":{"id":"miui-icon-cache","slug":"/blog/2015/04/18/miui-icon-cache","type":"blog","date":"2015-04-18"}}}]},"markdownRemark":{"html":"<h2>过去</h2>\n<p>从我们学习 JavaScript 的第一天起，我们就被告知，JavaScript 是面向对象的，虽然它的语法和传统的 C 风格相去甚远，甚至有人并不认可 JavaScript 是面向对象的。但不管怎么说，这并不影响我们使用 JavaScript 去实现面向对象。</p>\n<p>在过去（也就是 ES6 之前的时代），我们使用这样的语法来定义一个类：</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre style=\"counter-reset: linenumber NaN\" class=\"gatsby-code-js line-numbers\"><code class=\"gatsby-code-js\"><span class=\"token keyword\">function</span> <span class=\"token function\">Point</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">x<span class=\"token punctuation\">,</span> y</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>x <span class=\"token operator\">=</span> x\n  <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>y <span class=\"token operator\">=</span> y\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token class-name\">Point</span><span class=\"token punctuation\">.</span>prototype<span class=\"token punctuation\">.</span><span class=\"token function-variable function\">toString</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">return</span> <span class=\"token string\">'('</span> <span class=\"token operator\">+</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>x <span class=\"token operator\">+</span> <span class=\"token string\">', '</span> <span class=\"token operator\">+</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>y <span class=\"token operator\">+</span> <span class=\"token string\">')'</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">var</span> p <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Point</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">)</span></code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n<p>如今，你依然可以通过这种方式去定义一个类，当然我推荐你一个更好的方式：</p>\n<h2>现在</h2>\n<p>ES6 对开发者影响最大的改变之一，就是改变了类定义的语法（或者说“新增”比较合适，毕竟老的依然能用，只是不再推荐），使得在 JavaScript 中定义类的语法更加接近 C 风格，现在你可以使用如下的代码来重写上面的代码：</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre style=\"counter-reset: linenumber NaN\" class=\"gatsby-code-js line-numbers\"><code class=\"gatsby-code-js\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">Point</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token function\">constructor</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">x<span class=\"token punctuation\">,</span> y</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>x <span class=\"token operator\">=</span> x\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>y <span class=\"token operator\">=</span> y\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token function\">toString</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> <span class=\"token string\">'('</span> <span class=\"token operator\">+</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>x <span class=\"token operator\">+</span> <span class=\"token string\">', '</span> <span class=\"token operator\">+</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>y <span class=\"token operator\">+</span> <span class=\"token string\">')'</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n<p>运行一下，结果没有什么不同，但是语法看上去更符合我们的认知（请原谅一个毕业自常规本科教育的开发者的世界观）</p>\n<h2>语法糖</h2>\n<p>类定义语法的变更带给我的第一个疑虑是：我们接触了这么久的原型链机制，是否在 ES6 的新语法下也被改变了呢？并没有！</p>\n<p>新语法的加入并没有改变 JavaScript 基于原型链的本质，只是在语法上更加符合了 C 风格。上面代码中的 <code class=\"gatsby-code-text\">constructor</code> 和 <code class=\"gatsby-code-text\">toString</code> 其实就是 <code class=\"gatsby-code-text\">Point.prototype.constructor</code> 和 <code class=\"gatsby-code-text\">Point.prototype.toString</code> ，Point 本身的类型也还是函数（就是 <code class=\"gatsby-code-text\">constructor</code> ），一切只是换了个马甲而已，并没有本质上的区别。</p>\n<p>如果我们把两种语法的代码整理成下面的样子，一切就很好理解了：</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre style=\"counter-reset: linenumber NaN\" class=\"gatsby-code-js line-numbers\"><code class=\"gatsby-code-js\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">Point</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token function\">constructor</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">// ...</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token function\">toString</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">// ...</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token function\">toValue</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">// ...</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\">// 等同于</span>\n\n<span class=\"token class-name\">Point</span><span class=\"token punctuation\">.</span>prototype <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token function\">constructor</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n  <span class=\"token function\">toString</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n  <span class=\"token function\">toValue</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n<h2>还是有变化的</h2>\n<p>新的语法在使用上同样也受到其它 ES6 特性的影响，例如：新语法定义的类方法是不可枚举的， <code class=\"gatsby-code-text\">Object.keys</code> 不会得到任何内容，但 <code class=\"gatsby-code-text\">Object.getOwnPropertyNames</code> 可以。类的属性名也可以采用表达式， <code class=\"gatsby-code-text\">[variable]</code> 是一个合法的属性名，具体取决于 <code class=\"gatsby-code-text\">variable</code> 变量的取值，当然这不仅仅局限于类，这是 ES6 中对象的新特性。</p>\n<h2>严格模式</h2>\n<p>类内部是采用严格模式的，事实上 ES6 的另一个新特性“模块”（我们会在下一篇讲到）也是基于严格模式的，考虑到从 ES6 开始的代码都是运行在模块之中，可以说 ES6 在语言层面上就是按照严格模式来设计的，我们在使用时候就直接默认遵循严格模式来就好了，不用再做区分了。</p>\n<h2>构造函数</h2>\n<p>类的构造函数可以为空，甚至省略（JS 引擎会自动创建一个空的构造函数，因此实际上等效于为空），默认返回实例对象，但允许指定返回另一个对象。</p>\n<p>类必须使用 <code class=\"gatsby-code-text\">new</code> 进行调用，不能像普通函数一样直接调用，否则会报错。</p>\n<h2>Class 表达式</h2>\n<p>和函数表达式类似，类也支持这样的写法：</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre style=\"counter-reset: linenumber NaN\" class=\"gatsby-code-js line-numbers\"><code class=\"gatsby-code-js\"><span class=\"token keyword\">const</span> MyClass <span class=\"token operator\">=</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Me</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token function\">getClassName</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> Me<span class=\"token punctuation\">.</span>name\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n<p>需要注意的是，和函数表达式一样， <code class=\"gatsby-code-text\">MyClass</code> 才是真正的类名， <code class=\"gatsby-code-text\">Me</code> 只在类内部可以作为一个内部代号，指代自身，在类外部是访问不到的。</p>\n<h2>立即执行的 Class</h2>\n<p>听说过立即执行函数吧，这个也差不多，同样是临时定义立即调用：</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre style=\"counter-reset: linenumber NaN\" class=\"gatsby-code-js line-numbers\"><code class=\"gatsby-code-js\"><span class=\"token keyword\">const</span> person <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">class</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token function\">constructor</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">name</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>name <span class=\"token operator\">=</span> name\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token function\">sayName</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>name<span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">(</span><span class=\"token string\">'张三'</span><span class=\"token punctuation\">)</span>\n\nperson<span class=\"token punctuation\">.</span><span class=\"token function\">sayName</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n<h2>变量不提升</h2>\n<p>类定义不存在变量提升，这一点有些特殊，但为了实现继承，这是必须的。</p>\n<p>从最佳实践的角度，为了不给开发过程埋坑，最好还是手动提升变量，即始终遵循“先定义后使用”的规则，绕开可能的变化。即便发生提升也会得到相同的结果。</p>\n<h2>私有属性和私有方法</h2>\n<p>在传统的 C 风格中，属性前面都会有 <code class=\"gatsby-code-text\">public</code> 、 <code class=\"gatsby-code-text\">protected</code> 、 <code class=\"gatsby-code-text\">private</code> 三大修饰符加持。虽然类语法的存在是为了让类定义的代码看起来更接近 C 风格，但 ES6 并没有加入这些修饰符，事实上，ES6 中类的属性和方法都还是公开的，虽然我们可以通过变量名前加下划线、立即执行函数、把私有变量移出模块等“自己骗自己”的方法来模拟，但这些都不是真正的私有。</p>\n<p>关于这个问题，有一个颇具争议但看样子依然会被写进标准的提案，建议在属性名前加 <code class=\"gatsby-code-text\">#</code> 来表示私有变量，并且在语言层面上支持私有变量。根据提案， <code class=\"gatsby-code-text\">#</code> 并不算是修饰符，而是变量名的一部分，也就是说 <code class=\"gatsby-code-text\">#x</code> 和 <code class=\"gatsby-code-text\">x</code> 是两个变量，虽然语法上允许这种形式的“重名”，但实际使用中建议还是避免这种骚操作。</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre style=\"counter-reset: linenumber NaN\" class=\"gatsby-code-js line-numbers\"><code class=\"gatsby-code-js\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">Point</span> <span class=\"token punctuation\">{</span>\n  #x\n\n  <span class=\"token function\">constructor</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">x <span class=\"token operator\">=</span> <span class=\"token number\">0</span></span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>#x <span class=\"token operator\">=</span> <span class=\"token operator\">+</span>x\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token keyword\">get</span> <span class=\"token function\">x</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>#x\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token keyword\">set</span> <span class=\"token function\">x</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">value</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>#x <span class=\"token operator\">=</span> value\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n<p>至于为什么会选择 <code class=\"gatsby-code-text\">#</code> 这个符号，据说主要有两个原因，一个是为了保留 JavaScript 是动态语言（没有类型申明）的特点， <code class=\"gatsby-code-text\">private</code> 不太适合，因此只能选择一个新的符号。Ruby 使用了 <code class=\"gatsby-code-text\">@</code> ，但 ES6 在此之前已经把 <code class=\"gatsby-code-text\">@</code> 用于了装饰器（后面文章会讲到），因此一通 pass 下来，好像就 <code class=\"gatsby-code-text\">#</code> 还不错，就它了。</p>\n<p>比较奇怪的是，尽管私有属性在实例上不可访问，但可以在类内部定义一个常规方法，接收一个实例作为参数，在方法中直接访问该实例的私有属性。这算是一个骚操作吧，不是很能理解为什么要这么设计，如果这个操作是通过调用 getter 函数来间接访问私有变量，似乎就合理多了。</p>\n<h2>this</h2>\n<p>类内部的 <code class=\"gatsby-code-text\">this</code> 一律指向类的实例，只要你不做什么骚操作，你几乎不用担心 <code class=\"gatsby-code-text\">this</code> 会指错。如果你非要展现自己风骚的一面，那就自求多福吧。（方法自然是有的，但你还是不知道的好，免得知道以后乱用）</p>\n<h2>name</h2>\n<p>由于类的本质依然是函数，因此函数的 <code class=\"gatsby-code-text\">name</code> 属性在类中依然适用，可以返回类名。</p>\n<h2>Generator</h2>\n<p>如果某个方法之前加上了 <code class=\"gatsby-code-text\">*</code> ，它就是一个 Generator 函数；特殊一点，如果这个方法名刚好叫 <code class=\"gatsby-code-text\">* [Symbol.iterator]</code> ，恭喜你，实例化这个类你就过得了一个遍历器，至于具体能遍历出啥来，就看你方法中怎么定义了。</p>\n<h2>静态方法</h2>\n<p>类语法支持定义静态方法，语法非常符合认知：（两种定义方法都可以）</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre style=\"counter-reset: linenumber NaN\" class=\"gatsby-code-js line-numbers\"><code class=\"gatsby-code-js\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">Foo</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">static</span> <span class=\"token function\">classMethod</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> <span class=\"token string\">'hello'</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\nFoo<span class=\"token punctuation\">.</span><span class=\"token function-variable function\">classMethod</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">return</span> <span class=\"token string\">'hello'</span>\n<span class=\"token punctuation\">}</span>\n\nFoo<span class=\"token punctuation\">.</span><span class=\"token function\">classMethod</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// 'hello'</span>\n\n<span class=\"token keyword\">const</span> foo <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Foo</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\nfoo<span class=\"token punctuation\">.</span><span class=\"token function\">classMethod</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// TypeError: foo.classMethod is not a function</span></code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n<p>注意，静态方法中的 <code class=\"gatsby-code-text\">this</code> 指向的是类本身，而不是实例，也就是这里的 <code class=\"gatsby-code-text\">this</code> 只能访问静态方法和静态变量。</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre style=\"counter-reset: linenumber NaN\" class=\"gatsby-code-js line-numbers\"><code class=\"gatsby-code-js\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">Foo</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">static</span> <span class=\"token function\">bar</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">baz</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token keyword\">static</span> <span class=\"token function\">baz</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'hello'</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token function\">baz</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'world'</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\nFoo<span class=\"token punctuation\">.</span><span class=\"token function\">bar</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// hello</span></code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n<h2>静态属性</h2>\n<p>ES6 规定类内部只有静态方法，没有静态属性，但后续的提案很快就把这块加上了。当然 ES5 的语法依然有效。</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre style=\"counter-reset: linenumber NaN\" class=\"gatsby-code-js line-numbers\"><code class=\"gatsby-code-js\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">Foo</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token comment\">// 实例属性</span>\n  instanceProp <span class=\"token operator\">=</span> <span class=\"token number\">1</span>\n\n  <span class=\"token comment\">// 静态属性（class 写法）</span>\n  <span class=\"token keyword\">static</span> prop <span class=\"token operator\">=</span> <span class=\"token number\">2</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\">// 静态属性（function 写法）</span>\nFoo<span class=\"token punctuation\">.</span>prop <span class=\"token operator\">=</span> <span class=\"token number\">2</span></code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n<h2>new.target</h2>\n<p>这算是一个骚操作吧——给关键字加属性。</p>\n<p>这个属性用在构造函数中（无论是 class 还是 function），返回 <code class=\"gatsby-code-text\">new</code> 命令作用于的那个构造函数，如果构造函数不是通过 <code class=\"gatsby-code-text\">new</code> 调用的， <code class=\"gatsby-code-text\">new.target</code> 会返回 <code class=\"gatsby-code-text\">undefined</code> 。</p>\n<p>这个属性可以用来确定构造函数是怎么调用的，比如强制构造函数只能用 <code class=\"gatsby-code-text\">new</code> 调用，或者强制某各类不能直接实例化，必须继承后才可实例化。（子类继承父类时， <code class=\"gatsby-code-text\">new.target</code> 返回子类）</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre style=\"counter-reset: linenumber NaN\" class=\"gatsby-code-js line-numbers\"><code class=\"gatsby-code-js\">fucntion <span class=\"token function\">Person</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">name</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token comment\">// new target === Person</span>\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span><span class=\"token punctuation\">.</span>target <span class=\"token operator\">!==</span> <span class=\"token keyword\">undefined</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>name <span class=\"token operator\">=</span> name\n  <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">// 限制必须使用 new 调用</span>\n    <span class=\"token keyword\">throw</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Error</span><span class=\"token punctuation\">(</span>'必须使用 <span class=\"token keyword\">new</span> 命令生成实例<span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">var</span> person <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Person</span><span class=\"token punctuation\">(</span><span class=\"token string\">'张三'</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// 正确</span>\n<span class=\"token keyword\">var</span> notAPerson <span class=\"token operator\">=</span> <span class=\"token function\">Person</span><span class=\"token punctuation\">.</span><span class=\"token function\">call</span><span class=\"token punctuation\">(</span>person<span class=\"token punctuation\">,</span> <span class=\"token string\">'张三'</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// 报错</span>\n\n<span class=\"token comment\">// 限制基类不可被实例化，必须继承</span>\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">Shape</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token function\">constructor</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span><span class=\"token punctuation\">.</span>taret <span class=\"token operator\">===</span> Shape<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token keyword\">throw</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Error</span><span class=\"token punctuation\">(</span><span class=\"token string\">'本类不能实例化'</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n<h2>继承</h2>\n<p>Class 提供了 <code class=\"gatsby-code-text\">extends</code> 关键字用于实现继承，相比修改原型链的写法，新语法更直观方便。</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre style=\"counter-reset: linenumber NaN\" class=\"gatsby-code-js line-numbers\"><code class=\"gatsby-code-js\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">Point</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token function\">toString</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> <span class=\"token string\">'Point'</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">ColorPoint</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">Point</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token function\">constructor</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">x<span class=\"token punctuation\">,</span> y<span class=\"token punctuation\">,</span> color</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">super</span><span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">,</span> y<span class=\"token punctuation\">)</span> <span class=\"token comment\">// 调用父类的 constructor(x, y)</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>color <span class=\"token operator\">=</span> color\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token function\">toString</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>color <span class=\"token operator\">+</span> <span class=\"token string\">' '</span> <span class=\"token operator\">+</span> <span class=\"token keyword\">super</span><span class=\"token punctuation\">.</span><span class=\"token function\">toString</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">//调用父类的 toString()</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n<p>子类构造函数中必须首先调用 <code class=\"gatsby-code-text\">super()</code> ，否则子类无法得到 <code class=\"gatsby-code-text\">this</code> 。子类自己的 <code class=\"gatsby-code-text\">this</code> 依赖于父类的 <code class=\"gatsby-code-text\">this</code> ，需要先得到父类同样的实例属性和方法，然后再覆盖以自己的实例属性和方法。</p>\n<p>子类可以省略构造函数，这个方法会被默认添加，并传入和父类构造函数相同的参数，等于直接取得父类中定义的内容。如果你需要自定义子类的实例化方式，就需要遵循上面的步骤，手动调用 <code class=\"gatsby-code-text\">super()</code> 。</p>\n<h2>继承机制</h2>\n<p>ES5 中，本质是先构造子类的 <code class=\"gatsby-code-text\">this</code> ，再添加父类的属性（ <code class=\"gatsby-code-text\">Parent.apply(this)</code> ），最后添加子类的属性。</p>\n<p>ES6 中，是先通过父类获取 <code class=\"gatsby-code-text\">this</code> ，再添加子类的属性，所以子类构造函数必须先调用 <code class=\"gatsby-code-text\">super()</code> 才能正常访问 <code class=\"gatsby-code-text\">this</code> 。</p>\n<h2>Object.getPrototypeOf()</h2>\n<p> <code class=\"gatsby-code-text\">Object.getPrototypeOf()</code> 用于获取一个子类的父类、（你或许见过用 <code class=\"gatsby-code-text\">__proto__</code> 来获取原型的方式，这是现代浏览器自己实现的快捷方式，不属于语言标准，Node.js 也不支持这样的语法，不建议使用）</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre style=\"counter-reset: linenumber NaN\" class=\"gatsby-code-js line-numbers\"><code class=\"gatsby-code-js\">Object<span class=\"token punctuation\">.</span><span class=\"token function\">getPrototypeOf</span><span class=\"token punctuation\">(</span>ColorPoint<span class=\"token punctuation\">)</span> <span class=\"token operator\">===</span> Point <span class=\"token comment\">// true</span></code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span></span></pre></div>\n<h2>super</h2>\n<p> <code class=\"gatsby-code-text\">super</code> 既可以作为函数（用在构造函数中，代表父类的构造函数，返回父类实例），也可以作为对象（用在子类实例方法中，指向父类的原型对象；用在子类静态方法中，指向父类）。</p>\n<p>当 <code class=\"gatsby-code-text\">super</code> 用作函数时，虽然它代表父类的构造函数，但返回的是子类的实例，即 <code class=\"gatsby-code-text\">super</code> 内部的 <code class=\"gatsby-code-text\">this</code> 指的是子类，因此 <code class=\"gatsby-code-text\">super</code> 相当于 <code class=\"gatsby-code-text\">Parent.prototype.constructor.call(this)</code> 。如果在父类的构造函数里执行 <code class=\"gatsby-code-text\">console.log(new.target.name)</code> ，则它的子类在执行 <code class=\"gatsby-code-text\">super()</code> 时这段代码会打出子类的构造函数，而不是父类。</p>\n<p>当 <code class=\"gatsby-code-text\">super</code> 出现在子类的实例方法中时，由于它指向父类的原型对象，因此只有定义在父类原型上的属性和方法才能被 <code class=\"gatsby-code-text\">super</code> 访问到（ <code class=\"gatsby-code-text\">Parent.prototype.XXX</code> ），定义在父类实例上的属性和方法 <code class=\"gatsby-code-text\">super</code> 是访问不到的。子类实例方法在通过 <code class=\"gatsby-code-text\">super</code> 调用父类方法时，方法内部的 <code class=\"gatsby-code-text\">this</code> 指向当前子类实例（ <code class=\"gatsby-code-text\">super.method.call(this)</code> ），如果通过 <code class=\"gatsby-code-text\">super</code> 对某个属性赋值（不太能想象什么场景下会这么做，因此还是避免这种骚操作比较好），这时的 <code class=\"gatsby-code-text\">super</code> 就是 <code class=\"gatsby-code-text\">this</code> ，即该属性被认为是子类的实例属性。通过这种方式定义的属性，在后续的代码中可以通过 <code class=\"gatsby-code-text\">this.XXX</code> 访问到，但如果访问 <code class=\"gatsby-code-text\">super.XXX</code> ，实际访问的是 <code class=\"gatsby-code-text\">Parent.prototype.XXX</code> 。</p>\n<p>当 <code class=\"gatsby-code-text\">spuer</code> 出现在子类的静态方法中时，由于它指向父类，因此只能访问到静态的属性和方法。子类静态方法中通过 <code class=\"gatsby-code-text\">super</code> 调用父类方法时，方法内部的 <code class=\"gatsby-code-text\">this</code> 指向子类，而不是子类的实例。</p>\n<p> <code class=\"gatsby-code-text\">super</code> 在使，用时必须显式地指定是作为函数还是对象使用，否则会报错（比如 <code class=\"gatsby-code-text\">console.log(super)</code> ）。一般情况下，在构造函数中用作函数，在方法中用作对象，应该是遇不到这类问题的。</p>\n<p>由于 JavaScript 中的对象总是继承自其他对象的，所以可以在任何对象中使用 <code class=\"gatsby-code-text\">super</code> 关键字。</p>\n<h2>小结</h2>\n<p>Class 的出现给我们写代码的方式带来了巨大的改变，但更多的是语法层面的改变。如果你来自 Java、C# 等传统编程语言，你会觉得一切都是那么的熟悉。</p>\n<p>原本的老方法得到了保留，如果你是个怀旧的人，你可以继续使用你熟悉的语法，但从发展的眼光来看，我们还是建议尽早迁移到新的语法。</p>\n<p>由于一些历史原因，JavaScript 的设计存在大量的缺陷，ES6 的发布掀起了对 JavaScript 大修补的热潮，现在的 JavaScript 正在集各家之所长，快速成长。</p>\n<p>下一篇，我们将探索可能是 ES6 中对未来影响最大的一项改变 —— 模块。</p>","frontmatter":{"title":"每天一点ES6(18)：Class","description":"这回总没人质疑 JS 不是面向对象了吧？","cover":{"publicURL":"/static/0950334fb8899f1006423341cbfeecb9/es6daily.jpg"},"tags":["ecmascript","2015","es6","javascript","class"],"series":"es6daily","draft":false},"fields":{"id":"es6-daily-18-class","date":"2018-12-17"},"headings":[{"value":"过去","depth":2},{"value":"现在","depth":2},{"value":"语法糖","depth":2},{"value":"还是有变化的","depth":2},{"value":"严格模式","depth":2},{"value":"构造函数","depth":2},{"value":"Class 表达式","depth":2},{"value":"立即执行的 Class","depth":2},{"value":"变量不提升","depth":2},{"value":"私有属性和私有方法","depth":2},{"value":"this","depth":2},{"value":"name","depth":2},{"value":"Generator","depth":2},{"value":"静态方法","depth":2},{"value":"静态属性","depth":2},{"value":"new.target","depth":2},{"value":"继承","depth":2},{"value":"继承机制","depth":2},{"value":"Object.getPrototypeOf()","depth":2},{"value":"super","depth":2},{"value":"小结","depth":2}],"tableOfContents":"<ul>\n<li><a href=\"/blog/2018/12/17/es6-daily-18-class/#%E8%BF%87%E5%8E%BB\">过去</a></li>\n<li><a href=\"/blog/2018/12/17/es6-daily-18-class/#%E7%8E%B0%E5%9C%A8\">现在</a></li>\n<li><a href=\"/blog/2018/12/17/es6-daily-18-class/#%E8%AF%AD%E6%B3%95%E7%B3%96\">语法糖</a></li>\n<li><a href=\"/blog/2018/12/17/es6-daily-18-class/#%E8%BF%98%E6%98%AF%E6%9C%89%E5%8F%98%E5%8C%96%E7%9A%84\">还是有变化的</a></li>\n<li><a href=\"/blog/2018/12/17/es6-daily-18-class/#%E4%B8%A5%E6%A0%BC%E6%A8%A1%E5%BC%8F\">严格模式</a></li>\n<li><a href=\"/blog/2018/12/17/es6-daily-18-class/#%E6%9E%84%E9%80%A0%E5%87%BD%E6%95%B0\">构造函数</a></li>\n<li><a href=\"/blog/2018/12/17/es6-daily-18-class/#class-%E8%A1%A8%E8%BE%BE%E5%BC%8F\">Class 表达式</a></li>\n<li><a href=\"/blog/2018/12/17/es6-daily-18-class/#%E7%AB%8B%E5%8D%B3%E6%89%A7%E8%A1%8C%E7%9A%84-class\">立即执行的 Class</a></li>\n<li><a href=\"/blog/2018/12/17/es6-daily-18-class/#%E5%8F%98%E9%87%8F%E4%B8%8D%E6%8F%90%E5%8D%87\">变量不提升</a></li>\n<li><a href=\"/blog/2018/12/17/es6-daily-18-class/#%E7%A7%81%E6%9C%89%E5%B1%9E%E6%80%A7%E5%92%8C%E7%A7%81%E6%9C%89%E6%96%B9%E6%B3%95\">私有属性和私有方法</a></li>\n<li><a href=\"/blog/2018/12/17/es6-daily-18-class/#this\">this</a></li>\n<li><a href=\"/blog/2018/12/17/es6-daily-18-class/#name\">name</a></li>\n<li><a href=\"/blog/2018/12/17/es6-daily-18-class/#generator\">Generator</a></li>\n<li><a href=\"/blog/2018/12/17/es6-daily-18-class/#%E9%9D%99%E6%80%81%E6%96%B9%E6%B3%95\">静态方法</a></li>\n<li><a href=\"/blog/2018/12/17/es6-daily-18-class/#%E9%9D%99%E6%80%81%E5%B1%9E%E6%80%A7\">静态属性</a></li>\n<li><a href=\"/blog/2018/12/17/es6-daily-18-class/#newtarget\">new.target</a></li>\n<li><a href=\"/blog/2018/12/17/es6-daily-18-class/#%E7%BB%A7%E6%89%BF\">继承</a></li>\n<li><a href=\"/blog/2018/12/17/es6-daily-18-class/#%E7%BB%A7%E6%89%BF%E6%9C%BA%E5%88%B6\">继承机制</a></li>\n<li><a href=\"/blog/2018/12/17/es6-daily-18-class/#objectgetprototypeof\">Object.getPrototypeOf()</a></li>\n<li><a href=\"/blog/2018/12/17/es6-daily-18-class/#super\">super</a></li>\n<li><a href=\"/blog/2018/12/17/es6-daily-18-class/#%E5%B0%8F%E7%BB%93\">小结</a></li>\n</ul>","timeToRead":10}},"pageContext":{"slug":"/blog/2018/12/17/es6-daily-18-class"}}}