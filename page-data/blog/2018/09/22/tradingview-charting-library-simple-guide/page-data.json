{"componentChunkName":"component---src-templates-blog-post-tsx","path":"/blog/2018/09/22/tradingview-charting-library-simple-guide","result":{"data":{"site":{"siteMetadata":{"title":"童话说","keywords":["thewashingtonhua","github","front-end","javascript","typescript","react","node","washington","hua","童话","童话说","前端","博客","技术","计算机","互联网"]}},"allMarkdownRemark":{"totalCount":85,"edges":[{"node":{"id":"76ce705e-7dfd-5fcb-8453-4f87b674400e","frontmatter":{"title":"阿里云盘","description":"阿里云出品的网盘应用","tags":null,"cover":{"publicURL":"/static/d42b88ce13a4592608ec8325f693ecb3/adrive.jpg"},"series":null,"draft":false,"original":null},"fields":{"id":"adrive","slug":"/project/adrive","type":"project","date":null}}},{"node":{"id":"af69aab6-d7c7-54e1-86fa-7b32ec3421b8","frontmatter":{"title":"Fridge","description":"设计资产速查工具","tags":null,"cover":{"publicURL":"/static/97b869f04b74e763be87e4369e4690e3/fridge.jpg"},"series":null,"draft":false,"original":null},"fields":{"id":"fridge","slug":"/project/fridge","type":"project","date":null}}},{"node":{"id":"d2fffdb6-aff9-58bd-bca9-6c6bb4418052","frontmatter":{"title":"FBC","description":"联合办公空间的会员服务","tags":null,"cover":{"publicURL":"/static/73b8b250e607c97c493edf1b542345fa/fbc.jpg"},"series":null,"draft":false,"original":null},"fields":{"id":"fbc","slug":"/project/fbc","type":"project","date":null}}},{"node":{"id":"99475c4d-82fd-5de4-8298-debe65d8eae4","frontmatter":{"title":"CSS Scan","description":"VSCode 扩展，自动补全 CSS 变量","tags":null,"cover":{"publicURL":"/static/72e94c39ebb670dd23625675c0a22ace/blank.jpg"},"series":null,"draft":true,"original":null},"fields":{"id":"css-scan","slug":"/project/css-scan","type":"project","date":null}}},{"node":{"id":"de3b6773-36f6-51a5-ac19-e3a0e09bce28","frontmatter":{"title":"Github-Flutter","description":"基于 Flutter 开发的 Github 客户端","tags":null,"cover":{"publicURL":"/static/72e94c39ebb670dd23625675c0a22ace/blank.jpg"},"series":null,"draft":true,"original":null},"fields":{"id":"github-flutter","slug":"/project/github-flutter","type":"project","date":null}}},{"node":{"id":"b07a21d0-b526-501d-90f0-93de2e2fb083","frontmatter":{"title":"INEX 影力所","description":"泛娱乐领域的垂直数字货币交易所","tags":null,"cover":{"publicURL":"/static/40ff0dfa20bfd2e8e2b2ea8abb900b5b/inex.jpg"},"series":null,"draft":false,"original":null},"fields":{"id":"inex","slug":"/project/inex","type":"project","date":null}}},{"node":{"id":"18f3de6a-a666-5240-88c1-b00e978885cf","frontmatter":{"title":"Teambition 网盘","description":"Teambition 出品的网盘应用","tags":null,"cover":{"publicURL":"/static/a18be47f8ccb3a72f9a63b94e7e02a89/teamedia.jpg"},"series":null,"draft":false,"original":null},"fields":{"id":"teamedia","slug":"/project/teamedia","type":"project","date":null}}},{"node":{"id":"a81d653f-6317-587e-85f8-cb054a1b3974","frontmatter":{"title":"小图标","description":"一站式 Favicon 解决方案","tags":null,"cover":{"publicURL":"/static/956c5d68ba30b313078082a832a80573/the-favicon.jpg"},"series":null,"draft":false,"original":null},"fields":{"id":"the-favicon","slug":"/project/the-favicon","type":"project","date":null}}},{"node":{"id":"03485a52-0e45-5b2e-ae6c-e08d62b21b9f","frontmatter":{"title":"小扫描","description":"磁盘占用一眼","tags":null,"cover":{"publicURL":"/static/72e94c39ebb670dd23625675c0a22ace/blank.jpg"},"series":null,"draft":true,"original":null},"fields":{"id":"the-scanner","slug":"/project/the-scanner","type":"project","date":null}}},{"node":{"id":"9daa929f-53ff-5080-aa0e-3085d054fe72","frontmatter":{"title":"小书签","description":"让 Chrome 的书签更好用","tags":null,"cover":{"publicURL":"/static/72e94c39ebb670dd23625675c0a22ace/blank.jpg"},"series":null,"draft":true,"original":null},"fields":{"id":"the-collector","slug":"/project/the-collector","type":"project","date":null}}},{"node":{"id":"350287e1-2075-5635-908b-9d9b5ce547a7","frontmatter":{"title":"小剧透","description":"Web 版「剧情连拍」","tags":null,"cover":{"publicURL":"/static/72e94c39ebb670dd23625675c0a22ace/blank.jpg"},"series":null,"draft":true,"original":null},"fields":{"id":"the-spoiler","slug":"/project/the-spoiler","type":"project","date":null}}},{"node":{"id":"bbd0e49d-3750-548d-93ac-04dcebb4a6eb","frontmatter":{"title":"Thoughts 所思","description":"Teambition 出品的企业知识管理应用","tags":null,"cover":{"publicURL":"/static/faff3495c115cab9b6fd951f3c6b96f9/thoughts.jpg"},"series":null,"draft":false,"original":null},"fields":{"id":"thoughts","slug":"/project/thoughts","type":"project","date":null}}},{"node":{"id":"750e2a2e-dc8d-58db-9f7f-b6cdf4165c87","frontmatter":{"title":"新阅","description":"在线视频协作平台","tags":null,"cover":{"publicURL":"/static/64b35564f5bc639232b66b6559065b31/xinyue.jpg"},"series":null,"draft":false,"original":null},"fields":{"id":"xinyue","slug":"/project/xinyue","type":"project","date":null}}},{"node":{"id":"9f400ccd-4892-56d2-8a06-8705ca5f9802","frontmatter":{"title":"Xshowroom 买手圈","description":"时尚业专业买手服务平台","tags":null,"cover":{"publicURL":"/static/72ea2ae7921cb5aa0b3b4f56578ed2b9/xshowroom.jpg"},"series":null,"draft":false,"original":null},"fields":{"id":"xshowroom","slug":"/project/xshowroom","type":"project","date":null}}},{"node":{"id":"c7a0155b-d35a-522b-9bd5-a9e3f70edcd3","frontmatter":{"title":"Fridge 背后的故事","description":"能动手的，咱们尽量别吵吵","tags":["electron","iconfont","svg","fridge"],"cover":{"publicURL":"/static/d221320d45d5d7ac530fe7af1ab4cd79/blank.jpg"},"series":"","draft":true,"original":true},"fields":{"id":"story-behind-fridge","slug":"/blog/2021/04/30/story-behind-fridge","type":"blog","date":"2021-04-30"}}},{"node":{"id":"1a3652a8-ce97-5536-b3db-c40eb20ac80c","frontmatter":{"title":"聊聊「深色模式」","description":"你说的黑不是黑，你说的暗是什么暗","tags":["design","dark"],"cover":{"publicURL":"/static/d221320d45d5d7ac530fe7af1ab4cd79/blank.jpg"},"series":"","draft":true,"original":true},"fields":{"id":"dark-mode","slug":"/blog/2021/03/25/dark-mode","type":"blog","date":"2021-03-25"}}},{"node":{"id":"2b82125c-db17-580e-94d5-46fd3c340c5f","frontmatter":{"title":"金三银四，聊聊前端面试","description":"人嘛，总是在不断的试错中成长起来的","tags":["interview"],"cover":{"publicURL":"/static/d221320d45d5d7ac530fe7af1ab4cd79/blank.jpg"},"series":"","draft":true,"original":true},"fields":{"id":"thoughts-about-fe-interview","slug":"/blog/2021/03/30/thoughts-about-fe-interview","type":"blog","date":"2021-03-30"}}},{"node":{"id":"edadf6bd-b2a6-56bd-a720-1a03c168ebb7","frontmatter":{"title":"多端 Web 应用实践","description":"去往梦想的路，总是坑坑洼洼的","tags":["cross-platform"],"cover":{"publicURL":"/static/d221320d45d5d7ac530fe7af1ab4cd79/blank.jpg"},"series":"","draft":true,"original":true},"fields":{"id":"web-cross-platform-in-action","slug":"/blog/2021/05/10/web-cross-platform-in-action","type":"blog","date":"2021-05-10"}}},{"node":{"id":"32126cc1-4745-5a0d-b87a-8c82e6efbb42","frontmatter":{"title":"为什么我们总是在不断地造轮子","description":"圆的圆的圆的东西","tags":["thinking"],"cover":{"publicURL":"/static/120fefa8e824de66889cf2e45b746ebe/wheel.jpg"},"series":"","draft":true,"original":true},"fields":{"id":"why-do-we-keep-building-wheels","slug":"/blog/2021/06/10/why-do-we-keep-building-wheels","type":"blog","date":"2021-06-10"}}},{"node":{"id":"a0fe72b6-5633-5fe8-86cb-e3ba19d5c75b","frontmatter":{"title":"聊聊前端架构","description":"前端如果只是写写页面的话，路就走窄了","tags":["architecture","架构"],"cover":{"publicURL":"/static/d221320d45d5d7ac530fe7af1ab4cd79/blank.jpg"},"series":"","draft":true,"original":true},"fields":{"id":"frontend-architecture","slug":"/blog/2021/07/15/frontend-architecture","type":"blog","date":"2021-07-15"}}},{"node":{"id":"b7ce0243-5a5a-5299-9e3f-85431e9fd35a","frontmatter":{"title":"Flutter 扫雷记","description":"穿上新买的鞋，走上复古的小路","tags":["flutter"],"cover":{"publicURL":"/static/b6ce1e63c11d6fddd7a988bfb312deb5/flutter.jpg"},"series":"","draft":true,"original":true},"fields":{"id":"learning-flutter","slug":"/blog/2021/08/03/learning-flutter","type":"blog","date":"2021-08-03"}}},{"node":{"id":"eaccee42-1a5f-5dd5-babb-443318533129","frontmatter":{"title":"基于 mono-repo 的项目架构","description":"分久必合","tags":["architecture","mono-repo","架构"],"cover":{"publicURL":"/static/d221320d45d5d7ac530fe7af1ab4cd79/blank.jpg"},"series":"","draft":true,"original":true},"fields":{"id":"1/2021-05-03-design-a-monorepo-project","slug":"/project/1/2021-05-03-design-a-monorepo-project","type":"project","date":"2021-05-03"}}},{"node":{"id":"e44150bf-e74d-573a-ad53-1e6e1752da26","frontmatter":{"title":"GraphQL：从起飞到落地","description":"你经手的下一个项目，很可能就有它","tags":["design"],"cover":{"publicURL":"/static/d221320d45d5d7ac530fe7af1ab4cd79/blank.jpg"},"series":"","draft":true,"original":true},"fields":{"id":"learning-graphql","slug":"/blog/2021/09/10/learning-graphql","type":"blog","date":"2021-09-10"}}},{"node":{"id":"fdb32848-689e-5d55-8442-ee05caee0f8e","frontmatter":{"title":"关于 Semver 的迷思","description":"做人呐，最重要的就是乐观啦","tags":["design","optimistic","update"],"cover":{"publicURL":"/static/d221320d45d5d7ac530fe7af1ab4cd79/blank.jpg"},"series":"","draft":true,"original":true},"fields":{"id":"thinkings-about-semver","slug":"/blog/2021/10/31/thinkings-about-semver","type":"blog","date":"2021-10-31"}}},{"node":{"id":"da52f795-003c-5f43-bec8-f6650b5ffc55","frontmatter":{"title":"关于 P7 的思考","description":"对「硬通货」的一点浅见","tags":["career"],"cover":{"publicURL":"/static/d221320d45d5d7ac530fe7af1ab4cd79/blank.jpg"},"series":"","draft":true,"original":true},"fields":{"id":"thinkings-about-p7","slug":"/blog/2021/11/31/thinkings-about-p7","type":"blog","date":"2021-11-31"}}},{"node":{"id":"6c81e41a-4e3e-576d-ace4-7832eb3cb467","frontmatter":{"title":"「童话说」又改版啦","description":"只为遇见更好的自己","tags":["blog","4.0","update"],"cover":{"publicURL":"/static/d221320d45d5d7ac530fe7af1ab4cd79/blank.jpg"},"series":"","draft":true,"original":true},"fields":{"id":"introducing-ths-v4","slug":"/blog/2021/12/15/introducing-ths-v4","type":"blog","date":"2021-12-15"}}},{"node":{"id":"d22bf6de-28b4-5e1b-ad8a-5c06380984e4","frontmatter":{"title":"一个非著名前端开发者的 2021","description":"只为遇见更好的自己","tags":["summary","2021","2022"],"cover":{"publicURL":"/static/d221320d45d5d7ac530fe7af1ab4cd79/blank.jpg"},"series":"summary","draft":true,"original":true},"fields":{"id":"summary-2021","slug":"/blog/2021/12/31/summary-2021","type":"blog","date":"2021-12-31"}}},{"node":{"id":"0295f32a-75af-51f7-8db3-5e0c642e6a72","frontmatter":{"title":"设计一套乐观更新机制","description":"做人呐，最重要的就是乐观啦","tags":["design","optimistic","update"],"cover":{"publicURL":"/static/92603cdac7e5c420caea18ea2c459646/optimistic-update.jpg"},"series":"","draft":false,"original":true},"fields":{"id":"building-an-optimisic-update-mechanism","slug":"/blog/2020/07/13/building-an-optimisic-update-mechanism","type":"blog","date":"2020-07-13"}}},{"node":{"id":"10e1e909-2a75-5256-93a6-d7631cf486e8","frontmatter":{"title":"你铁定已经知道的 ES 2020","description":"迟到，总比不到好","tags":["ecmascript","2020"],"cover":{"publicURL":"/static/5bbe9cbd4d341256fe533f89aa242cb6/es2020.jpg"},"series":"ecmascript","draft":false,"original":true},"fields":{"id":"es-2020","slug":"/blog/2020/12/28/es-2020","type":"blog","date":"2020-12-28"}}},{"node":{"id":"68d69e46-9edd-56de-95be-3007ddcf018b","frontmatter":{"title":"我的数组返回了啥","description":"功夫再高，一针下去也得倒","tags":["javascript","array"],"cover":{"publicURL":"/static/2cc085eb3cdf21f44644810589c3bd8a/array.jpg"},"series":"","draft":false,"original":true},"fields":{"id":"what-does-my-array-return","slug":"/blog/2020/12/07/what-does-my-array-return","type":"blog","date":"2020-12-07"}}},{"node":{"id":"a922f804-a868-5021-bf92-750fdd5691a4","frontmatter":{"title":"一个非著名前端开发者的 2020","description":"继续，让进步发生","tags":["summary","2020","2021"],"cover":{"publicURL":"/static/40556f5636111e701f3949914488b854/summary-2020.jpg"},"series":"summary","draft":false,"original":true},"fields":{"id":"summary-2020","slug":"/blog/2020/12/31/summary-2020","type":"blog","date":"2020-12-31"}}},{"node":{"id":"209c09ce-8f6f-52a6-a2f3-796b3224f0d9","frontmatter":{"title":"自己动手做一个播放器","description":"一潭看起来很浅的深水","tags":["media","video","audio"],"cover":{"publicURL":"/static/d221320d45d5d7ac530fe7af1ab4cd79/blank.jpg"},"series":"","draft":true,"original":true},"fields":{"id":"custom-media-player","slug":"/blog/2021/07/30/custom-media-player","type":"blog","date":"2021-07-30"}}},{"node":{"id":"7e7dfc70-098b-5382-95f9-fcaf72a33640","frontmatter":{"title":"如何 Think in Hooks","description":"差不多是时候该换换脑子了","tags":["react","hooks"],"cover":{"publicURL":"/static/26d13ef2591ee05a3c4bba7fc34daa88/think-in-hooks.jpg"},"series":"","draft":false,"original":true},"fields":{"id":"how-to-think-in-hooks","slug":"/blog/2019/02/15/how-to-think-in-hooks","type":"blog","date":"2019-02-15"}}},{"node":{"id":"3cf7e2f2-7182-5e8f-8a2a-dfc3a61db2ee","frontmatter":{"title":"除了 SSR，就没有别的办法了吗","description":"当 MVVM 遇上 SEO，该如何是好","tags":["static","site","gatsby","pug"],"cover":{"publicURL":"/static/c2ac5cf49eafd77a1b2ce1fab7f53515/explore-static-site-generation.jpg"},"series":"","draft":false,"original":true},"fields":{"id":"explore-static-site-generation","slug":"/blog/2019/02/07/explore-static-site-generation","type":"blog","date":"2019-02-07"}}},{"node":{"id":"25be8732-7124-5711-8389-fa0eb6d066a0","frontmatter":{"title":"【译】我们为什么要写 super(props)?","description":"好像知道，又好像不知道","tags":["react"],"cover":{"publicURL":"/static/9fbf74366dc5b9e4aab57572a9f0470d/overreacted.jpg"},"series":"overreacted","draft":false,"original":false},"fields":{"id":"why-do-we-write-super-props","slug":"/blog/2019/02/22/why-do-we-write-super-props","type":"blog","date":"2019-02-22"}}},{"node":{"id":"31f5ea06-b82f-5614-a8ec-c84c90dd702f","frontmatter":{"title":"【译】React 如何区分 Class 和 Function？","description":"所谓的简单，只是因为有人帮你把复杂的问题给解决掉了","tags":["react"],"cover":{"publicURL":"/static/9fbf74366dc5b9e4aab57572a9f0470d/overreacted.jpg"},"series":"overreacted","draft":false,"original":false},"fields":{"id":"how-does-react-tell-a-class-from-a-function","slug":"/blog/2019/03/06/how-does-react-tell-a-class-from-a-function","type":"blog","date":"2019-03-06"}}},{"node":{"id":"d9e43379-5064-5190-b910-05e749a3418a","frontmatter":{"title":"探索 React 组件之间的生命周期","description":"有时候，生活就是一团麻","tags":["react","lifecycle"],"cover":{"publicURL":"/static/0edf69056144aaf512a28d0670b53b57/react-lifecycle.jpg"},"series":"","draft":false,"original":true},"fields":{"id":"react-lifecycle","slug":"/blog/2019/05/02/react-lifecycle","type":"blog","date":"2019-05-02"}}},{"node":{"id":"6bd1e7a4-1e3d-547b-b89d-6b9de39638ba","frontmatter":{"title":"你可能已经知道的 ES 2018 和 2019","description":"好饭不怕晚","tags":["ecmascript","2018","2019"],"cover":{"publicURL":"/static/5646b4878e533cd7c725ce4c17984071/es2019.jpg"},"series":"ecmascript","draft":false,"original":true},"fields":{"id":"es2018-and-es2019","slug":"/blog/2019/02/11/es2018-and-es2019","type":"blog","date":"2019-02-11"}}},{"node":{"id":"626c0ed1-722c-5f48-a956-87d203e35f64","frontmatter":{"title":"TypeScript：又一个终将逝去的青春","description":"你，轰轰烈烈地来；你，平平淡淡地走。","tags":["typescript"],"cover":{"publicURL":"/static/b7b7642447ca6a5b28abf9f90bf06ef8/typescript-another-fading-youth.jpg"},"series":"","draft":false,"original":true},"fields":{"id":"typescript-another-fading-youth","slug":"/blog/2019/10/10/typescript-another-fading-youth","type":"blog","date":"2019-10-10"}}},{"node":{"id":"5455ae44-6012-5087-9465-12f665668f2e","frontmatter":{"title":"重新 Think in Hooks","description":"忘记过去之所学，我们从头来过","tags":["react","hooks"],"cover":{"publicURL":"/static/f9fcd719dcab55af4a1ad3d3cfbe0585/rethink-in-hooks.jpg"},"series":"","draft":false,"original":true},"fields":{"id":"rethink-in-hooks","slug":"/blog/2019/05/27/rethink-in-hooks","type":"blog","date":"2019-05-27"}}},{"node":{"id":"ecae2146-ca35-5be3-a8d4-22bde21a3333","frontmatter":{"title":"TypeScript 次日指南","description":"坑这种东西，是不会写在文档上的","tags":["typescript"],"cover":{"publicURL":"/static/8239307adc5ccdfc32320e1bcadb6300/typescript.jpg"},"series":"","draft":false,"original":true},"fields":{"id":"typescript-the-second-day","slug":"/blog/2019/07/28/typescript-the-second-day","type":"blog","date":"2019-07-28"}}},{"node":{"id":"016944ef-6128-5093-8210-73f7ef5044ee","frontmatter":{"title":"Homebrew 也有后悔药：回退一次小版本更新","description":"有了后悔药，可劲随便造","tags":["homebrew"],"cover":{"publicURL":"/static/2cd1cc709ca5d68b1a1fb9eb6283b820/homebrew.jpg"},"series":"","draft":false,"original":true},"fields":{"id":"how-to-downgrade-from-homebrew","slug":"/blog/2019/10/11/how-to-downgrade-from-homebrew","type":"blog","date":"2019-10-11"}}},{"node":{"id":"e37e9fa6-c0e5-5433-a9af-be8a28128975","frontmatter":{"title":"每天一点ES6(15)：Promise","description":"对你的承诺，永远不变","tags":["ecmascript","2015","es6","javascript","promise"],"cover":{"publicURL":"/static/0950334fb8899f1006423341cbfeecb9/es6daily.jpg"},"series":"es6daily","draft":false,"original":true},"fields":{"id":"es6-daily-15-promise","slug":"/blog/2018/03/04/es6-daily-15-promise","type":"blog","date":"2018-03-04"}}},{"node":{"id":"ea6991ae-07c3-52d7-81bf-673c1dd60fc0","frontmatter":{"title":"一个非著名前端开发者的 2019","description":"感谢曾经努力的自己","tags":["summary","2019","2020"],"cover":{"publicURL":"/static/1011f23d2ed2635035a07878c03ed1da/summary-2019.jpg"},"series":"summary","draft":false,"original":true},"fields":{"id":"summary-2019","slug":"/blog/2019/12/31/summary-2019","type":"blog","date":"2019-12-31"}}},{"node":{"id":"54cc1173-8a15-533c-aebf-9921ed896ec5","frontmatter":{"title":"每天一点ES6(16)：Generator","description":"一起来摩擦摩擦发电吧","tags":["ecmascript","2015","es6","javascript","promise"],"cover":{"publicURL":"/static/0950334fb8899f1006423341cbfeecb9/es6daily.jpg"},"series":"es6daily","draft":false,"original":true},"fields":{"id":"es6-daily-16-generator","slug":"/blog/2018/06/14/es6-daily-16-generator","type":"blog","date":"2018-06-14"}}},{"node":{"id":"f9790f8f-d2e7-5f1a-8c3f-425e46d3f30c","frontmatter":{"title":"每天一点ES6(14)：Iterator","description":"遍历也能搞出花来，怎么遍历你说了算","tags":["ecmascript","2015","es6","javascript","iterator","generator"],"cover":{"publicURL":"/static/0950334fb8899f1006423341cbfeecb9/es6daily.jpg"},"series":"es6daily","draft":false,"original":true},"fields":{"id":"es6-daily-14-iterator","slug":"/blog/2018/02/28/es6-daily-14-iterator","type":"blog","date":"2018-02-28"}}},{"node":{"id":"178c08ec-baef-5ccc-aa49-22d4cc92c82f","frontmatter":{"title":"每天一点ES6(17)：Async / Await","description":"异步？先等等！","tags":["ecmascript","2015","es6","javascript","async","await","generator"],"cover":{"publicURL":"/static/0950334fb8899f1006423341cbfeecb9/es6daily.jpg"},"series":"es6daily","draft":false,"original":true},"fields":{"id":"es6-daily-17-async-await","slug":"/blog/2018/10/06/es6-daily-17-async-await","type":"blog","date":"2018-10-06"}}},{"node":{"id":"fb048a5f-fb5b-5608-9dfd-34aaf548f6cf","frontmatter":{"title":"TradingView + WebSocket 脱坑指南","description":"让我来告诉你，K 线到底该怎么画","tags":["tradingview","chart","library","guide","websocket","webworker","ohlc","kchart"],"cover":{"publicURL":"/static/1ceaf53d99815784a18273970e741bfd/tradingview.jpg"},"series":"","draft":false,"original":true},"fields":{"id":"tradingview-charting-library-simple-guide","slug":"/blog/2018/09/22/tradingview-charting-library-simple-guide","type":"blog","date":"2018-09-22"}}},{"node":{"id":"dc46d70c-534c-5d9b-b674-e97a67c31e3a","frontmatter":{"title":"每天一点ES6(18)：Class","description":"这回总没人质疑 JS 不是面向对象了吧？","tags":["ecmascript","2015","es6","javascript","class"],"cover":{"publicURL":"/static/0950334fb8899f1006423341cbfeecb9/es6daily.jpg"},"series":"es6daily","draft":false,"original":true},"fields":{"id":"es6-daily-18-class","slug":"/blog/2018/12/17/es6-daily-18-class","type":"blog","date":"2018-12-17"}}},{"node":{"id":"e445df88-f8fa-55cb-a1eb-c7232a8873ba","frontmatter":{"title":"一个非著名前端开发者的 2018","description":"资本寒冬大概是属燕子的吧，一到年末出现","tags":["summary","2018","2019"],"cover":{"publicURL":"/static/0e9c38c3d5d6b94d53a8dee2a7bdfbae/summary-2018.jpg"},"series":"summary","draft":false,"original":true},"fields":{"id":"summary-2018","slug":"/blog/2018/12/31/summary-2018","type":"blog","date":"2018-12-31"}}},{"node":{"id":"9860737b-1512-59be-8f33-e585a50e1095","frontmatter":{"title":"每天一点ES6(19)：Module","description":"可能是 ES6 中对未来影响最大的一项改变","tags":["ecmascript","2015","es6","javascript","module","import","export"],"cover":{"publicURL":"/static/0950334fb8899f1006423341cbfeecb9/es6daily.jpg"},"series":"es6daily","draft":false,"original":true},"fields":{"id":"es6-daily-19-module","slug":"/blog/2018/12/19/es6-daily-19-module","type":"blog","date":"2018-12-19"}}},{"node":{"id":"7a7ee065-eff6-52c5-9178-b98c4fed66be","frontmatter":{"title":"记 new Date().toString() 的一个坑","description":"万万没想到，竟在这里踩了个坑……","tags":["javascript","date","tostring"],"cover":{"publicURL":"/static/e192283893c7e97feb631571134bb805/date-tostring.jpg"},"series":"","draft":false,"original":true},"fields":{"id":"a-pit-in-date-tostring","slug":"/blog/2017/03/08/a-pit-in-date-tostring","type":"blog","date":"2017-03-08"}}},{"node":{"id":"360a76a3-3a04-5ac6-a0f2-bedcad7a726a","frontmatter":{"title":"解决 macOS 下 MySQL 2002 错误","description":"MySQL 真是个磨人的小妖精","tags":["mac","mysql","2002"],"cover":{"publicURL":"/static/6f1abf9c085f6538df6bced86e008157/mysql-error-2002.jpg"},"series":"","draft":false,"original":true},"fields":{"id":"mysql-error-2002","slug":"/blog/2017/02/07/mysql-error-2002","type":"blog","date":"2017-02-07"}}},{"node":{"id":"fd5a78f7-d6fa-57ff-83bb-7aa893e73e16","frontmatter":{"title":"PHP 处理多源 CORS 的解决办法","description":"一个老生常谈的话题，碰到了顺便记录一下","tags":["php","cors"],"cover":{"publicURL":"/static/77fc63594cf3a06c31921df671acd258/cors.jpg"},"series":"","draft":false,"original":true},"fields":{"id":"multi-origin-cors-with-php","slug":"/blog/2017/03/30/multi-origin-cors-with-php","type":"blog","date":"2017-03-30"}}},{"node":{"id":"5789fb37-a375-5698-b7cf-50aedf785543","frontmatter":{"title":"iOS 下 click() 无效的问题","description":"iOS这个傲娇的小公举","tags":["ios","click"],"cover":{"publicURL":"/static/f79051a5758b8a973902b2e5d190b714/ios-click.jpg"},"series":"","draft":false,"original":true},"fields":{"id":"unable-to-trigger-click-on-ios","slug":"/blog/2017/03/31/unable-to-trigger-click-on-ios","type":"blog","date":"2017-03-31"}}},{"node":{"id":"87e42157-457a-5cbd-a336-c4c0d6abd806","frontmatter":{"title":"每天一点ES6(10)：对象的扩展","description":"迟来的更新……","tags":["ecmascript","2015","es6","javascript","object"],"cover":{"publicURL":"/static/0950334fb8899f1006423341cbfeecb9/es6daily.jpg"},"series":"es6daily","draft":false,"original":true},"fields":{"id":"es6-daily-10-object","slug":"/blog/2017/04/05/es6-daily-10-object","type":"blog","date":"2017-04-05"}}},{"node":{"id":"97e5d468-f0e4-5650-b0a8-4cc9c00c2ed0","frontmatter":{"title":"Leetcode 第一刷：Two Sum","description":"都闪开，我要开始装逼了","tags":["leetcode","two","sum"],"cover":{"publicURL":"/static/1aa86b8eea674fca29117e535cfba751/leetcode.jpg"},"series":"","draft":false,"original":true},"fields":{"id":"leetcode-01-two-sum","slug":"/blog/2017/04/11/leetcode-01-two-sum","type":"blog","date":"2017-04-11"}}},{"node":{"id":"0d23ecad-223e-5607-bd6c-7e3be91bbfdf","frontmatter":{"title":"每天一点ES6(11)：Symbol","description":"原始类型家族的新成员","tags":["ecmascript","2015","es6","javascript","symbol"],"cover":{"publicURL":"/static/0950334fb8899f1006423341cbfeecb9/es6daily.jpg"},"series":"es6daily","draft":false,"original":true},"fields":{"id":"es6-daily-11-symbol","slug":"/blog/2017/07/02/es6-daily-11-symbol","type":"blog","date":"2017-07-02"}}},{"node":{"id":"c858589c-f009-5b56-bfe0-02b2ac76e301","frontmatter":{"title":"Webpack \"Invalid Host Header\"","description":"更新有风险，更新需谨慎……","tags":["webpack","dev","server","invalid","host"],"cover":{"publicURL":"/static/977bc2ebe23a9b6b10fdac4b470847b8/webpack-dev-server.jpg"},"series":"","draft":false,"original":true},"fields":{"id":"webpack-dev-server-invalid-host-header","slug":"/blog/2017/05/04/webpack-dev-server-invalid-host-header","type":"blog","date":"2017-05-04"}}},{"node":{"id":"8eb3ac03-6d9a-5cba-9023-0843d21ac7e7","frontmatter":{"title":"ECMAScript 2017 正式到来","description":"ES 的世界开始日趋平静","tags":["ecmascript","2017","es8","javascript"],"cover":{"publicURL":"/static/77b7677386d27526bcb0b2687218f3f1/es2017.jpg"},"series":"ecmascript","draft":false,"original":true},"fields":{"id":"ecmascript-2017-is-here","slug":"/blog/2017/07/12/ecmascript-2017-is-here","type":"blog","date":"2017-07-12"}}},{"node":{"id":"a9e10e85-4157-564d-8e4e-bb51777f5728","frontmatter":{"title":"每天一点ES6(12)：Set 和 Map","description":"多余的，一概不要","tags":["ecmascript","2015","es6","javascript","map","set"],"cover":{"publicURL":"/static/0950334fb8899f1006423341cbfeecb9/es6daily.jpg"},"series":"es6daily","draft":false,"original":true},"fields":{"id":"es6-daily-12-set-and-map","slug":"/blog/2017/07/03/es6-daily-12-set-and-map","type":"blog","date":"2017-07-03"}}},{"node":{"id":"46c9afad-ec4c-5266-a5ba-c534cd80d557","frontmatter":{"title":"童话说 V2.0 改版小结","description":"时隔多年，终于换新面貌了","tags":["blog","2.0","update"],"cover":{"publicURL":"/static/630ee6fc7ad1be564eebffb0e0dd447d/introducing-ths-v2.jpg"},"series":"","draft":false,"original":true},"fields":{"id":"introducing-ths-v2","slug":"/blog/2017/08/12/introducing-ths-v2","type":"blog","date":"2017-08-12"}}},{"node":{"id":"1ca410dc-72a7-5c49-b1db-2a355eb9b658","frontmatter":{"title":"Electron 安装出坑指南","description":"世界本无坑，用的人多了，也就有了坑","tags":["electron"],"cover":{"publicURL":"/static/a9838665d68ab68d327e48d8720bac3f/electron.jpg"},"series":"","draft":false,"original":true},"fields":{"id":"electron-install-guide","slug":"/blog/2017/07/06/electron-install-guide","type":"blog","date":"2017-07-06"}}},{"node":{"id":"f0b5b455-ca17-5fe7-83f2-f5bdc3faf8af","frontmatter":{"title":"Node.js 9.0.0 发布","description":"一转眼，又半年过去了","tags":["nodejs","release"],"cover":{"publicURL":"/static/86f3115cebbb8dd82646ff1d231fa317/nodejs-9-release.jpg"},"series":"","draft":false,"original":true},"fields":{"id":"nodejs-9-release","slug":"/blog/2017/11/01/nodejs-9-release","type":"blog","date":"2017-11-01"}}},{"node":{"id":"14142768-ff45-5f0d-9964-533ecc55a7a6","frontmatter":{"title":"每天一点ES6(13)：Proxy 和 Reflect","description":"对不起，有代理真就是可以为所欲为","tags":["ecmascript","2015","es6","javascript","proxy","reflect"],"cover":{"publicURL":"/static/0950334fb8899f1006423341cbfeecb9/es6daily.jpg"},"series":"es6daily","draft":false,"original":true},"fields":{"id":"es6-daily-13-proxy-and-reflect","slug":"/blog/2017/12/20/es6-daily-13-proxy-and-reflect","type":"blog","date":"2017-12-20"}}},{"node":{"id":"1983f72d-f078-5718-9757-081c0e202506","frontmatter":{"title":"TypeScript + Vue 踩坑纪实","description":"坑这种东西，多踩踩就平了","tags":["typescript","vue"],"cover":{"publicURL":"/static/fe6f5086d26293f21adf217a84141fd6/guide-for-vue-with-typescript.jpg"},"series":"","draft":false,"original":true},"fields":{"id":"guide-for-vue-with-typescript","slug":"/blog/2017/10/26/guide-for-vue-with-typescript","type":"blog","date":"2017-10-26"}}},{"node":{"id":"ed149420-0a0e-59d3-a48b-313ec3bfd1a2","frontmatter":{"title":"一个非著名前端开发者的 2017","description":"哎 ~ 又一年过去了","tags":["summary","2017","2018"],"cover":{"publicURL":"/static/0d96380257d25f6b398d9bc8e47af5a1/summary-2017.jpg"},"series":"summary","draft":false,"original":true},"fields":{"id":"summary-2017","slug":"/blog/2017/12/29/summary-2017","type":"blog","date":"2017-12-29"}}},{"node":{"id":"a87ada2c-56b5-517e-9270-777d8f5fa9f7","frontmatter":{"title":"每天一点ES6(1)：概述","description":"伊艾斯6大法好，每天一点不会老！","tags":["ecmascript","2015","es6","javascript"],"cover":{"publicURL":"/static/0950334fb8899f1006423341cbfeecb9/es6daily.jpg"},"series":"es6daily","draft":false,"original":true},"fields":{"id":"es6-daily-01-intro","slug":"/blog/2016/01/24/es6-daily-01-intro","type":"blog","date":"2016-01-24"}}},{"node":{"id":"235e3458-13b2-509c-96c4-3bf00cb747bd","frontmatter":{"title":"每天一点ES6(2)：let 和 const","description":"终于，JavaScript 也能用上块级作用域和常量了","tags":["ecmascript","2015","es6","javascript","let","const"],"cover":{"publicURL":"/static/0950334fb8899f1006423341cbfeecb9/es6daily.jpg"},"series":"es6daily","draft":false,"original":true},"fields":{"id":"es6-daily-02-let-and-const","slug":"/blog/2016/01/25/es6-daily-02-let-and-const","type":"blog","date":"2016-01-25"}}},{"node":{"id":"9fa101bf-c79e-50d4-84ee-fac86f5017c0","frontmatter":{"title":"电梯调度算法","description":"上上下下的感受","tags":["elevator","algorithm","project"],"cover":{"publicURL":"/static/7b7f4cefe4c7bf293ff2cdb266af33d9/elevator.jpg"},"series":"","draft":false,"original":true},"fields":{"id":"elevator","slug":"/blog/2016/02/16/elevator","type":"blog","date":"2016-02-16"}}},{"node":{"id":"eada466d-99d0-5381-a422-432e2c9e0ff7","frontmatter":{"title":"每天一点ES6(3)：解构赋值","description":"让你一次赋个够","tags":["ecmascript","2015","es6","javascript","destructuring"],"cover":{"publicURL":"/static/0950334fb8899f1006423341cbfeecb9/es6daily.jpg"},"series":"es6daily","draft":false,"original":true},"fields":{"id":"es6-daily-03-destructuring","slug":"/blog/2016/02/02/es6-daily-03-destructuring","type":"blog","date":"2016-02-02"}}},{"node":{"id":"b9824676-eb13-5322-991d-0b18ca951175","frontmatter":{"title":"每天一点ES6(4)：Babel","description":"《圣经》的光辉，永恒！","tags":["ecmascript","2015","es6","javascript","babel","npm"],"cover":{"publicURL":"/static/0950334fb8899f1006423341cbfeecb9/es6daily.jpg"},"series":"es6daily","draft":false,"original":true},"fields":{"id":"es6-daily-04-babel","slug":"/blog/2016/02/19/es6-daily-04-babel","type":"blog","date":"2016-02-19"}}},{"node":{"id":"f54204d9-4ea1-5c8d-96f4-7e7435ea34ac","frontmatter":{"title":"每天一点ES6(6)：正则的扩展","description":"四字节 Unicode 的春天","tags":["ecmascript","2015","es6","javascript","regular","expression","regexp"],"cover":{"publicURL":"/static/0950334fb8899f1006423341cbfeecb9/es6daily.jpg"},"series":"es6daily","draft":false,"original":true},"fields":{"id":"es6-daily-06-regexp","slug":"/blog/2016/04/06/es6-daily-06-regexp","type":"blog","date":"2016-04-06"}}},{"node":{"id":"dbfc6a04-8b65-5580-b264-1d6baa0a780e","frontmatter":{"title":"每天一点ES6(5)：字符串的扩展","description":"不变的字符串现在更加多变了","tags":["ecmascript","2015","es6","javascript","string"],"cover":{"publicURL":"/static/0950334fb8899f1006423341cbfeecb9/es6daily.jpg"},"series":"es6daily","draft":false,"original":true},"fields":{"id":"es6-daily-05-string","slug":"/blog/2016/04/05/es6-daily-05-string","type":"blog","date":"2016-04-05"}}},{"node":{"id":"5bc8aa4f-6b39-5611-b039-49ee12b6d322","frontmatter":{"title":"每天一点ES6(7)：数值的扩展","description":"每一个数字都不能放过","tags":["ecmascript","2015","es6","javascript","number"],"cover":{"publicURL":"/static/0950334fb8899f1006423341cbfeecb9/es6daily.jpg"},"series":"es6daily","draft":false,"original":true},"fields":{"id":"es6-daily-07-number","slug":"/blog/2016/04/12/es6-daily-07-number","type":"blog","date":"2016-04-12"}}},{"node":{"id":"3e4f9d05-7e0c-51c6-8625-0f2de727db45","frontmatter":{"title":"每天一点ES6(8)：数组的扩展","description":"别拿语法糖不当干粮","tags":["ecmascript","2015","es6","javascript","array"],"cover":{"publicURL":"/static/0950334fb8899f1006423341cbfeecb9/es6daily.jpg"},"series":"es6daily","draft":false,"original":true},"fields":{"id":"es6-daily-08-array","slug":"/blog/2016/07/26/es6-daily-08-array","type":"blog","date":"2016-07-26"}}},{"node":{"id":"1f5c7a80-18be-5aca-b061-fc30785c8448","frontmatter":{"title":"一个非著名前端开发者的 2016","description":"回顾 2016，是充实的一年，不负青春。2017 加油继续！","tags":["summary","2016","2017"],"cover":{"publicURL":"/static/d4bc85d6ff1aa8985e03c3875f90ea51/summary-2016.jpg"},"series":"summary","draft":false,"original":true},"fields":{"id":"summary-2016","slug":"/blog/2016/12/31/summary-2016","type":"blog","date":"2016-12-31"}}},{"node":{"id":"17c07426-b94a-5990-a17c-4c39cbe95e2f","frontmatter":{"title":"每天一点ES6(9)：函数的扩展","description":"博采众长的实用语法糖","tags":["ecmascript","2015","es6","javascript","function"],"cover":{"publicURL":"/static/0950334fb8899f1006423341cbfeecb9/es6daily.jpg"},"series":"es6daily","draft":false,"original":true},"fields":{"id":"es6-daily-09-function","slug":"/blog/2016/12/20/es6-daily-09-function","type":"blog","date":"2016-12-20"}}},{"node":{"id":"7337f135-f66f-54ba-ab99-0f41c35f7819","frontmatter":{"title":"栈计算器","description":"通过“栈”实现的方程式计算器","tags":["stack","calculator","algorithm","project"],"cover":{"publicURL":"/static/256bbf9439e7f58974c946bc16f54832/stack-calculator.jpg"},"series":"","draft":false,"original":true},"fields":{"id":"stack-calculator","slug":"/blog/2015/02/10/stack-calculator","type":"blog","date":"2015-02-10"}}},{"node":{"id":"9d41b4b8-9f24-5a5b-98d1-4bbaa4ce9f4e","frontmatter":{"title":"5 分钟彻底明白 JSONP","description":"说穿了，其实没那么难","tags":["javascript","jsonp"],"cover":{"publicURL":"/static/f8f2d118b15646398f7d00e19eb17ff9/jsonp.jpg"},"series":"","draft":false,"original":true},"fields":{"id":"jsonp","slug":"/blog/2016/08/17/jsonp","type":"blog","date":"2016-08-17"}}},{"node":{"id":"880d6eb9-29a1-5fb9-a114-6be0b1f2fbb9","frontmatter":{"title":"时间是什么颜色的","description":"如果时间有颜色……","tags":["color","time","project"],"cover":{"publicURL":"/static/03c874556dd31d9db5f30b7609751b92/tik-tok-color.jpg"},"series":"","draft":false,"original":true},"fields":{"id":"tik-tok-color","slug":"/blog/2015/02/11/tik-tok-color","type":"blog","date":"2015-02-11"}}},{"node":{"id":"0f3764ca-724d-51ca-87dc-b175bb3e5528","frontmatter":{"title":"使用 Sublime Text 编写 LaTeX","description":"用你最熟悉的工具来写 LaTeX 吧","tags":["sublime","latex"],"cover":{"publicURL":"/static/e7689b7e9fe6160a6ed614a10125ca29/latex-with-sublime-text.jpg"},"series":"","draft":false,"original":true},"fields":{"id":"latex-with-sublime-text","slug":"/blog/2015/04/01/latex-with-sublime-text","type":"blog","date":"2015-04-01"}}},{"node":{"id":"c4cf7857-9f2a-5a3b-9913-4d766e4b8798","frontmatter":{"title":"MIUI 图标缓存问题","description":"离奇失踪的图标","tags":["android","miui","icon","cache"],"cover":{"publicURL":"/static/2e66c31a61d5319c1849ea082e8c80ee/miui-icon-cache.jpg"},"series":"","draft":false,"original":true},"fields":{"id":"miui-icon-cache","slug":"/blog/2015/04/18/miui-icon-cache","type":"blog","date":"2015-04-18"}}},{"node":{"id":"2745d310-4458-5e77-bcc5-a865b092df98","frontmatter":{"title":"substr() 和 substring() 的区别","description":"两个函数，傻傻分不清楚","tags":["javascript","substr","substring","slice"],"cover":{"publicURL":"/static/289ad52fc38963e15549cd1dc24678e4/substring.jpg"},"series":"","draft":false,"original":true},"fields":{"id":"substr-and-substring","slug":"/blog/2015/05/15/substr-and-substring","type":"blog","date":"2015-05-15"}}},{"node":{"id":"3f183912-71d2-55e2-9ee9-eb2276aeb499","frontmatter":{"title":"纯 CSS3 绘制月饼","description":"中秋佳节，用CSS3来画个月饼吧","tags":["css","mooncake","project"],"cover":{"publicURL":"/static/9aaefaae86216c79623893c080f1ccc2/css3-mooncake.jpg"},"series":"","draft":false,"original":true},"fields":{"id":"css3-mooncake","slug":"/blog/2015/09/27/css3-mooncake","type":"blog","date":"2015-09-27"}}}]},"markdownRemark":{"id":"fb048a5f-fb5b-5608-9dfd-34aaf548f6cf","html":"<h2>0. 竟然被催更了</h2>\n<p>前两天公司领导居然提到我的博客，说我最近懒了，不更新了……</p>\n<p>趁放假，赶紧更新一轮……等等，什么时候这变成工作了？</p>\n<h2>1. TradingView 是个啥</h2>\n<p>今天咱们说个比较特别的 —— <a href=\"https://www.tradingview.com/HTML5-stock-forex-bitcoin-charting-library\" target=\"_blank\" rel=\"noopener noreferrer\">TradingView</a>，这是一个专业的图表库，专门做 K 线图的，而 K 线图是股票、基金等交易所必备的一样东西。项目本身是免费的，但并不开源，官方提供了托管在 Github 上的私有库，开发者只需向官方提交一些必要的信息，就可以获取到访问权限。主仓库包含了压缩后的库文件，以及简单的数据接入案例；Wiki 中提供了开发文档，同时还在其它的仓库中提供了一些上手案例。</p>\n<p>前端常用的几个图表库，像 ECharts、DataV 其实都支持绘制基本的 K 线图（有的称之为蜡烛图，叫法不同而已），配合柱状图和折线图，还能绘制成交量、MA 等指标。TradingView 作为一款专业级的行业产品，除了前面提到的这些图表，还提供了大量的专业测量工具，供专业的投资者和分析师使用，这些用如果全部由开发者自行去实现，会需要花费大量的精力，这种一揽子打包的方案，无疑是它最吸引人的地方。</p>\n<p>最近公司正在进行中的一个项目，就是一款数字资产的交易所，竞品调研时候就发现，同行们几乎无一例外的都选择了这个图表库，连火币、FCoin 等行业风向标级别的大厂都选择了这款图表库，可见其在行业当中的权威性，以及近乎垄断的地位。也正因为如此，我们也开始着手研究它。</p>\n<h2>2. 专业 === 麻烦</h2>\n<p>专业归专业，但这毕竟是针对特定行业特定需求开发的东西，有很多的专业概念、术语、做法我们都不懂，得现学。官方虽然以 Wiki 的形式在 Github 中提供了文档，但文档的质量非常一般，看上去方方面面都覆盖到了，但字里行间充斥着大量晦涩难懂的概念，对参数的注解也是残缺不齐，很多操作上的细节都没有提到，阅读体验非常糟糕。虽然项目官网提供了中文的选项，图表库本身也支持多语言，但是文档却只有英文的（虽然就我个人而言，语言本身并不构成压力；但如果你需要，<a href=\"https://b.aitrade.ga/books/tradingview/\" target=\"_blank\" rel=\"noopener noreferrer\">这里</a> 有一份别人整理的中文版的，还包含了基于 UDF 方案的视频教程，作者来自 TradingView 项目组，是一位资深的开发者。为了讲解方便，这里会用到其中的一些图，感谢 <a href=\"https://github.com/zlq4863947\" target=\"_blank\" rel=\"noopener noreferrer\">作者</a>）。</p>\n<p>相比 ECharts、DataV 这种万事俱备，只要填数据、配参数的“民用级”图表库，TradingView 的上手难度要高不少，它需要开发者按照其制定的规则，自行实现一套数据源 API，官方虽然对于每一个 API 的作用、参数都给出了说明，但一些关键的点并没有解释清楚，很多开发者（包括我，和我接触过的一些同行）在看过文档后还是没能很好的理解“这 tm 到底该怎么用”。写这篇博客，就是希望能够为解决这个问题做一点贡献，让后来者能够轻松一些。</p>\n<h2>3. 为了节约时间</h2>\n<p>先说明一点，这篇博客并不会手把手教你一步一步搭建出整套东西。我假定你至少是先看过一遍官方的文档，并有了初步的尝试之后，遇到问题，求助于搜索引擎，然后才来到的这里。</p>\n<p>这篇博客更像是一个 FAQ，根据我自己踩坑的经历，把一些比较不好懂的东西，按我个人的理解分享给各位。</p>\n<p>所以如果你指望这篇博客能够让你不用去看官方文档就能够完全掌握 TradingView，轻松把 K 线画出来，那么对不起，要让你失望了。</p>\n<h2>4. 先说一下概念</h2>\n<p>TradingView 里有一些比较专业的概念，不太好懂，但非常重要，这里简单说明一下。</p>\n<h3>4.1. Symbol</h3>\n<p>Symbol 直译过来叫“象征、符号”，这里引申为“商品”。K 线表现的是价格的变化趋势，至于是什么东西的价格，可以是股票，可以是货币，也可以是任何一样商品，TradingView 为了通用，提供了这么一个抽象的概念。一个 Symbol 就是一个 JS 对象，描述了商品的一些属性（名称、价格小数位、支持的时间分辨率、交易开放时间等，具体请参考官方文档），图表库会根据 Symbol 的定义，来决定改获取怎样的数据。</p>\n<p>商品名称的固定格式为 “EXCHANGE:SYMBOL”，SYMBOL 代表商品，例如一支股票、一个交易对；EXCHANGE 是交易所的名称，同一商品在不同交易所可能会有不同的价格，因此需要进行区分。</p>\n<h3>4.2. Resolution</h3>\n<p>Study 直译过来叫“分辨率”，这里指 K 线图中相邻两条柱子之间的时间间隔，我没研究过专业术语是不是就是用的这个词，不过个人感觉这就是一种说法，你用别的词也能表达这个意思，只不过 TradingView 选择了这个词。</p>\n<h3>4.3. Study</h3>\n<p>Study 直译过来叫“学习、研究”，这里解释为“指标”，例如成交量、均线，以及其他各种分析指标。开发者可以通过 TradingView 提供的 API 自行添加。</p>\n<h3>4.4. Chart</h3>\n<p>图表本体，特指 K 线图及相关的各项指标，不包含工具栏。一个图表实例可以包含多个指标</p>\n<h3>4.5. Widget</h3>\n<p>小部件，和 Android 上的 Widget 一个概念。图表组件本身可以看做是一个容器，主要是一些工具栏，以及留给绘制真正图表的一块区域，不含图表本体。一个小部件实例可以包含多个图表实例</p>\n<h3>4.6. FeatureSet</h3>\n<p>功能集，Widget 配置选项中的一部分，用于定制图表库的一些功能（包括显示与否、样式）。</p>\n<h3>4.7. Overrides</h3>\n<p>覆盖，Widget 配置选项中的一部分，用于定制图表库的样式（主要是图表各部分的颜色）。整个图表库由外层 DOM 结构和内部多个 canvas 组成，因此样式相关的设置也分为两部分，这里是用于 canvas 部分的设置，另外还有一个 <code class=\"gatsby-code-text\">custom_css_url</code> 属性用于指定一个 css 文件，其中可以覆盖 DOM 部分的样式。具体的可以结合官方文档，以及 Chrome DevTool 来定位。</p>\n<h3>4.8. DataFeed</h3>\n<p>数据源，也就是接下来要讲的东西。它是 TradingView 获取、处理数据的方法集合，也是 TradingView 数据接入的核心所在，需要用户自己实现。它可以是一个 class 的实例，也可以就是一个简单的对象。</p>\n<h2>5. 如何接入自己的数据</h2>\n<p>创建图表库实例并不难，看过文档和上手案例的应该都能懂，难的在于怎么把数据给填进去。相信绝大部分为 TradingView 头疼的朋友都是卡在了这里，只要数据接通了，剩下的都是小问题。</p>\n<p>TradingView 之所能通用，在于它做到了数据和表现分离，图表库本身只提供表现的部分，不管你有什么样的数据，只要能整理成指定的格式填进去，就行。说白了，需要开发者自行实现一个适配器。</p>\n<p>TradingView 提供了两种获取数据的方式，基于 HTTP 的方案（UDF，Universal Data Feed，主仓库中的演示案例就是用的这种），和基于 WebSocket 的方案（JS API）。</p>\n<p><span\n      class=\"gatsby-resp-image-wrapper\"\n      style=\"position: relative; display: block; margin-left: auto; margin-right: auto; max-width: 572px; \"\n    >\n      <a\n    class=\"gatsby-resp-image-link\"\n    href=\"/static/202c80f8aa04762547d0eb715ee12b03/698d8/udf_or_jsapi.png\"\n    style=\"display: block\"\n    target=\"_blank\"\n    rel=\"noopener\"\n  >\n    <span\n    class=\"gatsby-resp-image-background-image\"\n    style=\"padding-bottom: 79.16666666666667%; position: relative; bottom: 0; left: 0; display: block;\"\n  ></span>\n  <img\n        class=\"gatsby-resp-image-image\"\n        alt=\"udf_or_jsapi\"\n        title=\"udf_or_jsapi\"\n        src=\"/static/202c80f8aa04762547d0eb715ee12b03/698d8/udf_or_jsapi.png\"\n        srcset=\"/static/202c80f8aa04762547d0eb715ee12b03/072e7/udf_or_jsapi.png 240w,\n/static/202c80f8aa04762547d0eb715ee12b03/9aebd/udf_or_jsapi.png 480w,\n/static/202c80f8aa04762547d0eb715ee12b03/698d8/udf_or_jsapi.png 572w\"\n        sizes=\"(max-width: 572px) 100vw, 572px\"\n        style=\"width:100%;height:100%;margin:0;vertical-align:middle;position:absolute;top:0;left:0;\"\n        loading=\"lazy\"\n      />\n  </a>\n    </span></p>\n<p>无论采用哪种方案，就数据而言都可以分为两部分：截止到目前为止的历史数据，以及之后新生成的数据。</p>\n<h3>5.1. UDF 的方案</h3>\n<p><span\n      class=\"gatsby-resp-image-wrapper\"\n      style=\"position: relative; display: block; margin-left: auto; margin-right: auto; max-width: 732px; \"\n    >\n      <a\n    class=\"gatsby-resp-image-link\"\n    href=\"/static/f67cc0586d8af331deb5512a030c0bc7/61a54/udf.png\"\n    style=\"display: block\"\n    target=\"_blank\"\n    rel=\"noopener\"\n  >\n    <span\n    class=\"gatsby-resp-image-background-image\"\n    style=\"padding-bottom: 48.75000000000001%; position: relative; bottom: 0; left: 0; display: block;\"\n  ></span>\n  <img\n        class=\"gatsby-resp-image-image\"\n        alt=\"udf\"\n        title=\"udf\"\n        src=\"/static/f67cc0586d8af331deb5512a030c0bc7/61a54/udf.png\"\n        srcset=\"/static/f67cc0586d8af331deb5512a030c0bc7/072e7/udf.png 240w,\n/static/f67cc0586d8af331deb5512a030c0bc7/9aebd/udf.png 480w,\n/static/f67cc0586d8af331deb5512a030c0bc7/61a54/udf.png 732w\"\n        sizes=\"(max-width: 732px) 100vw, 732px\"\n        style=\"width:100%;height:100%;margin:0;vertical-align:middle;position:absolute;top:0;left:0;\"\n        loading=\"lazy\"\n      />\n  </a>\n    </span></p>\n<p>UDF 是 TradingView 自己定义的一套协议。本质上其实也是调用的 JS API。协议基于 HTTP + 轮询，通过 HTTP 请求查询指定条件下的历史数据，然后不断轮询检查是否有新数据。</p>\n<p>这套方案非常简单，前端部分已经定义好，只要照着案例中提供的演示代码接入接口就可以了（演示代码是用 TypeScript 写的，有一点点额外的认知成本，不过问题不大），主要工作在于后端，需要按照要求提供相应的查询接口，其中最核心的就是获取指定商品、指定分辨率、指定时间范围的数据，具体格式参考官方文档即可。这里我们就不展开了。</p>\n<p>轮询——我们知道是一种有效但非常不推荐的做法（除非环境不支持 WebSocket，那只能用它），因为很多时候是轮不到新数据的，非常浪费性能。我们更希望的是每当有新数据到来时，能够主动通知我们，这也就引出了下面的方案。</p>\n<h3>5.2. JS API</h3>\n<p><span\n      class=\"gatsby-resp-image-wrapper\"\n      style=\"position: relative; display: block; margin-left: auto; margin-right: auto; max-width: 732px; \"\n    >\n      <a\n    class=\"gatsby-resp-image-link\"\n    href=\"/static/b0548874a12f0bf9c2099a4074c27f8f/61a54/jsapi.png\"\n    style=\"display: block\"\n    target=\"_blank\"\n    rel=\"noopener\"\n  >\n    <span\n    class=\"gatsby-resp-image-background-image\"\n    style=\"padding-bottom: 48.75000000000001%; position: relative; bottom: 0; left: 0; display: block;\"\n  ></span>\n  <img\n        class=\"gatsby-resp-image-image\"\n        alt=\"jsapi\"\n        title=\"jsapi\"\n        src=\"/static/b0548874a12f0bf9c2099a4074c27f8f/61a54/jsapi.png\"\n        srcset=\"/static/b0548874a12f0bf9c2099a4074c27f8f/072e7/jsapi.png 240w,\n/static/b0548874a12f0bf9c2099a4074c27f8f/9aebd/jsapi.png 480w,\n/static/b0548874a12f0bf9c2099a4074c27f8f/61a54/jsapi.png 732w\"\n        sizes=\"(max-width: 732px) 100vw, 732px\"\n        style=\"width:100%;height:100%;margin:0;vertical-align:middle;position:absolute;top:0;left:0;\"\n        loading=\"lazy\"\n      />\n  </a>\n    </span></p>\n<p>这是 TradingView 数据接入的核心，通过这套 API 开发者可以接入任何类型的数据，当然最常见的还是 WebSocket。前面所说的 UDF 的方案其实也是调用的这几个 API。</p>\n<p>官方文档对各个 API 都进行了描述，其中必备的有  <code class=\"gatsby-code-text\">onReady()</code> 、 <code class=\"gatsby-code-text\">resolveSymbol()</code> 、 <code class=\"gatsby-code-text\">getBars()</code> 、 <code class=\"gatsby-code-text\">subscribeBars()</code> 、 <code class=\"gatsby-code-text\">unsubscribeBars()</code> ，剩下的根据需要自行实现，这里我们只说最基本的使用。前两个没什么难度，我们重点来看下后面几个。（这里我们以 DataFeed 类的实例方法的形式来实现，你也可以简单创建一个包含这些函数的 JS 对象）</p>\n<h4>5.2.1.  <code class=\"gatsby-code-text\">getBars()</code></h4>\n<p>这个接口专门用于获取历史数据，即当前时刻之前的数据。TradingView 会根据 Resolution 从当前时刻开始往前划定一个时间范围，尝试获取这个时间范围内，指定 Symbol 指定 Resolution 的数据。出于性能考虑，TradingView 只获取可见范围内的数据，超出可见范围的数据会随着图表的拖拽、缩放而分段延迟加载。</p>\n<p>这部分的实现代码比较多，我们一步步来，先来实现一个发送数据的内部函数：</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre style=\"counter-reset: linenumber NaN\" class=\"gatsby-code-js line-numbers\"><code class=\"gatsby-code-js\"><span class=\"token function\">getBars</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">symbolInfo<span class=\"token punctuation\">,</span> resolution<span class=\"token punctuation\">,</span> <span class=\"token keyword\">from</span><span class=\"token punctuation\">,</span> to<span class=\"token punctuation\">,</span> onHistoryCallback<span class=\"token punctuation\">,</span> onErrorCallback<span class=\"token punctuation\">,</span> firstDataRequest</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">function</span> <span class=\"token function\">_send</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">data</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">// 按时间筛选</span>\n    <span class=\"token keyword\">const</span> dataInRange <span class=\"token operator\">=</span> data<span class=\"token punctuation\">.</span>length\n      <span class=\"token operator\">?</span> data<span class=\"token punctuation\">.</span><span class=\"token function\">filter</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">n</span> <span class=\"token operator\">=></span> n<span class=\"token punctuation\">.</span>time <span class=\"token operator\">>=</span> <span class=\"token function\">ensureMilliseconds</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">from</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&amp;&amp;</span> n<span class=\"token punctuation\">.</span>time <span class=\"token operator\">&lt;=</span> <span class=\"token function\">ensureMilliseconds</span><span class=\"token punctuation\">(</span>to<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n      <span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span>\n\n    <span class=\"token comment\">// 没有数据就返回 noData</span>\n    <span class=\"token keyword\">const</span> meta <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n      noData<span class=\"token operator\">:</span> <span class=\"token operator\">!</span>dataInRange<span class=\"token punctuation\">.</span>length\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token comment\">// 有数据，则整理成图表库要求的格式</span>\n    <span class=\"token keyword\">const</span> bar <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token operator\">...</span>dataInRange<span class=\"token punctuation\">]</span>\n\n    <span class=\"token comment\">// 触发回调</span>\n    <span class=\"token function\">onHistoryCallback</span><span class=\"token punctuation\">(</span>bar<span class=\"token punctuation\">,</span> meta<span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n<p>我们把这个函数作为 <code class=\"gatsby-code-text\">getBars()</code> 的内部函数，其中 <code class=\"gatsby-code-text\">from</code> 、 <code class=\"gatsby-code-text\">to</code> 、 <code class=\"gatsby-code-text\">onHistoryCallback</code> 是 API 提供的参数， <code class=\"gatsby-code-text\">data</code> 是我们获取到的数据， <code class=\"gatsby-code-text\">{ bar, meta }</code> 是 TradingView 要求的固定格式。</p>\n<p>这个函数负责调用回调函数，把我们获取到的数据传给图表。接下来，我们来获取数据（演示代码，一些涉密、兼容的代码已经省略，只保留最基本的、可公开的逻辑）：</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre style=\"counter-reset: linenumber NaN\" class=\"gatsby-code-js line-numbers\"><code class=\"gatsby-code-js\"><span class=\"token function\">getBars</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">symbolInfo<span class=\"token punctuation\">,</span> resolution<span class=\"token punctuation\">,</span> <span class=\"token keyword\">from</span><span class=\"token punctuation\">,</span> to<span class=\"token punctuation\">,</span> onHistoryCallback<span class=\"token punctuation\">,</span> onErrorCallback<span class=\"token punctuation\">,</span> firstDataRequest</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\n  <span class=\"token keyword\">function</span> <span class=\"token function\">_send</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">data</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">// ...</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token comment\">// 出于数据共享的需要</span>\n  <span class=\"token comment\">// 我们把获取到的数据放到 Redux 里</span>\n  <span class=\"token comment\">// 先尝试从 Redux 获取现有数据</span>\n  <span class=\"token keyword\">const</span> existingData <span class=\"token operator\">=</span> store<span class=\"token punctuation\">.</span><span class=\"token function\">getState</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>kChartData <span class=\"token operator\">||</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span>\n\n  <span class=\"token comment\">// 如果已有数据，直接读取</span>\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>existingData<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token function\">_send</span><span class=\"token punctuation\">(</span>existingData<span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">return</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token comment\">// 没数据则通过 WebSocket 加载</span>\n  <span class=\"token comment\">// 我们的设计是历史数据和实时更新都走 WebSocket</span>\n  <span class=\"token comment\">// 首次推送历史数据，后续推送更新</span>\n  <span class=\"token comment\">// 所以同一交易对、分辨率，只会发起一个 WebSocket 请求</span>\n\n  <span class=\"token comment\">// 先判断功能支持度</span>\n  <span class=\"token comment\">// 这里我们用 WebWorker 把 WebSocket 的逻辑独立到主线程之外</span>\n  <span class=\"token comment\">// 以达到性能优化的目的，这个后面再详述。</span>\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>window<span class=\"token punctuation\">.</span>Worker<span class=\"token punctuation\">)</span> <span class=\"token keyword\">return</span>\n\n  <span class=\"token comment\">// 限制 Worker 单例</span>\n  <span class=\"token keyword\">const</span> hasWSInstance <span class=\"token operator\">=</span> <span class=\"token operator\">!</span><span class=\"token operator\">!</span>window<span class=\"token punctuation\">.</span>kChartWorker\n  window<span class=\"token punctuation\">.</span>kChartWorker <span class=\"token operator\">=</span> window<span class=\"token punctuation\">.</span>kChartWorker <span class=\"token operator\">||</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">window<span class=\"token punctuation\">.</span>Worker</span><span class=\"token punctuation\">(</span><span class=\"token string\">'./worker-kchart.js'</span><span class=\"token punctuation\">)</span>\n\n  <span class=\"token comment\">// WebWorker 数据推送回调</span>\n  window<span class=\"token punctuation\">.</span>kChartWorker<span class=\"token punctuation\">.</span><span class=\"token function-variable function\">onmessage</span> <span class=\"token operator\">=</span> <span class=\"token parameter\">e</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">const</span> <span class=\"token punctuation\">{</span> data <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span> <span class=\"token punctuation\">}</span> <span class=\"token operator\">=</span> e\n\n    <span class=\"token comment\">// 当有数据推送时</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>data<span class=\"token punctuation\">.</span>kChartData<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token comment\">// 获取已有数据</span>\n      <span class=\"token keyword\">const</span> kChartData <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token operator\">...</span>store<span class=\"token punctuation\">.</span><span class=\"token function\">getState</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>kChartData<span class=\"token punctuation\">]</span>\n      <span class=\"token comment\">// 因为数据更新都在末端，所以倒序以加速搜索</span>\n      <span class=\"token keyword\">const</span> kChartDataReversed <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token operator\">...</span>kChartData<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span><span class=\"token function\">reverse</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\n      <span class=\"token comment\">// 将更新合并到已有数据</span>\n      <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> item <span class=\"token keyword\">of</span> <span class=\"token punctuation\">[</span><span class=\"token operator\">...</span>data<span class=\"token punctuation\">.</span>kChartData<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">const</span> idx <span class=\"token operator\">=</span> kChartDataReversed<span class=\"token punctuation\">.</span><span class=\"token function\">findIndex</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">n</span> <span class=\"token operator\">=></span> n<span class=\"token punctuation\">.</span>time <span class=\"token operator\">===</span> item<span class=\"token punctuation\">.</span>time<span class=\"token punctuation\">)</span>\n        idx <span class=\"token operator\">&lt;</span> <span class=\"token number\">0</span>\n          <span class=\"token operator\">?</span> kChartData<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span>item<span class=\"token punctuation\">)</span>\n          <span class=\"token operator\">:</span> kChartData<span class=\"token punctuation\">[</span>kChartData<span class=\"token punctuation\">.</span>length <span class=\"token operator\">-</span> <span class=\"token number\">1</span> <span class=\"token operator\">-</span> idx<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span> <span class=\"token operator\">...</span>kChartData<span class=\"token punctuation\">[</span>idx<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> <span class=\"token operator\">...</span>item <span class=\"token punctuation\">}</span>\n      <span class=\"token punctuation\">}</span>\n\n      <span class=\"token comment\">// 把新数据记录到 Redux</span>\n      <span class=\"token keyword\">const</span> promise <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Promise</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">resolve<span class=\"token punctuation\">,</span> reject</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n        store<span class=\"token punctuation\">.</span><span class=\"token function\">dispatch</span><span class=\"token punctuation\">(</span><span class=\"token function\">setKChartData</span><span class=\"token punctuation\">(</span>kChartData<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n        <span class=\"token function\">resolve</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n          total<span class=\"token operator\">:</span> kChartData<span class=\"token punctuation\">,</span>\n          updates<span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span><span class=\"token operator\">...</span>data<span class=\"token punctuation\">.</span>kChartData<span class=\"token punctuation\">]</span>\n        <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n      <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n\n      promise<span class=\"token punctuation\">.</span><span class=\"token function\">then</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">res</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n        <span class=\"token comment\">// dataInited 是我们自定义的一个变量</span>\n        <span class=\"token comment\">// 用来区分首次推送和后续推送</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>dataInited<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n          <span class=\"token comment\">// 如非首次推送</span>\n          <span class=\"token comment\">// 对全局 K 线订阅列表中的每个订阅者（后面详述）</span>\n          window<span class=\"token punctuation\">.</span>kChartSubscriberList <span class=\"token operator\">=</span> window<span class=\"token punctuation\">.</span>kChartSubscriberList <span class=\"token operator\">||</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span>\n          <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> sub <span class=\"token keyword\">of</span> window<span class=\"token punctuation\">.</span>kChartSubscriberList<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token comment\">// 按交易对、分辨率筛选</span>\n            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>sub<span class=\"token punctuation\">.</span>symbol<span class=\"token punctuation\">.</span>id <span class=\"token operator\">!==</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>symbol<span class=\"token punctuation\">.</span>id<span class=\"token punctuation\">)</span> <span class=\"token keyword\">return</span>\n            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>sub<span class=\"token punctuation\">.</span>resolution <span class=\"token operator\">!==</span> resolution<span class=\"token punctuation\">)</span> <span class=\"token keyword\">return</span>\n\n            <span class=\"token comment\">// 通过回调函数推送数据</span>\n            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">typeof</span> sub<span class=\"token punctuation\">.</span>callback <span class=\"token operator\">!==</span> <span class=\"token string\">'function'</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">return</span>\n            <span class=\"token comment\">// 图表库一次只能增加一条数据，或更新离现在时间最近的一条历史数据</span>\n            <span class=\"token comment\">// 而我们的推送数据是个数组，可能会包含不止一条数据</span>\n            <span class=\"token comment\">// 所以这里要逐个推送</span>\n            <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> update <span class=\"token keyword\">of</span> res<span class=\"token punctuation\">.</span>updates<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n              sub<span class=\"token punctuation\">.</span><span class=\"token function\">callback</span><span class=\"token punctuation\">(</span>update<span class=\"token punctuation\">)</span>\n            <span class=\"token punctuation\">}</span>\n          <span class=\"token punctuation\">}</span>\n        <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span>\n          <span class=\"token comment\">// 首次推送</span>\n          <span class=\"token function\">_send</span><span class=\"token punctuation\">(</span>res<span class=\"token punctuation\">.</span>total<span class=\"token punctuation\">)</span>\n          <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>dataInited <span class=\"token operator\">=</span> <span class=\"token boolean\">true</span>\n        <span class=\"token punctuation\">}</span>\n      <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token comment\">// 准备 WebWorker 消息</span>\n  <span class=\"token comment\">// 只有当没有现成数据的时候</span>\n  <span class=\"token comment\">// 才会执行到这里</span>\n  <span class=\"token comment\">// 所以只有在初始化、切换交易对/分辨率的时候</span>\n  <span class=\"token comment\">// 才会发起 WebSocket 请求</span>\n  <span class=\"token keyword\">const</span> msg <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n    action<span class=\"token operator\">:</span> hasWSInstance <span class=\"token operator\">?</span> <span class=\"token string\">'restart'</span> <span class=\"token operator\">:</span> <span class=\"token string\">'init'</span><span class=\"token punctuation\">,</span>\n    symbol<span class=\"token operator\">:</span> symbolInfo<span class=\"token punctuation\">,</span>\n    resolution<span class=\"token operator\">:</span> resolution<span class=\"token punctuation\">,</span>\n    url<span class=\"token operator\">:</span> <span class=\"token constant\">WEBSOCKET_URL</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token comment\">// 发送 WebWorker 消息</span>\n  window<span class=\"token punctuation\">.</span>kChartWorker<span class=\"token punctuation\">.</span><span class=\"token function\">postMessage</span><span class=\"token punctuation\">(</span>msg<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span></code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n<p>到这里，我们已经成功获取到历史数据，并把实时更新的推送发送给了各个订阅者（虽然理论上可能始终只有一个订阅者，但从系统设计角度，我们还是这样设计了）。</p>\n<p><code class=\"gatsby-code-text\">getBars()</code> 其实还好，只要搞清楚其工作机制，其实没什么特别难的，更多的是数据结构的设计以及性能方面的优化。相信令很多人费解的是下面这个函数。</p>\n<h4>5.2.2.  <code class=\"gatsby-code-text\">subscribeBars()</code></h4>\n<p>文档中说这个函数是用来订阅 K 线数据的，再加上“ <code class=\"gatsby-code-text\">getBars()</code> 的 <code class=\"gatsby-code-text\">onHistoryCallback</code> 回调仅一次调用”，这两句话误导了不少人，以为 <code class=\"gatsby-code-text\">getBars()</code> 只会被调用一次，获取完历史数据就结束了，实时推送的获取需要在 <code class=\"gatsby-code-text\">subscribeBars()</code> 里实现。事实上，这里只是增加一个订阅者，把添加更新数据的回调函数存到外层，回调函数的调用实际是在前面 <code class=\"gatsby-code-text\">getBars()</code> 里完成的。相当于这个函数只是排个队，所有数据的获取和分发都在 <code class=\"gatsby-code-text\">getBars()</code> 里进行。</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre style=\"counter-reset: linenumber NaN\" class=\"gatsby-code-js line-numbers\"><code class=\"gatsby-code-js\"><span class=\"token function\">subscribeBars</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">symbolInfo<span class=\"token punctuation\">,</span> resolution<span class=\"token punctuation\">,</span> onRealtimeCallback<span class=\"token punctuation\">,</span> subscriberUID<span class=\"token punctuation\">,</span> onResetCacheNeededCallback</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token comment\">// 限制单例</span>\n  window<span class=\"token punctuation\">.</span>kChartSubscriberList <span class=\"token operator\">=</span> window<span class=\"token punctuation\">.</span>kChartSubscriberList <span class=\"token operator\">||</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span>\n\n  <span class=\"token keyword\">const</span> found <span class=\"token operator\">=</span> window<span class=\"token punctuation\">.</span>kChartSubscriberList<span class=\"token punctuation\">.</span><span class=\"token function\">some</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">n</span> <span class=\"token operator\">=></span> n<span class=\"token punctuation\">.</span>uid <span class=\"token operator\">===</span> subscriberUID<span class=\"token punctuation\">)</span>\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>found<span class=\"token punctuation\">)</span> <span class=\"token keyword\">return</span>\n\n  <span class=\"token comment\">// 添加订阅</span>\n  window<span class=\"token punctuation\">.</span>kChartSubscriberList<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n    symbol<span class=\"token operator\">:</span> symbolInfo<span class=\"token punctuation\">,</span>\n    resolution<span class=\"token operator\">:</span> resolution<span class=\"token punctuation\">,</span>\n    uid<span class=\"token operator\">:</span> subscriberUID<span class=\"token punctuation\">,</span>\n    callback<span class=\"token operator\">:</span> onRealtimeCallback\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span></code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n<p>这个函数对每个 Symbol + Resolution 的组合都会调用一次，把对应的识别信息和回调函数传递到订阅列表，当推送数据到达时，会遍历订阅列表，找到符合条件的订阅者，调用其回调函数传递数据。其实就是个基本的“观察者模式”。</p>\n<h4>5.2.3.  <code class=\"gatsby-code-text\">unsubscribeBars()</code></h4>\n<p>了解完 <code class=\"gatsby-code-text\">subscribeBars()</code> ，那其实 <code class=\"gatsby-code-text\">unsubscribeBars()</code> 也就很明白了，简单带过：</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre style=\"counter-reset: linenumber NaN\" class=\"gatsby-code-js line-numbers\"><code class=\"gatsby-code-js\"><span class=\"token function\">unsubscribeBars</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">subscriberUID</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  window<span class=\"token punctuation\">.</span>kChartSubscriberList <span class=\"token operator\">=</span> window<span class=\"token punctuation\">.</span>kChartSubscriberList <span class=\"token operator\">||</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span>\n\n  <span class=\"token keyword\">const</span> idx <span class=\"token operator\">=</span> window<span class=\"token punctuation\">.</span>kChartSubscriberList<span class=\"token punctuation\">.</span><span class=\"token function\">findIndex</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">n</span> <span class=\"token operator\">=></span> n<span class=\"token punctuation\">.</span>uid <span class=\"token operator\">===</span> subscriberUID<span class=\"token punctuation\">)</span>\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>idx <span class=\"token operator\">&lt;</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">return</span>\n\n  window<span class=\"token punctuation\">.</span>kChartSubscriberList<span class=\"token punctuation\">.</span><span class=\"token function\">splice</span><span class=\"token punctuation\">(</span>idx<span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span></code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n<h2>6. 如何切换交易对/分辨率</h2>\n<p>创建完 widget 实例之后，就可以通过特定的方法获取 chart 实例，然后通过特定方法更新 Symbol 和 Resolution，更新操作会以新的参数重新触发之前提到的几个函数。从这个角度看，这几个函数就有点像是生命周期函数，描述了获取数据、订阅更新等一列的操作发生的时机，有开发者决定什么时候该做什么事。</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre style=\"counter-reset: linenumber NaN\" class=\"gatsby-code-js line-numbers\"><code class=\"gatsby-code-js\"><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>widget <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">window<span class=\"token punctuation\">.</span>TradingView<span class=\"token punctuation\">.</span>widget</span><span class=\"token punctuation\">(</span>widgetOptions<span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>widget<span class=\"token punctuation\">.</span><span class=\"token function\">onChartReady</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>chart <span class=\"token operator\">=</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>widget<span class=\"token punctuation\">.</span><span class=\"token function\">chart</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\n  <span class=\"token comment\">// 设置图表类型（比如分时图和常规的蜡烛图的类型就不一样）</span>\n  <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>chart<span class=\"token punctuation\">.</span><span class=\"token function\">setChartType</span><span class=\"token punctuation\">(</span>chartType<span class=\"token punctuation\">)</span>\n\n  <span class=\"token comment\">// 切换 Symbol</span>\n  <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>chart<span class=\"token punctuation\">.</span><span class=\"token function\">setSymbol</span><span class=\"token punctuation\">(</span>symbol<span class=\"token punctuation\">,</span> callback<span class=\"token punctuation\">)</span>\n\n  <span class=\"token comment\">// 切换 Resolution</span>\n  <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>chart<span class=\"token punctuation\">.</span><span class=\"token function\">setResolution</span><span class=\"token punctuation\">(</span>resolution<span class=\"token punctuation\">,</span> callback<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span></code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n<h2>7. TradingView 的其他坑</h2>\n<ul>\n<li>JS API 中的函数，会在合适的时机自动调用，并传入实参，不用考虑把函数拿到外层去手动调用。</li>\n<li>JS API 中的 <code class=\"gatsby-code-text\">onReady()</code> 和 <code class=\"gatsby-code-text\">resolveSymbol()</code> 这两个函数，它们的回调函数必须异步调用，别问为什么，人家要求的。</li>\n<li>切换 Symbol 和 Resolution 的函数都有一个回调，如果设置的新值和当前现有的值相同，这个回调是不会触发的。</li>\n</ul>\n<h2>8. K 线性能优化</h2>\n<p>在使用 WebSocket 的过程中，我们用到了 WebWorker 进行性能优化。当交易频率达到一定的程度，WebSocket 会频繁向客户端推送数据，如果把这部分逻辑直接放到 React 组件中，一有新数据就去 <code class=\"gatsby-code-text\">setState()</code> ，那么页面立马就会被卡得死死的（惨痛的教训）。原理也很简单，间隔时间极短的 <code class=\"gatsby-code-text\">setState()</code> 会被缓存起来，合并成一次去更新，以减少不必要的计算和渲染，如果数据持续频繁地灌进来，就会攒下一大堆的更新没有被 commit，组件始终进入不了下一轮的 render；加上每次新数据进来都需要和老数据进行增量合并，高频率高负荷的计算会占用主线程的资源，导致没有足够的运算资源用于页面渲染，页面也就卡死了。</p>\n<p>明白了这一点，那么方案也就出来了，就是把这些计算密集型的任务从主线程里拿出去，交给并发线程，也就是 WebWorker，去执行。但光是把计算交出去还不够，虽然主线程的计算负载下来了，但更新还是很频繁。科学数据显示，人眼的视觉停留时间大约在 0.1 秒左右，也就是说，即便真的让页面上的数字一秒变化个十几次甚至更多，人眼也根本来不及看清楚，从使用的角度来讲，1 秒变化个 4-5 次已经是极限了，即便 0.5 秒更新一次也完全不影响，所以我们大可不必按照 WebSocket 数据推送的频率去更新页面，我们完全可以建立一个缓冲带，把 WebSocket 推送过来的数据缓存到一个小型的数组里，每隔固定时间间隔去检查数组是否有内容，有就通知主线程更新，没有就啥也别做，这样就在性能和效果之间找到了一个平衡点。</p>\n<p>有些人会关心 WebWorker 的兼容性问题，毕竟一般的 H5 页很少会用到这个，不太熟。WebWorker 的浏览器兼容情况和 WebSocket 大致相同，至少在我们关心的范围内，是一致的，都是 IE 10 及以上，常青藤浏览器不用多说早就都支持了，所以除非你还有必须兼容老古董的需求，放心用好了。</p>\n<h2>9. 小结</h2>\n<p>交易所的这个项目，应该算是近年来接手的比较大的一个项目了，涉及的东西很多，其中不少之前都没接触过，都是现学现卖。过程中遇到了不少的坑，也有了不小的成长。后续我还会分享一些其他方面遇到的坑。</p>","frontmatter":{"title":"TradingView + WebSocket 脱坑指南","description":"让我来告诉你，K 线到底该怎么画","cover":{"publicURL":"/static/1ceaf53d99815784a18273970e741bfd/tradingview.jpg"},"tags":["tradingview","chart","library","guide","websocket","webworker","ohlc","kchart"],"series":"","draft":false},"fields":{"id":"tradingview-charting-library-simple-guide","date":"2018-09-22"},"headings":[{"value":"0. 竟然被催更了","depth":2},{"value":"1. TradingView 是个啥","depth":2},{"value":"2. 专业 === 麻烦","depth":2},{"value":"3. 为了节约时间","depth":2},{"value":"4. 先说一下概念","depth":2},{"value":"4.1. Symbol","depth":3},{"value":"4.2. Resolution","depth":3},{"value":"4.3. Study","depth":3},{"value":"4.4. Chart","depth":3},{"value":"4.5. Widget","depth":3},{"value":"4.6. FeatureSet","depth":3},{"value":"4.7. Overrides","depth":3},{"value":"4.8. DataFeed","depth":3},{"value":"5. 如何接入自己的数据","depth":2},{"value":"5.1. UDF 的方案","depth":3},{"value":"5.2. JS API","depth":3},{"value":"5.2.1.  <code class=\"gatsby-code-text\">getBars()</code>","depth":4},{"value":"5.2.2.  <code class=\"gatsby-code-text\">subscribeBars()</code>","depth":4},{"value":"5.2.3.  <code class=\"gatsby-code-text\">unsubscribeBars()</code>","depth":4},{"value":"6. 如何切换交易对/分辨率","depth":2},{"value":"7. TradingView 的其他坑","depth":2},{"value":"8. K 线性能优化","depth":2},{"value":"9. 小结","depth":2}],"tableOfContents":"<ul>\n<li><a href=\"/blog/2018/09/22/tradingview-charting-library-simple-guide/#0-%E7%AB%9F%E7%84%B6%E8%A2%AB%E5%82%AC%E6%9B%B4%E4%BA%86\">0. 竟然被催更了</a></li>\n<li><a href=\"/blog/2018/09/22/tradingview-charting-library-simple-guide/#1-tradingview-%E6%98%AF%E4%B8%AA%E5%95%A5\">1. TradingView 是个啥</a></li>\n<li><a href=\"/blog/2018/09/22/tradingview-charting-library-simple-guide/#2-%E4%B8%93%E4%B8%9A--%E9%BA%BB%E7%83%A6\">2. 专业 === 麻烦</a></li>\n<li><a href=\"/blog/2018/09/22/tradingview-charting-library-simple-guide/#3-%E4%B8%BA%E4%BA%86%E8%8A%82%E7%BA%A6%E6%97%B6%E9%97%B4\">3. 为了节约时间</a></li>\n<li>\n<p><a href=\"/blog/2018/09/22/tradingview-charting-library-simple-guide/#4-%E5%85%88%E8%AF%B4%E4%B8%80%E4%B8%8B%E6%A6%82%E5%BF%B5\">4. 先说一下概念</a></p>\n<ul>\n<li><a href=\"/blog/2018/09/22/tradingview-charting-library-simple-guide/#41-symbol\">4.1. Symbol</a></li>\n<li><a href=\"/blog/2018/09/22/tradingview-charting-library-simple-guide/#42-resolution\">4.2. Resolution</a></li>\n<li><a href=\"/blog/2018/09/22/tradingview-charting-library-simple-guide/#43-study\">4.3. Study</a></li>\n<li><a href=\"/blog/2018/09/22/tradingview-charting-library-simple-guide/#44-chart\">4.4. Chart</a></li>\n<li><a href=\"/blog/2018/09/22/tradingview-charting-library-simple-guide/#45-widget\">4.5. Widget</a></li>\n<li><a href=\"/blog/2018/09/22/tradingview-charting-library-simple-guide/#46-featureset\">4.6. FeatureSet</a></li>\n<li><a href=\"/blog/2018/09/22/tradingview-charting-library-simple-guide/#47-overrides\">4.7. Overrides</a></li>\n<li><a href=\"/blog/2018/09/22/tradingview-charting-library-simple-guide/#48-datafeed\">4.8. DataFeed</a></li>\n</ul>\n</li>\n<li>\n<p><a href=\"/blog/2018/09/22/tradingview-charting-library-simple-guide/#5-%E5%A6%82%E4%BD%95%E6%8E%A5%E5%85%A5%E8%87%AA%E5%B7%B1%E7%9A%84%E6%95%B0%E6%8D%AE\">5. 如何接入自己的数据</a></p>\n<ul>\n<li><a href=\"/blog/2018/09/22/tradingview-charting-library-simple-guide/#51-udf-%E7%9A%84%E6%96%B9%E6%A1%88\">5.1. UDF 的方案</a></li>\n<li>\n<p><a href=\"/blog/2018/09/22/tradingview-charting-library-simple-guide/#52-js-api\">5.2. JS API</a></p>\n<ul>\n<li><a href=\"/blog/2018/09/22/tradingview-charting-library-simple-guide/#521--code-classgatsby-code-textgetbarscode\">5.2.1.  <code class=\"gatsby-code-text\">getBars()</code></a></li>\n<li><a href=\"/blog/2018/09/22/tradingview-charting-library-simple-guide/#522--code-classgatsby-code-textsubscribebarscode\">5.2.2.  <code class=\"gatsby-code-text\">subscribeBars()</code></a></li>\n<li><a href=\"/blog/2018/09/22/tradingview-charting-library-simple-guide/#523--code-classgatsby-code-textunsubscribebarscode\">5.2.3.  <code class=\"gatsby-code-text\">unsubscribeBars()</code></a></li>\n</ul>\n</li>\n</ul>\n</li>\n<li><a href=\"/blog/2018/09/22/tradingview-charting-library-simple-guide/#6-%E5%A6%82%E4%BD%95%E5%88%87%E6%8D%A2%E4%BA%A4%E6%98%93%E5%AF%B9%E5%88%86%E8%BE%A8%E7%8E%87\">6. 如何切换交易对/分辨率</a></li>\n<li><a href=\"/blog/2018/09/22/tradingview-charting-library-simple-guide/#7-tradingview-%E7%9A%84%E5%85%B6%E4%BB%96%E5%9D%91\">7. TradingView 的其他坑</a></li>\n<li><a href=\"/blog/2018/09/22/tradingview-charting-library-simple-guide/#8-k-%E7%BA%BF%E6%80%A7%E8%83%BD%E4%BC%98%E5%8C%96\">8. K 线性能优化</a></li>\n<li><a href=\"/blog/2018/09/22/tradingview-charting-library-simple-guide/#9-%E5%B0%8F%E7%BB%93\">9. 小结</a></li>\n</ul>","timeToRead":14}},"pageContext":{"slug":"/blog/2018/09/22/tradingview-charting-library-simple-guide"}}}