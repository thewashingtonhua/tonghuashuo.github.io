{"componentChunkName":"component---src-templates-blog-post-tsx","path":"/blog/2018/06/14/es6-daily-16-generator copy","webpackCompilationHash":"","result":{"data":{"site":{"siteMetadata":{"title":"童话说","keywords":["tonghuashuo","github","front-end","javascript","typescript","react","node","washington","hua","童话","童话说","前端","博客","技术","计算机","互联网"]}},"markdownRemark":{"html":"<h2>什么是 Generator ？</h2>\n<p>Generator 函数是 ES6 引入的一种异步编程解决方案，在之前讲<a href=\"./es6-daily-14-iterator\">Iterator</a>和<a href=\"./es6-daily-15-promise\">Promise</a>的时候有提到过。</p>\n<p>Generator 从字面上理解，叫“生成器”，单看名字感觉和工厂函数有关，似乎是用来创建某些东西的。可以把 Generator 理解为一个状态机，可以在其内部封装多个状态，按序进行产出。执行 Generator 会返回一个遍历器对象，遍历得到的内容就是其内部的各种状态。所以 Generator 实际上是生成了一个可遍历的状态序列。</p>\n<h2>Generator 的基本语法</h2>\n<p>Generator 函数跟普通函数没什么两样，但是有两个特征：</p>\n<p>一是 <code class=\"gatsby-code-text\">function</code> 关键字与函数名之间有一个星号，具体是更靠近 <code class=\"gatsby-code-text\">function</code> 关键字，还是更靠近函数名，这个没有规定，跟随团队当前所用的代码风格走就好，一般会选择靠近 <code class=\"gatsby-code-text\">function</code> ，因为 Generator 本身还是一个普通函数，只是在定义的时候有所不同。值得注意的一点是，不能使用箭头函数来定义 Generator。</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre style=\"counter-reset: linenumber NaN\" class=\"gatsby-code-js line-numbers\"><code class=\"gatsby-code-js\"><span class=\"token keyword\">function</span> <span class=\"token operator\">*</span> <span class=\"token function\">gen</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span> <span class=\"token comment\">// 函数定义</span>\n<span class=\"token keyword\">const</span> <span class=\"token function-variable function\">gen</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span> <span class=\"token operator\">*</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span>  <span class=\"token comment\">// 函数表达式</span>\n<span class=\"token keyword\">const</span> gen <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span> <span class=\"token operator\">*</span> <span class=\"token function\">gen</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span> <span class=\"token punctuation\">}</span>   <span class=\"token comment\">// 函数定义的简写</span>\n\n<span class=\"token comment\">// 注意，没有这样的写法</span>\n<span class=\"token comment\">// const gen = * () => {}</span></code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n<p>二是函数体内用 <code class=\"gatsby-code-text\">yield</code> 表达式产出不同的状态，这是 Generator 特有的一个表达式，不能在普通函数中使用。</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre style=\"counter-reset: linenumber NaN\" class=\"gatsby-code-js line-numbers\"><code class=\"gatsby-code-js\"><span class=\"token keyword\">function</span><span class=\"token operator\">*</span> <span class=\"token function\">gen</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">yield</span> <span class=\"token string\">'hello'</span>\n  <span class=\"token keyword\">yield</span> <span class=\"token string\">'world'</span>\n  <span class=\"token keyword\">return</span> <span class=\"token string\">'end'</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">const</span> hw <span class=\"token operator\">=</span> <span class=\"token function\">gen</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\nhw<span class=\"token punctuation\">.</span><span class=\"token function\">next</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// { value: 'hello', done: false}</span>\nhw<span class=\"token punctuation\">.</span><span class=\"token function\">next</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// { value: 'world', done: false}</span>\nhw<span class=\"token punctuation\">.</span><span class=\"token function\">next</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// { value: 'end', done: true}</span>\nhw<span class=\"token punctuation\">.</span><span class=\"token function\">next</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// { value: undefined, done: true}</span></code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n<p>如上代码所示，Generator 函数除了定义阶段有些许不同，调用方式和普通函数一样，只不过调用 Generator 并不直接执行函数体的内容，而是返回一个遍历器对象，必须要对这个遍历器对象调用 <code class=\"gatsby-code-text\">next()</code> 才会开始执行函数体，把指针移动到下一个 <code class=\"gatsby-code-text\">yield</code> 表达式，产出其对应的状态， <code class=\"gatsby-code-text\">value</code>  就是 <code class=\"gatsby-code-text\">yield</code> 表达式的值， <code class=\"gatsby-code-text\">done</code> 表示之后是否还有 <code class=\"gatsby-code-text\">yield</code> 表达式。</p>\n<p>注意，Generator 不能使用 <code class=\"gatsby-code-text\">new</code> 来创建实例（但可以通过改造来达到同样的效果）</p>\n<h2>yield 表达式</h2>\n<p>Generator 中使用 yield 表达式来暂停后续函数的执行，并将紧跟其后的表达式的值作为返回对象的 <code class=\"gatsby-code-text\">value</code> 属性进行产出（yield 字面意思就是“产出”）。下次调用 <code class=\"gatsby-code-text\">next()</code> 时，继续执行，直到下一个 <code class=\"gatsby-code-text\">yield</code> ；或遇到 <code class=\"gatsby-code-text\">return</code> ，那么就把 <code class=\"gatsby-code-text\">return</code> 的值作为最后一个状态的 <code class=\"gatsby-code-text\">value</code> ；或函数运行到最后一行 <code class=\"gatsby-code-text\">return</code> ，那么最后一个状态的 <code class=\"gatsby-code-text\">value</code> 就是 <code class=\"gatsby-code-text\">undefined</code> 。</p>\n<p> <code class=\"gatsby-code-text\">yield</code> 后面的表达式只有在调用 <code class=\"gatsby-code-text\">next()</code> 时，内部指针指向该语句，才会执行，这等于是为 JS 提供了手动惰性求值的特性。</p>\n<p>Generator 函数可以不用 <code class=\"gatsby-code-text\">yield</code> 表达式，这时就变成了一个单纯的暂缓执行函数，函数在调用时并不会执行函数体里的内容，直到手动调用 <code class=\"gatsby-code-text\">next()</code> 才会执行，并且一次性执行完毕。</p>\n<p> <code class=\"gatsby-code-text\">yield</code> 如果嵌套使用在另一个表达式中，必须放在圆括号里。</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre style=\"counter-reset: linenumber NaN\" class=\"gatsby-code-js line-numbers\"><code class=\"gatsby-code-js\"><span class=\"token keyword\">function</span><span class=\"token operator\">*</span> <span class=\"token function\">gen</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'Hello'</span> <span class=\"token operator\">+</span> <span class=\"token keyword\">yield</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>       <span class=\"token comment\">// SyntaxError</span>\n  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'Hello'</span> <span class=\"token operator\">+</span> <span class=\"token keyword\">yield</span> <span class=\"token number\">123</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>   <span class=\"token comment\">// SyntaxError</span>\n\n  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'Hello'</span> <span class=\"token operator\">+</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">yield</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>     <span class=\"token comment\">// OK</span>\n  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'Hello'</span> <span class=\"token operator\">+</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">yield</span> <span class=\"token number\">123</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// OK</span>\n<span class=\"token punctuation\">}</span></code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n<p> <code class=\"gatsby-code-text\">yield</code> 表达式单独作为参数或者右值时，可以不加括号</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre style=\"counter-reset: linenumber NaN\" class=\"gatsby-code-js line-numbers\"><code class=\"gatsby-code-js\"><span class=\"token keyword\">function</span><span class=\"token operator\">*</span> <span class=\"token function\">gen</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token function\">foo</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">yield</span> <span class=\"token string\">'a'</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">yield</span> <span class=\"token string\">'b'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// OK</span>\n  <span class=\"token keyword\">let</span> input <span class=\"token operator\">=</span> <span class=\"token keyword\">yield</span><span class=\"token punctuation\">;</span>         <span class=\"token comment\">// OK</span>\n<span class=\"token punctuation\">}</span></code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span><span></span></span></pre></div>\n<h2>yield 和 return 的区别</h2>\n<p> <code class=\"gatsby-code-text\">yield</code> 和 <code class=\"gatsby-code-text\">return</code> 很相似，都是返回紧跟在语句后面的表达式的值。区别在于：</p>\n<ul>\n<li><code class=\"gatsby-code-text\">yield</code> 会暂停函数，下次再从该位置仅需执行， <code class=\"gatsby-code-text\">return</code> 不会记忆位置。</li>\n<li>一个函数里只能执行一次 <code class=\"gatsby-code-text\">return</code> ，执行后函数就退出了。但可以执行多次 <code class=\"gatsby-code-text\">yield</code> ，执行后只是暂停函数并返回表示当前状态的对象，并不一定会导致函数退出。这也是 Generator 区别于其他函数的最大一点，普通函数只能返回一个值，Generator 可以返回一系列的值，这也是它名称的由来（生成器），配合循环可以用于生成集合数据结构。</li>\n</ul>\n<h2>与 Iterator 接口的关系</h2>\n<p>任意一个对象的 <code class=\"gatsby-code-text\">Symbol.iterator</code> 方法，等于该对象的遍历器生成函数，调用这个函数就会返回该对象的一个遍历器对象。Generator 函数就是遍历器生成函数，所以可以直接把 Generator 赋值给 <code class=\"gatsby-code-text\">Symbol.iterator</code> ，以此来部署 Iterator 接口。</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre style=\"counter-reset: linenumber NaN\" class=\"gatsby-code-js line-numbers\"><code class=\"gatsby-code-js\"><span class=\"token keyword\">var</span> myIterable <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\nmyIterable<span class=\"token punctuation\">[</span>Symbol<span class=\"token punctuation\">.</span>iterator<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span><span class=\"token operator\">*</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">yield</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">yield</span> <span class=\"token number\">2</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">yield</span> <span class=\"token number\">3</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token punctuation\">[</span><span class=\"token operator\">...</span>myIterable<span class=\"token punctuation\">]</span> <span class=\"token comment\">// [1, 2, 3]</span></code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n<h2>next() 的参数</h2>\n<p> <code class=\"gatsby-code-text\">yield</code> 表达式本身并没有返回值，如果尝试执行 <code class=\"gatsby-code-text\">const foo = yield 1</code> ， <code class=\"gatsby-code-text\">foo</code> 的值会是 <code class=\"gatsby-code-text\">undifined</code> 。可以在调用 <code class=\"gatsby-code-text\">next()</code> 时传入一个参数，作为上一个 <code class=\"gatsby-code-text\">yield</code> 的返回值。第一次调用 <code class=\"gatsby-code-text\">next()</code> 时不应该传入参数，因为这一步只是为了启动 Generator，还不存在“上一个 yield”；即便传入了也会被忽略。</p>\n<p>利用这一点，可以在 Generator 执行过程中改变其上下文，进而调整其行为。</p>\n<h2>for...of</h2>\n<p> <code class=\"gatsby-code-text\">for...of</code> 循环可以自动遍历 Generator 生成的 Iterator 对象，而不需要手动调用 <code class=\"gatsby-code-text\">next()</code> 方法。 <code class=\"gatsby-code-text\">for...of</code> 会依次获取每次 <code class=\"gatsby-code-text\">yield</code> 表达式的值，直到某一次 <code class=\"gatsby-code-text\">next()</code> 返回的对象的 <code class=\"gatsby-code-text\">done</code> 属性为 <code class=\"gatsby-code-text\">true</code> 时终止，或者遇到了 <code class=\"gatsby-code-text\">return</code> 。</p>\n<p>配合 Generator，可以用 <code class=\"gatsby-code-text\">for...of</code> 遍历任意对象。一种方法是给对象外面包一层，将对象的键值对以二维数组形式给 <code class=\"gatsby-code-text\">yield</code> 出来。</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre style=\"counter-reset: linenumber NaN\" class=\"gatsby-code-js line-numbers\"><code class=\"gatsby-code-js\"><span class=\"token keyword\">function</span><span class=\"token operator\">*</span> <span class=\"token function\">objectEntries</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">obj</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> propKeys <span class=\"token operator\">=</span> Reflect<span class=\"token punctuation\">.</span><span class=\"token function\">ownKeys</span><span class=\"token punctuation\">(</span>obj<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> propKey <span class=\"token keyword\">of</span> propKeys<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">yield</span> <span class=\"token punctuation\">[</span>propKey<span class=\"token punctuation\">,</span> obj<span class=\"token punctuation\">[</span>propKey<span class=\"token punctuation\">]</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">const</span> jane <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span> first<span class=\"token punctuation\">:</span> <span class=\"token string\">'Jane'</span><span class=\"token punctuation\">,</span> last<span class=\"token punctuation\">:</span> <span class=\"token string\">'Doe'</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> <span class=\"token punctuation\">[</span>key<span class=\"token punctuation\">,</span> value<span class=\"token punctuation\">]</span> <span class=\"token keyword\">of</span> <span class=\"token function\">objectEntries</span><span class=\"token punctuation\">(</span>jane<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>key<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\">: </span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>value<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token comment\">// first: Jane</span>\n<span class=\"token comment\">// last: Doe</span></code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n<p>另一种方法是把 Generator 加到对象的 <code class=\"gatsby-code-text\">Symbol.iterator</code> 属性上。</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre style=\"counter-reset: linenumber NaN\" class=\"gatsby-code-js line-numbers\"><code class=\"gatsby-code-js\"><span class=\"token keyword\">function</span><span class=\"token operator\">*</span> <span class=\"token function\">objectEntries</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> propKeys <span class=\"token operator\">=</span> Object<span class=\"token punctuation\">.</span><span class=\"token function\">keys</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> propKey <span class=\"token keyword\">of</span> propKeys<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">yield</span> <span class=\"token punctuation\">[</span>propKey<span class=\"token punctuation\">,</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">[</span>propKey<span class=\"token punctuation\">]</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">const</span> jane <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span> first<span class=\"token punctuation\">:</span> <span class=\"token string\">'Jane'</span><span class=\"token punctuation\">,</span> last<span class=\"token punctuation\">:</span> <span class=\"token string\">'Doe'</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\njane<span class=\"token punctuation\">[</span>Symbol<span class=\"token punctuation\">.</span>iterator<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> objectEntries<span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> <span class=\"token punctuation\">[</span>key<span class=\"token punctuation\">,</span> value<span class=\"token punctuation\">]</span> <span class=\"token keyword\">of</span> jane<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>key<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\">: </span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>value<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token comment\">// first: Jane</span>\n<span class=\"token comment\">// last: Doe</span></code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n<p>除了 <code class=\"gatsby-code-text\">for...of</code> 之外，扩展运算符（ <code class=\"gatsby-code-text\">...</code> ）、解构赋值和 <code class=\"gatsby-code-text\">Array.from()</code> 内部调用的都是遍历器接口。因此 Generator 返回的 Iterator 对象在这些地方都能用。</p>\n<h2>Generator.prototype.throw()</h2>\n<p>Generator 函数返回的遍历器对象，都有一个 <code class=\"gatsby-code-text\">throw()</code> 方法，可以在函数体外抛出错误，在函数体内捕获，但这样的捕获只会发生一次。</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre style=\"counter-reset: linenumber NaN\" class=\"gatsby-code-js line-numbers\"><code class=\"gatsby-code-js\"><span class=\"token keyword\">const</span> <span class=\"token function-variable function\">g</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span><span class=\"token operator\">*</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">try</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">yield</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span> <span class=\"token keyword\">catch</span> <span class=\"token punctuation\">(</span>e<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'内部捕获'</span><span class=\"token punctuation\">,</span> e<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">const</span> i <span class=\"token operator\">=</span> <span class=\"token function\">g</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\ni<span class=\"token punctuation\">.</span><span class=\"token function\">next</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">try</span> <span class=\"token punctuation\">{</span>\n  i<span class=\"token punctuation\">.</span><span class=\"token function\">throw</span><span class=\"token punctuation\">(</span><span class=\"token string\">'a'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 第一次抛异常，被内部 catch 捕获</span>\n  i<span class=\"token punctuation\">.</span><span class=\"token function\">throw</span><span class=\"token punctuation\">(</span><span class=\"token string\">'b'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 第二次抛异常，内部的 catch 已经执行过了，不再捕获， 因此被外部的 catch 捕获。</span>\n<span class=\"token punctuation\">}</span> <span class=\"token keyword\">catch</span> <span class=\"token punctuation\">(</span>e<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'外部捕获'</span><span class=\"token punctuation\">,</span> e<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token comment\">// 内部捕获 a</span>\n<span class=\"token comment\">// 外部捕获 b</span></code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n<p>注意这里的 <code class=\"gatsby-code-text\">throw()</code> 和 <code class=\"gatsby-code-text\">throw</code> 语句不一样，前者是 Generator 的方法，后者是 JS 的关键字；前者抛出的错误能被 Generator 内部的 <code class=\"gatsby-code-text\">catch()</code> 捕获，后者的只能被外部的 <code class=\"gatsby-code-text\">catch()</code> 捕获；前者可以连续多次调用，依次被从内到外的 <code class=\"gatsby-code-text\">catch()</code> 捕获，后者在被捕获之后，就不再继续执行 <code class=\"gatsby-code-text\">try</code> 里面的代码；调用前者会附带执行一次 <code class=\"gatsby-code-text\">next()</code> ，执行下一条 <code class=\"gatsby-code-text\">yield</code> 表达式，调用后者不带任何附加操作。但两者也有相同之处，两者都建议抛出 <code class=\"gatsby-code-text\">Error</code> 对象，而不是一个随便的原始类型值。</p>\n<p>Generator 执行过程中如果抛出了异常，只要被内部捕获，Geneerator 就能继续执行下去。但如果没有被内部捕获，就会终止执行。继续调用 <code class=\"gatsby-code-text\">next()</code> 将返回 <code class=\"gatsby-code-text\">{value: undefined, done: true}</code> 。</p>\n<h2>Generator.prototype.return()</h2>\n<p>这里的 <code class=\"gatsby-code-text\">return()</code> 类似 JS 里普通的 <code class=\"gatsby-code-text\">return</code> ，返回值并终止函数，这里会返回 value 值为传入参数，done 值为 true 的 Generator 状态对象，并终结遍历 Generator 的函数。</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre style=\"counter-reset: linenumber NaN\" class=\"gatsby-code-js line-numbers\"><code class=\"gatsby-code-js\"><span class=\"token keyword\">function</span><span class=\"token operator\">*</span> <span class=\"token function\">gen</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">yield</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">yield</span> <span class=\"token number\">2</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">yield</span> <span class=\"token number\">3</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">var</span> g <span class=\"token operator\">=</span> <span class=\"token function\">gen</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\ng<span class=\"token punctuation\">.</span><span class=\"token function\">next</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>        <span class=\"token comment\">// { value: 1, done: false }</span>\ng<span class=\"token punctuation\">.</span><span class=\"token function\">return</span><span class=\"token punctuation\">(</span><span class=\"token string\">'foo'</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// { value: \"foo\", done: true }</span>\ng<span class=\"token punctuation\">.</span><span class=\"token function\">next</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>        <span class=\"token comment\">// { value: undefined, done: true }</span></code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n<p>如果 Generator 函数里有 <code class=\"gatsby-code-text\">try...finally</code> 代码块，那么 <code class=\"gatsby-code-text\">return()</code> 将在 <code class=\"gatsby-code-text\">finally</code> 代码块执行完之后执行。</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre style=\"counter-reset: linenumber NaN\" class=\"gatsby-code-js line-numbers\"><code class=\"gatsby-code-js\"><span class=\"token keyword\">function</span><span class=\"token operator\">*</span> <span class=\"token function\">numbers</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">yield</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">try</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">yield</span> <span class=\"token number\">2</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">yield</span> <span class=\"token number\">3</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span> <span class=\"token keyword\">finally</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">yield</span> <span class=\"token number\">4</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">yield</span> <span class=\"token number\">5</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n  <span class=\"token keyword\">yield</span> <span class=\"token number\">6</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">var</span> g <span class=\"token operator\">=</span> <span class=\"token function\">numbers</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\ng<span class=\"token punctuation\">.</span><span class=\"token function\">next</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// { value: 1, done: false }</span>\ng<span class=\"token punctuation\">.</span><span class=\"token function\">next</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// { value: 2, done: false }</span>\ng<span class=\"token punctuation\">.</span><span class=\"token function\">return</span><span class=\"token punctuation\">(</span><span class=\"token number\">7</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// { value: 4, done: false } // 存在 finally，先执行 finally</span>\ng<span class=\"token punctuation\">.</span><span class=\"token function\">next</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// { value: 5, done: false }</span>\ng<span class=\"token punctuation\">.</span><span class=\"token function\">next</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// { value: 7, done: true } // return 的结果到这里才出现</span></code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n<p>本质上， <code class=\"gatsby-code-text\">next()</code> 、 <code class=\"gatsby-code-text\">throw()</code> 、 <code class=\"gatsby-code-text\">return()</code> 都是在做同样的事：让 Generator 恢复运行，并用不同的语句替换 <code class=\"gatsby-code-text\">yield</code> 语句。</p>\n<ul>\n<li><code class=\"gatsby-code-text\">next()</code> 将其替换成一个值（传入的参数，不传则为 <code class=\"gatsby-code-text\">undefined</code> ）</li>\n<li><code class=\"gatsby-code-text\">throw()</code> 将其替换为抛出一个异常。</li>\n<li><code class=\"gatsby-code-text\">return()</code> 将其替换为一个普通返回。</li>\n</ul>\n<h2>yield* 表达式</h2>\n<p>这个特殊的 <code class=\"gatsby-code-text\">yield</code> 表达式用于在一个 Generator 内部调用另一个 Generator。普通的 <code class=\"gatsby-code-text\">yield</code> 只会返回 Generator 对象，但并不会执行它。</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre style=\"counter-reset: linenumber NaN\" class=\"gatsby-code-js line-numbers\"><code class=\"gatsby-code-js\"><span class=\"token keyword\">function</span><span class=\"token operator\">*</span> <span class=\"token function\">foo</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">yield</span> <span class=\"token string\">'a'</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">yield</span> <span class=\"token string\">'b'</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">function</span><span class=\"token operator\">*</span> <span class=\"token function\">bar</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">yield</span> <span class=\"token string\">'x'</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">yield</span><span class=\"token operator\">*</span> <span class=\"token function\">foo</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">yield</span> <span class=\"token string\">'y'</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\">// 等同于</span>\n<span class=\"token keyword\">function</span><span class=\"token operator\">*</span> <span class=\"token function\">bar</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">yield</span> <span class=\"token string\">'x'</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">yield</span> <span class=\"token string\">'a'</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">yield</span> <span class=\"token string\">'b'</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">yield</span> <span class=\"token string\">'y'</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\">// 等同于</span>\n<span class=\"token keyword\">function</span><span class=\"token operator\">*</span> <span class=\"token function\">bar</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">yield</span> <span class=\"token string\">'x'</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">let</span> v <span class=\"token keyword\">of</span> <span class=\"token function\">foo</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">yield</span> v<span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n  <span class=\"token keyword\">yield</span> <span class=\"token string\">'y'</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">let</span> v <span class=\"token keyword\">of</span> <span class=\"token function\">bar</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>v<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token comment\">// \"x\"</span>\n<span class=\"token comment\">// \"a\"</span>\n<span class=\"token comment\">// \"b\"</span>\n<span class=\"token comment\">// \"y\"</span></code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n<p> <code class=\"gatsby-code-text\">yield*</code> 后面跟 Generator 函数（没有 <code class=\"gatsby-code-text\">return</code> )，等同于给这个 Generator 内部部署一个 <code class=\"gatsby-code-text\">for...of</code> 循环。实际上任何部署了 Iterator 接口的数据结构都可以 <code class=\"gatsby-code-text\">yield*</code> 进行遍历。</p>\n<h2>Generator 的 <code class=\"gatsby-code-text\">this</code></h2>\n<p>Generator 函数总是返回一个遍历器，可以通过 <code class=\"gatsby-code-text\">prototype</code> 去定义实例方法，但无法直接通过 <code class=\"gatsby-code-text\">this</code> 去定义。可以通过 <code class=\"gatsby-code-text\">call()</code> 绑定一个空对象作为上下文，把属性都赋值到这个对象上，用这个对象作为 Generator 函数的实例，来变通实现。</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre style=\"counter-reset: linenumber NaN\" class=\"gatsby-code-js line-numbers\"><code class=\"gatsby-code-js\"><span class=\"token keyword\">function</span><span class=\"token operator\">*</span> <span class=\"token constant\">F</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>a <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">yield</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>b <span class=\"token operator\">=</span> <span class=\"token number\">2</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">yield</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>c <span class=\"token operator\">=</span> <span class=\"token number\">3</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">var</span> obj <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">var</span> f <span class=\"token operator\">=</span> <span class=\"token constant\">F</span><span class=\"token punctuation\">.</span><span class=\"token function\">call</span><span class=\"token punctuation\">(</span>obj<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\nf<span class=\"token punctuation\">.</span><span class=\"token function\">next</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  <span class=\"token comment\">// Object {value: 2, done: false}</span>\nf<span class=\"token punctuation\">.</span><span class=\"token function\">next</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  <span class=\"token comment\">// Object {value: 3, done: false}</span>\nf<span class=\"token punctuation\">.</span><span class=\"token function\">next</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  <span class=\"token comment\">// Object {value: undefined, done: true}</span>\n\nobj<span class=\"token punctuation\">.</span>a <span class=\"token comment\">// 1</span>\nobj<span class=\"token punctuation\">.</span>b <span class=\"token comment\">// 2</span>\nobj<span class=\"token punctuation\">.</span>c <span class=\"token comment\">// 3</span></code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n<p>或者更好一点，绑定函数的原型为上下文，这样 <code class=\"gatsby-code-text\">this</code> 直接指向实例本身。</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre style=\"counter-reset: linenumber NaN\" class=\"gatsby-code-js line-numbers\"><code class=\"gatsby-code-js\"><span class=\"token keyword\">function</span><span class=\"token operator\">*</span> <span class=\"token constant\">F</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>a <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">yield</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>b <span class=\"token operator\">=</span> <span class=\"token number\">2</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">yield</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>c <span class=\"token operator\">=</span> <span class=\"token number\">3</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">var</span> f <span class=\"token operator\">=</span> <span class=\"token constant\">F</span><span class=\"token punctuation\">.</span><span class=\"token function\">call</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">F</span><span class=\"token punctuation\">.</span>prototype<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\nf<span class=\"token punctuation\">.</span><span class=\"token function\">next</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  <span class=\"token comment\">// Object {value: 2, done: false}</span>\nf<span class=\"token punctuation\">.</span><span class=\"token function\">next</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  <span class=\"token comment\">// Object {value: 3, done: false}</span>\nf<span class=\"token punctuation\">.</span><span class=\"token function\">next</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  <span class=\"token comment\">// Object {value: undefined, done: true}</span>\n\nf<span class=\"token punctuation\">.</span>a <span class=\"token comment\">// 1</span>\nf<span class=\"token punctuation\">.</span>b <span class=\"token comment\">// 2</span>\nf<span class=\"token punctuation\">.</span>c <span class=\"token comment\">// 3</span></code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n<p>我们还可以进一步将其改造为构造函数，通过 <code class=\"gatsby-code-text\">new</code> 来创建实例</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre style=\"counter-reset: linenumber NaN\" class=\"gatsby-code-js line-numbers\"><code class=\"gatsby-code-js\"><span class=\"token keyword\">function</span><span class=\"token operator\">*</span> <span class=\"token function\">gen</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>a <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">yield</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>b <span class=\"token operator\">=</span> <span class=\"token number\">2</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">yield</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>c <span class=\"token operator\">=</span> <span class=\"token number\">3</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">function</span> <span class=\"token constant\">F</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">return</span> <span class=\"token function\">gen</span><span class=\"token punctuation\">.</span><span class=\"token function\">call</span><span class=\"token punctuation\">(</span>gen<span class=\"token punctuation\">.</span>prototype<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">var</span> f <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">F</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\nf<span class=\"token punctuation\">.</span><span class=\"token function\">next</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  <span class=\"token comment\">// Object {value: 2, done: false}</span>\nf<span class=\"token punctuation\">.</span><span class=\"token function\">next</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  <span class=\"token comment\">// Object {value: 3, done: false}</span>\nf<span class=\"token punctuation\">.</span><span class=\"token function\">next</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  <span class=\"token comment\">// Object {value: undefined, done: true}</span>\n\nf<span class=\"token punctuation\">.</span>a <span class=\"token comment\">// 1</span>\nf<span class=\"token punctuation\">.</span>b <span class=\"token comment\">// 2</span>\nf<span class=\"token punctuation\">.</span>c <span class=\"token comment\">// 3</span></code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n<h2>小结</h2>\n<p>Generator 的本质就是一个状态机，相比 ES5 用普通函数实现的效果，不会把内部状态暴露出来，更优雅也更安全。</p>\n<p>Generator 也可以看作是 ES6 对协程的不完全实现，多个 Generator 可以以“时间片轮转”的形式实现并行，通过 <code class=\"gatsby-code-text\">yield</code> 控制执行权。</p>\n<p>当然，Generator 在实际应用中最广泛的用途，还是用来控制异步流，将其转换为更为直观的类似同步流的写法。</p>\n<h2>该系列的其他文章</h2>\n<p>上一篇：<a href=\"/blog/2018/03/04/es6-daily-15-promise\">每天一点ES6(15)：Promise</a></p>\n<p>下一篇：<a href=\"/blog/2018/10/06/es6-daily-17-async-await\">每天一点ES6(17)：Async / Await</a></p>","frontmatter":{"title":"每天一点ES6(16)：Generator","description":"一起来摩擦摩擦发电吧","cover":{"publicURL":"/static/es6daily-0950334fb8899f1006423341cbfeecb9.jpg"},"tags":["ecmascript","2015","es6","javascript","promise"],"series":"es6daily","draft":false},"fields":{"id":"es6-daily-16-generator copy","date":"2018-06-13T16:00:00.000Z"}}},"pageContext":{"isCreatedByStatefulCreatePages":false,"slug":"/blog/2018/06/14/es6-daily-16-generator copy"}}}