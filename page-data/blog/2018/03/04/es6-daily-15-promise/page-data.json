{"componentChunkName":"component---src-templates-blog-post-tsx","path":"/blog/2018/03/04/es6-daily-15-promise","result":{"data":{"site":{"siteMetadata":{"title":"童话说","keywords":["tonghuashuo","github","front-end","javascript","typescript","react","node","washington","hua","童话","童话说","前端","博客","技术","计算机","互联网"]}},"allMarkdownRemark":{"totalCount":70,"edges":[{"node":{"id":"c205d1bc-0577-5639-90aa-37b6f09d3547","frontmatter":{"title":"CSS Scan","description":"VSCode 扩展，自动补全 CSS 变量","tags":null,"cover":{"publicURL":"/static/blank-72e94c39ebb670dd23625675c0a22ace.jpg"},"series":null,"draft":true,"original":null},"fields":{"id":"css-scan","slug":"/project/css-scan","type":"project","date":null}}},{"node":{"id":"6a3bf076-bd85-5f11-8eb1-16e95286adaf","frontmatter":{"title":"FBC","description":"联合办公空间的会员服务","tags":null,"cover":{"publicURL":"/static/fbc-73b8b250e607c97c493edf1b542345fa.jpg"},"series":null,"draft":false,"original":null},"fields":{"id":"fbc","slug":"/project/fbc","type":"project","date":null}}},{"node":{"id":"71ffc9c2-24f4-5a91-a9fc-4694778e43c7","frontmatter":{"title":"Github-Flutter","description":"基于 Flutter 开发的 Github 客户端","tags":null,"cover":{"publicURL":"/static/blank-72e94c39ebb670dd23625675c0a22ace.jpg"},"series":null,"draft":true,"original":null},"fields":{"id":"github-flutter","slug":"/project/github-flutter","type":"project","date":null}}},{"node":{"id":"096c5d70-0164-57e4-91c0-1aafddde7880","frontmatter":{"title":"INEX 影力所","description":"泛娱乐领域的垂直数字货币交易所","tags":null,"cover":{"publicURL":"/static/inex-40ff0dfa20bfd2e8e2b2ea8abb900b5b.jpg"},"series":null,"draft":false,"original":null},"fields":{"id":"inex","slug":"/project/inex","type":"project","date":null}}},{"node":{"id":"d3fe6409-636c-5419-97f1-f15c8dca1056","frontmatter":{"title":"小图标","description":"一站式 Favicon 解决方案","tags":null,"cover":{"publicURL":"/static/blank-72e94c39ebb670dd23625675c0a22ace.jpg"},"series":null,"draft":true,"original":null},"fields":{"id":"the-favicon","slug":"/project/the-favicon","type":"project","date":null}}},{"node":{"id":"a2ea7f53-9ec5-5042-b8ca-5be79e9c6785","frontmatter":{"title":"小扫描","description":"磁盘占用一眼","tags":null,"cover":{"publicURL":"/static/blank-72e94c39ebb670dd23625675c0a22ace.jpg"},"series":null,"draft":true,"original":null},"fields":{"id":"the-scanner","slug":"/project/the-scanner","type":"project","date":null}}},{"node":{"id":"7b74e9c9-8dc8-59b9-86d9-ad7f13a67df6","frontmatter":{"title":"小剧透","description":"Web 版「剧情连拍」","tags":null,"cover":{"publicURL":"/static/blank-72e94c39ebb670dd23625675c0a22ace.jpg"},"series":null,"draft":true,"original":null},"fields":{"id":"the-spoiler","slug":"/project/the-spoiler","type":"project","date":null}}},{"node":{"id":"4f46ae77-847c-5508-acae-7c8d89c42804","frontmatter":{"title":"Thoughts 所思","description":"企业知识管理应用","tags":null,"cover":{"publicURL":"/static/thoughts-faff3495c115cab9b6fd951f3c6b96f9.jpg"},"series":null,"draft":false,"original":null},"fields":{"id":"thoughts","slug":"/project/thoughts","type":"project","date":null}}},{"node":{"id":"24f860b7-781d-5fca-a7d2-dc224a10bd4c","frontmatter":{"title":"新阅","description":"在线视频协作平台","tags":null,"cover":{"publicURL":"/static/xinyue-64b35564f5bc639232b66b6559065b31.jpg"},"series":null,"draft":false,"original":null},"fields":{"id":"xinyue","slug":"/project/xinyue","type":"project","date":null}}},{"node":{"id":"7a64b536-2246-5627-93d5-c19fa4db4d5d","frontmatter":{"title":"Xshowroom 买手圈","description":"时尚业专业买手服务平台","tags":null,"cover":{"publicURL":"/static/xshowroom-72ea2ae7921cb5aa0b3b4f56578ed2b9.jpg"},"series":null,"draft":false,"original":null},"fields":{"id":"xshowroom","slug":"/project/xshowroom","type":"project","date":null}}},{"node":{"id":"499d6aa3-64ca-5ff7-9dbe-f2dc15620111","frontmatter":{"title":"时间是什么颜色的","description":"如果时间有颜色……","tags":["color","time","project"],"cover":{"publicURL":"/static/tik-tok-color-03c874556dd31d9db5f30b7609751b92.jpg"},"series":"","draft":false,"original":true},"fields":{"id":"tik-tok-color","slug":"/blog/2015/02/11/tik-tok-color","type":"blog","date":"2015-02-11"}}},{"node":{"id":"4421f486-85ac-5dd2-8347-cb417b4085ac","frontmatter":{"title":"栈计算器","description":"通过“栈”实现的方程式计算器","tags":["stack","calculator","algorithm","project"],"cover":{"publicURL":"/static/stack-calculator-256bbf9439e7f58974c946bc16f54832.jpg"},"series":"","draft":false,"original":true},"fields":{"id":"stack-calculator","slug":"/blog/2015/02/10/stack-calculator","type":"blog","date":"2015-02-10"}}},{"node":{"id":"5920ff7d-5749-5463-b37b-23cc9a8b122c","frontmatter":{"title":"使用 Sublime Text 编写 LaTeX","description":"用你最熟悉的工具来写 LaTeX 吧","tags":["sublime","latex"],"cover":{"publicURL":"/static/latex-with-sublime-text-e7689b7e9fe6160a6ed614a10125ca29.jpg"},"series":"","draft":false,"original":true},"fields":{"id":"latex-with-sublime-text","slug":"/blog/2015/04/01/latex-with-sublime-text","type":"blog","date":"2015-04-01"}}},{"node":{"id":"290932e4-635f-592d-be69-7d9c3b5d7ba0","frontmatter":{"title":"小书签","description":"让 Chrome 的书签更好用","tags":null,"cover":{"publicURL":"/static/blank-72e94c39ebb670dd23625675c0a22ace.jpg"},"series":null,"draft":true,"original":null},"fields":{"id":"the-collector","slug":"/project/the-collector","type":"project","date":null}}},{"node":{"id":"029e2e2f-9244-5e03-8940-1c8581163583","frontmatter":{"title":"substr() 和 substring() 的区别","description":"两个函数，傻傻分不清楚","tags":["javascript","substr","substring","slice"],"cover":{"publicURL":"/static/substring-289ad52fc38963e15549cd1dc24678e4.jpg"},"series":"","draft":false,"original":true},"fields":{"id":"substr-and-substring","slug":"/blog/2015/05/15/substr-and-substring","type":"blog","date":"2015-05-15"}}},{"node":{"id":"f736dccd-78cb-5c90-bd99-5a07fa51913a","frontmatter":{"title":"MIUI 图标缓存问题","description":"离奇失踪的图标","tags":["android","miui","icon","cache"],"cover":{"publicURL":"/static/miui-icon-cache-2e66c31a61d5319c1849ea082e8c80ee.jpg"},"series":"","draft":false,"original":true},"fields":{"id":"miui-icon-cache","slug":"/blog/2015/04/18/miui-icon-cache","type":"blog","date":"2015-04-18"}}},{"node":{"id":"13b8d1d1-789b-5dc9-916c-7b7893210310","frontmatter":{"title":"纯 CSS3 绘制月饼","description":"中秋佳节，用CSS3来画个月饼吧","tags":["css","mooncake","project"],"cover":{"publicURL":"/static/css3-mooncake-9aaefaae86216c79623893c080f1ccc2.jpg"},"series":"","draft":false,"original":true},"fields":{"id":"css3-mooncake","slug":"/blog/2015/09/27/css3-mooncake","type":"blog","date":"2015-09-27"}}},{"node":{"id":"a7bb9a3a-e254-5aa9-bb0b-151acf106547","frontmatter":{"title":"每天一点ES6(1)：概述","description":"伊艾斯6大法好，每天一点不会老！","tags":["ecmascript","2015","es6","javascript"],"cover":{"publicURL":"/static/es6daily-0950334fb8899f1006423341cbfeecb9.jpg"},"series":"es6daily","draft":false,"original":true},"fields":{"id":"es6-daily-01-intro","slug":"/blog/2016/01/24/es6-daily-01-intro","type":"blog","date":"2016-01-24"}}},{"node":{"id":"c265e8ec-ef97-51b2-8bb4-53e1b6e2b4c9","frontmatter":{"title":"每天一点ES6(2)：let 和 const","description":"终于，JavaScript 也能用上块级作用域和常量了","tags":["ecmascript","2015","es6","javascript","let","const"],"cover":{"publicURL":"/static/es6daily-0950334fb8899f1006423341cbfeecb9.jpg"},"series":"es6daily","draft":false,"original":true},"fields":{"id":"es6-daily-02-let-and-const","slug":"/blog/2016/01/25/es6-daily-02-let-and-const","type":"blog","date":"2016-01-25"}}},{"node":{"id":"8ac916b6-109e-53d3-8208-b858de01b8b3","frontmatter":{"title":"每天一点ES6(6)：正则的扩展","description":"四字节 Unicode 的春天","tags":["ecmascript","2015","es6","javascript","regular","expression","regexp"],"cover":{"publicURL":"/static/es6daily-0950334fb8899f1006423341cbfeecb9.jpg"},"series":"es6daily","draft":false,"original":true},"fields":{"id":"es6-daily-06-regexp","slug":"/blog/2016/04/06/es6-daily-06-regexp","type":"blog","date":"2016-04-06"}}},{"node":{"id":"05523bfe-fa16-5b14-aa80-42a411b2f859","frontmatter":{"title":"电梯调度算法","description":"上上下下的感受","tags":["elevator","algorithm","project"],"cover":{"publicURL":"/static/elevator-7b7f4cefe4c7bf293ff2cdb266af33d9.jpg"},"series":"","draft":false,"original":true},"fields":{"id":"elevator","slug":"/blog/2016/02/16/elevator","type":"blog","date":"2016-02-16"}}},{"node":{"id":"efd68842-6b4e-5a6a-81b0-8c3a3b324c22","frontmatter":{"title":"每天一点ES6(7)：数值的扩展","description":"每一个数字都不能放过","tags":["ecmascript","2015","es6","javascript","number"],"cover":{"publicURL":"/static/es6daily-0950334fb8899f1006423341cbfeecb9.jpg"},"series":"es6daily","draft":false,"original":true},"fields":{"id":"es6-daily-07-number","slug":"/blog/2016/04/12/es6-daily-07-number","type":"blog","date":"2016-04-12"}}},{"node":{"id":"63080f8f-fd06-5b77-87ba-fa49b124abc6","frontmatter":{"title":"每天一点ES6(8)：数组的扩展","description":"别拿语法糖不当干粮","tags":["ecmascript","2015","es6","javascript","array"],"cover":{"publicURL":"/static/es6daily-0950334fb8899f1006423341cbfeecb9.jpg"},"series":"es6daily","draft":false,"original":true},"fields":{"id":"es6-daily-08-array","slug":"/blog/2016/07/26/es6-daily-08-array","type":"blog","date":"2016-07-26"}}},{"node":{"id":"e3ed4d20-d956-5578-bc5f-12619bd85faf","frontmatter":{"title":"5 分钟彻底明白 JSONP","description":"说穿了，其实没那么难","tags":["javascript","jsonp"],"cover":{"publicURL":"/static/jsonp-f8f2d118b15646398f7d00e19eb17ff9.jpg"},"series":"","draft":false,"original":true},"fields":{"id":"jsonp","slug":"/blog/2016/08/17/jsonp","type":"blog","date":"2016-08-17"}}},{"node":{"id":"a9d38fb9-9cbb-5162-9315-03ab6d83727d","frontmatter":{"title":"记 new Date().toString() 的一个坑","description":"万万没想到，竟在这里踩了个坑……","tags":["javascript","date","tostring"],"cover":{"publicURL":"/static/date-tostring-e192283893c7e97feb631571134bb805.jpg"},"series":"","draft":false,"original":true},"fields":{"id":"a-pit-in-date-tostring","slug":"/blog/2017/03/08/a-pit-in-date-tostring","type":"blog","date":"2017-03-08"}}},{"node":{"id":"5caebd71-bf77-5d58-a3fe-1609e95678a6","frontmatter":{"title":"解决 macOS 下 MySQL 2002 错误","description":"MySQL 真是个磨人的小妖精","tags":["mac","mysql","2002"],"cover":{"publicURL":"/static/mysql-error-2002-6f1abf9c085f6538df6bced86e008157.jpg"},"series":"","draft":false,"original":true},"fields":{"id":"mysql-error-2002","slug":"/blog/2017/02/07/mysql-error-2002","type":"blog","date":"2017-02-07"}}},{"node":{"id":"b59e8376-90fa-5473-a44e-442ca891df72","frontmatter":{"title":"iOS 下 click() 无效的问题","description":"iOS这个傲娇的小公举","tags":["ios","click"],"cover":{"publicURL":"/static/ios-click-f79051a5758b8a973902b2e5d190b714.jpg"},"series":"","draft":false,"original":true},"fields":{"id":"unable-to-trigger-click-on-ios","slug":"/blog/2017/03/31/unable-to-trigger-click-on-ios","type":"blog","date":"2017-03-31"}}},{"node":{"id":"70de981c-ab69-5cb2-be03-b2517a2c4342","frontmatter":{"title":"PHP 处理多源 CORS 的解决办法","description":"一个老生常谈的话题，碰到了顺便记录一下","tags":["php","cors"],"cover":{"publicURL":"/static/cors-77fc63594cf3a06c31921df671acd258.jpg"},"series":"","draft":false,"original":true},"fields":{"id":"multi-origin-cors-with-php","slug":"/blog/2017/03/30/multi-origin-cors-with-php","type":"blog","date":"2017-03-30"}}},{"node":{"id":"3c2c676f-674b-5a0c-9f99-beb36ff42844","frontmatter":{"title":"Webpack \"Invalid Host Header\"","description":"更新有风险，更新需谨慎……","tags":["webpack","dev","server","invalid","host"],"cover":{"publicURL":"/static/webpack-dev-server-977bc2ebe23a9b6b10fdac4b470847b8.jpg"},"series":"","draft":false,"original":true},"fields":{"id":"webpack-dev-server-invalid-host-header","slug":"/blog/2017/05/04/webpack-dev-server-invalid-host-header","type":"blog","date":"2017-05-04"}}},{"node":{"id":"5c1bab2a-a42b-5d3a-ad4d-04994d6278b8","frontmatter":{"title":"每天一点ES6(11)：Symbol","description":"原始类型家族的新成员","tags":["ecmascript","2015","es6","javascript","symbol"],"cover":{"publicURL":"/static/es6daily-0950334fb8899f1006423341cbfeecb9.jpg"},"series":"es6daily","draft":false,"original":true},"fields":{"id":"es6-daily-11-symbol","slug":"/blog/2017/07/02/es6-daily-11-symbol","type":"blog","date":"2017-07-02"}}},{"node":{"id":"2420224b-ff97-5758-bfc7-8fd774bfbd96","frontmatter":{"title":"每天一点ES6(12)：Set 和 Map","description":"多余的，一概不要","tags":["ecmascript","2015","es6","javascript","map","set"],"cover":{"publicURL":"/static/es6daily-0950334fb8899f1006423341cbfeecb9.jpg"},"series":"es6daily","draft":false,"original":true},"fields":{"id":"es6-daily-12-set-and-map","slug":"/blog/2017/07/03/es6-daily-12-set-and-map","type":"blog","date":"2017-07-03"}}},{"node":{"id":"091655de-9bba-5969-adf6-648155248dcb","frontmatter":{"title":"Electron 安装出坑指南","description":"世界本无坑，用的人多了，也就有了坑","tags":["electron"],"cover":{"publicURL":"/static/electron-a9838665d68ab68d327e48d8720bac3f.jpg"},"series":"","draft":false,"original":true},"fields":{"id":"electron-install-guide","slug":"/blog/2017/07/06/electron-install-guide","type":"blog","date":"2017-07-06"}}},{"node":{"id":"a6d4a8b6-f020-52a2-9ab3-263c7526ec29","frontmatter":{"title":"Node.js 9.0.0 发布","description":"一转眼，又半年过去了","tags":["nodejs","release"],"cover":{"publicURL":"/static/nodejs-9-release-86f3115cebbb8dd82646ff1d231fa317.jpg"},"series":"","draft":false,"original":true},"fields":{"id":"nodejs-9-release","slug":"/blog/2017/11/01/nodejs-9-release","type":"blog","date":"2017-11-01"}}},{"node":{"id":"a7518a19-a4da-554a-998b-03878e21bd40","frontmatter":{"title":"每天一点ES6(13)：Proxy 和 Reflect","description":"对不起，有代理真就是可以为所欲为","tags":["ecmascript","2015","es6","javascript","proxy","reflect"],"cover":{"publicURL":"/static/es6daily-0950334fb8899f1006423341cbfeecb9.jpg"},"series":"es6daily","draft":false,"original":true},"fields":{"id":"es6-daily-13-proxy-and-reflect","slug":"/blog/2017/12/20/es6-daily-13-proxy-and-reflect","type":"blog","date":"2017-12-20"}}},{"node":{"id":"f4aaf2e2-6eb9-57e2-9b9d-cf58e38dfa71","frontmatter":{"title":"每天一点ES6(14)：Iterator","description":"遍历也能搞出花来，怎么遍历你说了算","tags":["ecmascript","2015","es6","javascript","iterator","generator"],"cover":{"publicURL":"/static/es6daily-0950334fb8899f1006423341cbfeecb9.jpg"},"series":"es6daily","draft":false,"original":true},"fields":{"id":"es6-daily-14-iterator","slug":"/blog/2018/02/28/es6-daily-14-iterator","type":"blog","date":"2018-02-28"}}},{"node":{"id":"2032ccd8-f390-5d45-9dab-b79ab54a905d","frontmatter":{"title":"每天一点ES6(17)：Async / Await","description":"异步？先等等！","tags":["ecmascript","2015","es6","javascript","async","await","generator"],"cover":{"publicURL":"/static/es6daily-0950334fb8899f1006423341cbfeecb9.jpg"},"series":"es6daily","draft":false,"original":true},"fields":{"id":"es6-daily-17-async-await","slug":"/blog/2018/10/06/es6-daily-17-async-await","type":"blog","date":"2018-10-06"}}},{"node":{"id":"06008135-1b93-5a7b-a498-94098ee5ebb2","frontmatter":{"title":"一个非著名前端开发者的 2018","description":"资本寒冬大概是属燕子的吧，一到年末出现","tags":["summary","2018","2019"],"cover":{"publicURL":"/static/summary-2018-0e9c38c3d5d6b94d53a8dee2a7bdfbae.jpg"},"series":"summary","draft":false,"original":true},"fields":{"id":"summary-2018","slug":"/blog/2018/12/31/summary-2018","type":"blog","date":"2018-12-31"}}},{"node":{"id":"3201b0bb-9550-5617-a5a2-4df3a309b2f0","frontmatter":{"title":"【译】我们为什么要写 super(props)?","description":"好像知道，又好像不知道","tags":["react"],"cover":{"publicURL":"/static/overreacted-9fbf74366dc5b9e4aab57572a9f0470d.jpg"},"series":"overreacted","draft":false,"original":false},"fields":{"id":"why-do-we-write-super-props","slug":"/blog/2019/02/22/why-do-we-write-super-props","type":"blog","date":"2019-02-22"}}},{"node":{"id":"bafd8336-ff70-50b1-9a4a-c2c105c4cd96","frontmatter":{"title":"Homebrew 也有后悔药：回退一次小版本更新","description":"有了后悔药，可劲随便造","tags":["homebrew"],"cover":{"publicURL":"/static/homebrew-2cd1cc709ca5d68b1a1fb9eb6283b820.jpg"},"series":"","draft":false,"original":true},"fields":{"id":"how-to-downgrade-from-homebrew","slug":"/blog/2019/10/11/how-to-downgrade-from-homebrew","type":"blog","date":"2019-10-11"}}},{"node":{"id":"75045fce-2b37-559a-b519-62fef7e992da","frontmatter":{"title":"为什么我们总是在不断地造轮子","description":"圆的圆的圆的东西","tags":["thinking"],"cover":{"publicURL":"/static/wheel-120fefa8e824de66889cf2e45b746ebe.jpg"},"series":"","draft":true,"original":true},"fields":{"id":"why-do-we-keep-building-wheels","slug":"/blog/2019/11/15/why-do-we-keep-building-wheels","type":"blog","date":"2019-11-15"}}},{"node":{"id":"c5f39bda-8264-5392-a4d2-2f2f2861c18a","frontmatter":{"title":"「童话说」又改版啦","description":"酒还是那酒，但瓶子已经不是那瓶子了","tags":["blog","4.0","update"],"cover":{"publicURL":"/static/blank-d221320d45d5d7ac530fe7af1ab4cd79.jpg"},"series":"","draft":true,"original":true},"fields":{"id":"introducing-ths-v4","slug":"/blog/2019/12/02/introducing-ths-v4","type":"blog","date":"2019-12-02"}}},{"node":{"id":"1a4948a9-1702-5bb8-9e1b-a9b2aafb0a5a","frontmatter":{"title":"我的数组返回了啥","description":"功夫再高，一针下去也得倒","tags":["javascript","array"],"cover":{"publicURL":"/static/array-805a58ee0da37d1812988339eb18df47.jpg"},"series":"","draft":true,"original":true},"fields":{"id":"what-does-my-array-return","slug":"/blog/2019/12/10/what-does-my-array-return","type":"blog","date":"2019-12-10"}}},{"node":{"id":"cedd0941-7ae6-58c4-b22e-099949c049aa","frontmatter":{"title":"提效 50%，榨干 webpack","description":"我们的目标是：榨干 webpack","tags":["webpack"],"cover":{"publicURL":"/static/blank-d221320d45d5d7ac530fe7af1ab4cd79.jpg"},"series":"","draft":true,"original":true},"fields":{"id":"speed-up-your-build","slug":"/blog/2020/01/20/speed-up-your-build","type":"blog","date":"2020-01-20"}}},{"node":{"id":"4a0c441a-a4da-5f0a-ad86-0c53a7fe8d0a","frontmatter":{"title":"Flutter 扫雷记","description":"目标，移动端，走起","tags":["flutter"],"cover":{"publicURL":"/static/flutter-b6ce1e63c11d6fddd7a988bfb312deb5.jpg"},"series":"","draft":true,"original":true},"fields":{"id":"learning-flutter","slug":"/blog/2019/12/03/learning-flutter","type":"blog","date":"2019-12-03"}}},{"node":{"id":"acf607a8-7894-5f69-be93-a1d6fc8bc92a","frontmatter":{"title":"聊聊前端面试","description":"人嘛，总是在不断的试错中成长起来的","tags":["interview"],"cover":{"publicURL":"/static/interview-c6ee2544d5e90e8349ec2b751c37e298.jpg"},"series":"","draft":true,"original":true},"fields":{"id":"thoughts-about-fe-interview","slug":"/blog/2020/01/20/thoughts-about-fe-interview","type":"blog","date":"2020-01-20"}}},{"node":{"id":"47ae9e45-56fa-5fc9-bcd2-0256ac0c9cb6","frontmatter":{"title":"TypeScript：又一个终将逝去的青春","description":"你，轰轰烈烈地来；你，平平淡淡地走。","tags":["typescript"],"cover":{"publicURL":"/static/typescript-another-fading-youth-b7b7642447ca6a5b28abf9f90bf06ef8.jpg"},"series":"","draft":false,"original":true},"fields":{"id":"typescript-another-fading-youth","slug":"/blog/2019/10/10/typescript-another-fading-youth","type":"blog","date":"2019-10-10"}}},{"node":{"id":"118361c5-5726-55ed-8350-5ce368d488b1","frontmatter":{"title":"每天一点ES6(3)：解构赋值","description":"让你一次赋个够","tags":["ecmascript","2015","es6","javascript","destructuring"],"cover":{"publicURL":"/static/es6daily-0950334fb8899f1006423341cbfeecb9.jpg"},"series":"es6daily","draft":false,"original":true},"fields":{"id":"es6-daily-03-destructuring","slug":"/blog/2016/02/02/es6-daily-03-destructuring","type":"blog","date":"2016-02-02"}}},{"node":{"id":"2594b15f-ccec-543c-974e-ec904ba23a3b","frontmatter":{"title":"每天一点ES6(4)：Babel","description":"《圣经》的光辉，永恒！","tags":["ecmascript","2015","es6","javascript","babel","npm"],"cover":{"publicURL":"/static/es6daily-0950334fb8899f1006423341cbfeecb9.jpg"},"series":"es6daily","draft":false,"original":true},"fields":{"id":"es6-daily-04-babel","slug":"/blog/2016/02/19/es6-daily-04-babel","type":"blog","date":"2016-02-19"}}},{"node":{"id":"89d7b739-7a7d-551a-8db0-eda594cc06c1","frontmatter":{"title":"每天一点ES6(5)：字符串的扩展","description":"不变的字符串现在更加多变了","tags":["ecmascript","2015","es6","javascript","string"],"cover":{"publicURL":"/static/es6daily-0950334fb8899f1006423341cbfeecb9.jpg"},"series":"es6daily","draft":false,"original":true},"fields":{"id":"es6-daily-05-string","slug":"/blog/2016/04/05/es6-daily-05-string","type":"blog","date":"2016-04-05"}}},{"node":{"id":"fd299029-9c49-5b21-9569-3399040fdc66","frontmatter":{"title":"每天一点ES6(9)：函数的扩展","description":"博采众长的实用语法糖","tags":["ecmascript","2015","es6","javascript","function"],"cover":{"publicURL":"/static/es6daily-0950334fb8899f1006423341cbfeecb9.jpg"},"series":"es6daily","draft":false,"original":true},"fields":{"id":"es6-daily-09-function","slug":"/blog/2016/12/20/es6-daily-09-function","type":"blog","date":"2016-12-20"}}},{"node":{"id":"27d50f62-9cdb-50bc-9b9b-2a7c98c5c92e","frontmatter":{"title":"Leetcode 第一刷：Two Sum","description":"都闪开，我要开始装逼了","tags":["leetcode","two","sum"],"cover":{"publicURL":"/static/leetcode-1aa86b8eea674fca29117e535cfba751.jpg"},"series":"","draft":false,"original":true},"fields":{"id":"leetcode-01-two-sum","slug":"/blog/2017/04/11/leetcode-01-two-sum","type":"blog","date":"2017-04-11"}}},{"node":{"id":"25995aa2-2b02-5db0-b65b-1bc827bf60a0","frontmatter":{"title":"每天一点ES6(10)：对象的扩展","description":"迟来的更新……","tags":["ecmascript","2015","es6","javascript","object"],"cover":{"publicURL":"/static/es6daily-0950334fb8899f1006423341cbfeecb9.jpg"},"series":"es6daily","draft":false,"original":true},"fields":{"id":"es6-daily-10-object","slug":"/blog/2017/04/05/es6-daily-10-object","type":"blog","date":"2017-04-05"}}},{"node":{"id":"adcf3ad8-3ea4-54c3-a0f4-209e1e518dbd","frontmatter":{"title":"ECMAScript 2017 正式到来","description":"ES 的世界开始日趋平静","tags":["ecmascript","2017","es8","javascript"],"cover":{"publicURL":"/static/es2017-77b7677386d27526bcb0b2687218f3f1.jpg"},"series":"","draft":false,"original":true},"fields":{"id":"ecmascript-2017-is-here","slug":"/blog/2017/07/12/ecmascript-2017-is-here","type":"blog","date":"2017-07-12"}}},{"node":{"id":"2c071f6a-f91e-5144-ae6a-44e6e5265429","frontmatter":{"title":"童话说 V2.0 改版小结","description":"时隔多年，终于换新面貌了","tags":["blog","2.0","update"],"cover":{"publicURL":"/static/introducing-ths-v2-630ee6fc7ad1be564eebffb0e0dd447d.jpg"},"series":"","draft":false,"original":true},"fields":{"id":"introducing-ths-v2","slug":"/blog/2017/08/12/introducing-ths-v2","type":"blog","date":"2017-08-12"}}},{"node":{"id":"bac95ff2-76be-59c9-9d8c-173de3cdacc4","frontmatter":{"title":"TypeScriptS + Vue 踩坑纪实","description":"坑这种东西，多踩踩就平了","tags":["typescript","vue"],"cover":{"publicURL":"/static/guide-for-vue-with-typescript-fe6f5086d26293f21adf217a84141fd6.jpg"},"series":"","draft":false,"original":true},"fields":{"id":"guide-for-vue-with-typescript","slug":"/blog/2017/10/26/guide-for-vue-with-typescript","type":"blog","date":"2017-10-26"}}},{"node":{"id":"d87372c5-7ed2-53da-bdb4-5f5e446e6aa1","frontmatter":{"title":"每天一点ES6(15)：Promise","description":"对你的承诺，永远不变","tags":["ecmascript","2015","es6","javascript","promise"],"cover":{"publicURL":"/static/es6daily-0950334fb8899f1006423341cbfeecb9.jpg"},"series":"es6daily","draft":false,"original":true},"fields":{"id":"es6-daily-15-promise","slug":"/blog/2018/03/04/es6-daily-15-promise","type":"blog","date":"2018-03-04"}}},{"node":{"id":"7bd9aa4d-d774-5b54-ad31-bdda42c47ab9","frontmatter":{"title":"每天一点ES6(16)：Generator","description":"一起来摩擦摩擦发电吧","tags":["ecmascript","2015","es6","javascript","promise"],"cover":{"publicURL":"/static/es6daily-0950334fb8899f1006423341cbfeecb9.jpg"},"series":"es6daily","draft":false,"original":true},"fields":{"id":"es6-daily-16-generator","slug":"/blog/2018/06/14/es6-daily-16-generator","type":"blog","date":"2018-06-14"}}},{"node":{"id":"c776fd0e-b7ac-5ead-a74f-b96ceb48d75b","frontmatter":{"title":"除了 SSR，就没有别的办法了吗","description":"当 MVVM 遇上 SEO，该如何是好","tags":["static","site","gatsby","pug"],"cover":{"publicURL":"/static/explore-static-site-generation-c2ac5cf49eafd77a1b2ce1fab7f53515.jpg"},"series":"","draft":false,"original":true},"fields":{"id":"explore-static-site-generation","slug":"/blog/2019/02/07/explore-static-site-generation","type":"blog","date":"2019-02-07"}}},{"node":{"id":"8215bee6-5bed-50dd-8acd-94c865145e35","frontmatter":{"title":"每天一点ES6(18)：Class","description":"这回总没人质疑 JS 不是面向对象了吧？","tags":["ecmascript","2015","es6","javascript","class"],"cover":{"publicURL":"/static/es6daily-0950334fb8899f1006423341cbfeecb9.jpg"},"series":"es6daily","draft":false,"original":true},"fields":{"id":"es6-daily-18-class","slug":"/blog/2018/12/17/es6-daily-18-class","type":"blog","date":"2018-12-17"}}},{"node":{"id":"8477f3e8-e0f0-5969-a545-fb5c5843246e","frontmatter":{"title":"你可能已经知道的 ES 2018 和 2019","description":"好饭不怕晚","tags":["ecmascript","2018","2019"],"cover":{"publicURL":"/static/es2019-5646b4878e533cd7c725ce4c17984071.jpg"},"series":"","draft":false,"original":true},"fields":{"id":"es2018-and-es2019","slug":"/blog/2019/02/11/es2018-and-es2019","type":"blog","date":"2019-02-11"}}},{"node":{"id":"74c9ea53-35c1-5f8d-9a70-6325c8908983","frontmatter":{"title":"如何 Think in Hooks","description":"差不多是时候该换换脑子了","tags":["react","hooks"],"cover":{"publicURL":"/static/think-in-hooks-26d13ef2591ee05a3c4bba7fc34daa88.jpg"},"series":"","draft":false,"original":true},"fields":{"id":"how-to-think-in-hooks","slug":"/blog/2019/02/15/how-to-think-in-hooks","type":"blog","date":"2019-02-15"}}},{"node":{"id":"7117f3a5-1987-5f74-aaee-d6c004857b4b","frontmatter":{"title":"每天一点ES6(19)：Module","description":"可能是 ES6 中对未来影响最大的一项改变","tags":["ecmascript","2015","es6","javascript","module","import","export"],"cover":{"publicURL":"/static/es6daily-0950334fb8899f1006423341cbfeecb9.jpg"},"series":"es6daily","draft":false,"original":true},"fields":{"id":"es6-daily-19-module","slug":"/blog/2018/12/19/es6-daily-19-module","type":"blog","date":"2018-12-19"}}},{"node":{"id":"a1adc2ee-2a64-5653-bc31-a00ea3b70407","frontmatter":{"title":"探索 React 组件之间的生命周期","description":"有时候，生活就是一团麻","tags":["react","lifecycle"],"cover":{"publicURL":"/static/react-lifecycle-0edf69056144aaf512a28d0670b53b57.jpg"},"series":"","draft":false,"original":true},"fields":{"id":"react-lifecycle","slug":"/blog/2019/05/02/react-lifecycle","type":"blog","date":"2019-05-02"}}},{"node":{"id":"3141b4c6-4a37-5347-a5cc-92327f36cee6","frontmatter":{"title":"TypeScript 次日指南","description":"坑这种东西，是不会写在文档上的","tags":["typescript"],"cover":{"publicURL":"/static/typescript-8239307adc5ccdfc32320e1bcadb6300.jpg"},"series":"","draft":false,"original":true},"fields":{"id":"typescript-the-second-day","slug":"/blog/2019/07/28/typescript-the-second-day","type":"blog","date":"2019-07-28"}}},{"node":{"id":"4cdbfcff-81fd-5c18-ac98-bba8d122f8e3","frontmatter":{"title":"一个非著名前端开发者的 2019","description":"感谢曾经努力的自己","tags":["summary","2019","2020"],"cover":{"publicURL":"/static/summary-2019-1011f23d2ed2635035a07878c03ed1da.jpg"},"series":"summary","draft":false,"original":true},"fields":{"id":"summary-2019","slug":"/blog/2019/12/31/summary-2019","type":"blog","date":"2019-12-31"}}},{"node":{"id":"b2993941-a485-5c65-9de7-17cba65b2418","frontmatter":{"title":"一个非著名前端开发者的 2016","description":"回顾 2016，是充实的一年，不负青春。2017 加油继续！","tags":["summary","2016","2017"],"cover":{"publicURL":"/static/summary-2016-d4bc85d6ff1aa8985e03c3875f90ea51.jpg"},"series":"summary","draft":false,"original":true},"fields":{"id":"summary-2016","slug":"/blog/2016/12/31/summary-2016","type":"blog","date":"2016-12-31"}}},{"node":{"id":"c78c2577-3dc3-580d-9aa3-059949484423","frontmatter":{"title":"一个非著名前端开发者的 2017","description":"哎 ~ 又一年过去了","tags":["summary","2017","2018"],"cover":{"publicURL":"/static/summary-2017-0d96380257d25f6b398d9bc8e47af5a1.jpg"},"series":"summary","draft":false,"original":true},"fields":{"id":"summary-2017","slug":"/blog/2017/12/29/summary-2017","type":"blog","date":"2017-12-29"}}},{"node":{"id":"9483d67a-7761-50d0-aa75-ecdf8077db2d","frontmatter":{"title":"TradingView + WebSocket 脱坑指南","description":"让我来告诉你，K 线到底该怎么画","tags":["tradingview","chart","library","guide","websocket","webworker","ohlc","kchart"],"cover":{"publicURL":"/static/tradingview-1ceaf53d99815784a18273970e741bfd.jpg"},"series":"","draft":false,"original":true},"fields":{"id":"tradingview-charting-library-simple-guide","slug":"/blog/2018/09/22/tradingview-charting-library-simple-guide","type":"blog","date":"2018-09-22"}}},{"node":{"id":"66c964e4-0a45-548e-9f94-6fd84283c9a4","frontmatter":{"title":"【译】React 如何区分 Class 和 Function？","description":"所谓的简单，只是因为有人帮你把复杂的问题给解决掉了","tags":["react"],"cover":{"publicURL":"/static/overreacted-9fbf74366dc5b9e4aab57572a9f0470d.jpg"},"series":"overreacted","draft":false,"original":false},"fields":{"id":"how-does-react-tell-a-class-from-a-function","slug":"/blog/2019/03/06/how-does-react-tell-a-class-from-a-function","type":"blog","date":"2019-03-06"}}},{"node":{"id":"3b0c4aa9-d3ba-5bba-aad0-51cad6f0dd1c","frontmatter":{"title":"重新 Think in Hooks","description":"忘记过去之所学，我们从头来过","tags":["react","hooks"],"cover":{"publicURL":"/static/rethink-in-hooks-f9fcd719dcab55af4a1ad3d3cfbe0585.jpg"},"series":"","draft":false,"original":true},"fields":{"id":"rethink-in-hooks","slug":"/blog/2019/05/27/rethink-in-hooks","type":"blog","date":"2019-05-27"}}}]},"markdownRemark":{"html":"<h2>写在前面</h2>\n<p>Promise 大概是 ES6 中最为人熟知的内容之一了，时至今日它已经成为了异步操作中事实上的新标准。</p>\n<h2>什么是 Promise</h2>\n<p>Promise 和它的字面意思一样，代表着某种承诺，承诺未来某个时间会发生的事。Promise 被用来执行异步操作，等异步操作完成后（无论成败），执行后续的内容。</p>\n<p>Promise 的出现解决了一个长期被开发者诟病的问题——回调地狱。Promise 使用链式调用的方式代替回调，使得代码看上去更加像是同步的代码，语义上也更加直观。</p>\n<p>一个 Promise 实例有三种可能的状态：pending（进行中）、resolved（已成功）、rejected（已失败）。当 Promise 发起时进入 pending 状态，执行后进入后两者中的其中一个状态，有且只有这两条路可走，而且状态的改变完全由操作本身决定，且一旦改变就不会再变，不受外界影响。</p>\n<p>Promise 也有一些缺点：</p>\n<ul>\n<li>Promise 无法取消，一旦创建就会执行，且无法中断。</li>\n<li>Promise 内部抛出的错误，除非设置了回调函数，否则不会反应到外部。</li>\n<li>Promise 在 pending 状态下时，无法得知具体的进度，即到底是刚开始还是快要结束了。</li>\n</ul>\n<h2>Promise 的基本使用</h2>\n<p>Promise 本身是一个构造函数，接收一个函数作为参数，创建一个 Promise 实例。作为参数的函数包含两个参数： <code class=\"gatsby-code-text\">resolve</code> 和 <code class=\"gatsby-code-text\">reject</code> 。这两个参数都是函数，分别用于将 Promise 对象的状态从 pending 改为 resolved 和 rejected，并将异步操作的结果/错误以参数的形式传递出去。</p>\n<p>Promise 对象在被创建后会立即执行，但其执行后的回调一定是异步的，即便其所做的事只包含同步的代码。</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre style=\"counter-reset: linenumber NaN\" class=\"gatsby-code-js line-numbers\"><code class=\"gatsby-code-js\"><span class=\"token keyword\">const</span> promise <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Promise</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">resolve<span class=\"token punctuation\">,</span> reject</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'Promise'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// Promise 创建后立即执行</span>\n  <span class=\"token function\">resolve</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>              <span class=\"token comment\">// 但即便只有同步操作</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\npromise<span class=\"token punctuation\">.</span><span class=\"token function\">then</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'resolved.'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 回调依然是异步的，会在当前脚本所有同步操作执行完之后执行。</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'Hi!'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// Promise</span>\n<span class=\"token comment\">// Hi!</span>\n<span class=\"token comment\">// resolved</span></code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n<p>Promise 实例通过 <code class=\"gatsby-code-text\">then()</code> 方法指定异步操作成功/失败后的后续操作， <code class=\"gatsby-code-text\">then()</code> 接受两个回调函数作为参数，分别指定异步操作成功/失败后要执行的内容，其中操作成功时的回调为必选，操作失败时的回调可选。两个回调函数都接受 Promise 对象传出的值作为参数。 <code class=\"gatsby-code-text\">reject()</code> 的参数通常是一个 Error 对象的实例，尽管这并非强制的，但大部分的 Lint 工具都会提示你这么做。 <code class=\"gatsby-code-text\">resolve()</code> 的参数除了常规的值以外，还可能是另一个 Promise 实例，这时候，父级 Promise 的状态就依赖于子 Promise 的影响。举个例子：父 Promise 操作完成后返回子 Promise，这时父 Promise 的状态发生改变；正常情况下应该是变为 resolved 或者 rejected 的其中之一，但因为这里返回的是另一个 Promise，父 Promise 的状态就完全被返回的子 Promise 所替代。子 Promise 刚创建，状态为 pending，因此父 Promise 的状态被覆盖为子 Promise 的 pending 状态；直到子 Promise 状态变为 resolved 或者 rejected，父 Promise 的状态才相应地变为 resolved 或者 rejected，然后执行对应的回调。注意，在这种情况下，父 Promise 执行哪个回调完全取决于子 Promise 最后的状态，如果父 Promise resolve 返回了子 Promise，子 Promise 最终 reject 了，父 Promise 的 resolve 回调不会执行，只会执行 reject 回调。</p>\n<p>按照正常的逻辑来讲， <code class=\"gatsby-code-text\">resolve()</code> 和 <code class=\"gatsby-code-text\">reject()</code> 应该表示一个 Promise 的结束，之后不应该再有别的代码。尽管不推荐这么做，但是语法上是允许在这后面继续执行内容的，而且如果是同步的代码，还会先于回调执行。一般来说后续的操作应该放到 <code class=\"gatsby-code-text\">then()</code> 里， <code class=\"gatsby-code-text\">resolve()</code> 和 <code class=\"gatsby-code-text\">reject()</code> 前面最好加上 <code class=\"gatsby-code-text\">return</code> 。</p>\n<h2>Promise.prorotype.then()</h2>\n<p><code class=\"gatsby-code-text\">then()</code> 是 Promise 实例的方法，用于给 Promise 实例添加状态改变时的回调函数。</p>\n<p><code class=\"gatsby-code-text\">then()</code> 支持链式调用，可以连续执行多个 <code class=\"gatsby-code-text\">then()</code> ，前一个 <code class=\"gatsby-code-text\">then()</code> 的返回会作为后一个 <code class=\"gatsby-code-text\">then()</code> 的参数。</p>\n<h2>Promise.prototype.catch()</h2>\n<p><code class=\"gatsby-code-text\">catch()</code> 是 <code class=\"gatsby-code-text\">then(null, reject)</code> 的别名，用于处理错误，无论是异步操作过程出错，还是 <code class=\"gatsby-code-text\">catch()</code> 之前的 <code class=\"gatsby-code-text\">then()</code> 出错，都会进入到 <code class=\"gatsby-code-text\">catch()</code> 里，有点类似 <code class=\"gatsby-code-text\">try...catch</code>，<code class=\"gatsby-code-text\">rejcet()</code> 就是在抛出错误。Promise 一旦状态变为 resolve，再抛出错误是无效的，如果要 reject，请及早 reject。</p>\n<p>Promise 抛出的错误会一直向后传递，直到被捕获， <code class=\"gatsby-code-text\">catch()</code> 会捕获其之前的所有错误，无论是来自异步操作还是回调。一般我们不通过 <code class=\"gatsby-code-text\">then()</code> 的第二个参数来处理 reject，而是直接在 <code class=\"gatsby-code-text\">catch()</code> 里处理（这只是最佳实践，写在 <code class=\"gatsby-code-text\">then()</code> 的第二个参数里也是完全可以的）。</p>\n<p>与 <code class=\"gatsby-code-text\">try...catch</code> 不同，Promise 对象如果不使用 <code class=\"gatsby-code-text\">catch()</code> 指定错误处理的回调，其异步操作过程中抛出的错误就不会传递到外层代码，发生的错误会抛出但不会中断程序的运行，直接在内部就消化掉了。不过让人费解的是，Node.js 计划在未来不这么做，如果 Promise 内部有未捕获的错误，将会直接终止进程。</p>\n<p>如果错误发生在 resolve 之后，这样的错误属于 Promise 函数体之外抛出的，会冒泡到最外层，成为未捕获的异常：</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre style=\"counter-reset: linenumber NaN\" class=\"gatsby-code-js line-numbers\"><code class=\"gatsby-code-js\"><span class=\"token keyword\">const</span> promise <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Promise</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">resolve<span class=\"token punctuation\">,</span> reject</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token function\">resolve</span><span class=\"token punctuation\">(</span><span class=\"token string\">'ok'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token function\">setTimeout</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span> <span class=\"token keyword\">throw</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Error</span><span class=\"token punctuation\">(</span><span class=\"token string\">'test'</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span>\n  <span class=\"token comment\">// 错误将在下一轮时间循环抛出</span>\n  <span class=\"token comment\">// 届时 Promise 已经进入 resolved 状态，不会再变了</span>\n  <span class=\"token comment\">// 错误冒泡至最外层</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\npromise<span class=\"token punctuation\">.</span><span class=\"token function\">then</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">value</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span> console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>value<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// ok</span>\n<span class=\"token comment\">// Uncaught Error: test</span></code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n<p>综上，最好养成习惯在 Promise 的最后始终带上 <code class=\"gatsby-code-text\">catch()</code> 。</p>\n<p>Promise 的 <code class=\"gatsby-code-text\">catch()</code> 后面还可以跟 <code class=\"gatsby-code-text\">then()</code> 和 <code class=\"gatsby-code-text\">catch()</code> 。如果没有报错， <code class=\"gatsby-code-text\">catch()</code> 会被跳过。</p>\n<p>Promise 的 <code class=\"gatsby-code-text\">catch()</code> 会处理到自己为止之前所有未处理的错误，错误一旦被 <code class=\"gatsby-code-text\">catch()</code> 捕获，就会到此为止，不再继续向后传递；之后发生的新错误会在遇到下一个 <code class=\"gatsby-code-text\">catch()</code> 时被处理，或直到最后也没被处理，被“内部消化”。</p>\n<h2>Promise.prototype.finally</h2>\n<p>这是 ES2018 引入的内容。无论 Promise 对象最后的状态如何，都会执行其中的代码。<code class=\"gatsby-code-text\">finally()</code> 不接受任何参数，也就是说 <code class=\"gatsby-code-text\">finally()</code> 无法得知 Promise 最终的状态，因此 <code class=\"gatsby-code-text\">finally()</code> 中的操作应该是与 Promise 的状态无关的，例如释放资源占用、关闭连接等。</p>\n<p>虽然从字面上看 finally 表示「最终」，但 <code class=\"gatsby-code-text\">finally()</code> 不一定非得放在最后，任何可以接 <code class=\"gatsby-code-text\">then()</code> 的地方都可以接 <code class=\"gatsby-code-text\">finally</code>。<code class=\"gatsby-code-text\">finally()</code> 本质上还是 <code class=\"gatsby-code-text\">then(callback, callback)</code> 的语法糖，相当于给 <code class=\"gatsby-code-text\">then()</code> 的两个参数传入完全相同的内容，并且始终返回传入的值。</p>\n<p><code class=\"gatsby-code-text\">finally()</code> 总是会返回上一步的结果，所以如果你出于某些原因打算用 <code class=\"gatsby-code-text\">then()</code> 来代替 <code class=\"gatsby-code-text\">finally()</code>，请务必在最后返回上一步的结果。</p>\n<h2>Promise.all()、Promise.race()</h2>\n<p>这两个是 Promise 的静态方法，接受一个 Promise 数组作为参数，将其包装为一个新的 Promise。如果数组中的元素不是 Promise 实例，就会通过 <code class=\"gatsby-code-text\">Promise.resolve()</code> 将其转换成 Promise 实例。事实上只要是具有 Iterator 接口的数据结构都可以，只是数组最常用。</p>\n<p><code class=\"gatsby-code-text\">Promise.all()</code> 包装出来的新 Promise 仅当数组中的 Promise 全都被 resolve 后才会进入 resolved 状态，各 Promise 的返回值以数组形式传递给新 Promise 的回调函数；数组中任何一个 Promise 被 reject，新 Promise 就被 reject，其中第一个被 reject 的 Promise 的返回值被传递给新 Promise 的回调函数。</p>\n<p><code class=\"gatsby-code-text\">Promise.race()</code> 包装出来的新 Promise 的状态取决于数组中最早发生状态变化的那一个，一旦数组中有成员状态发生了变化，它的结果就会被传递给新 Promise 的回调，其它的 Promise 依然会继续执行，但结果会被丢弃。通常用 <code class=\"gatsby-code-text\">Promise.race()</code> 来模拟给请求设置超时。</p>\n<p>如果作为参数的 Promise 实例自己定义了 <code class=\"gatsby-code-text\">then()</code> ，那么它的 resolve 会先经过自己的 <code class=\"gatsby-code-text\">then()</code> 的处理，再交给 <code class=\"gatsby-code-text\">Promise.all()</code> 和 <code class=\"gatsby-code-text\">Promise.race()</code> 的 <code class=\"gatsby-code-text\">then()</code> 。</p>\n<p>如果作为参数的 Promise 实例自己定义了 <code class=\"gatsby-code-text\">catch()</code> ，那么它的 reject 会被自己的 <code class=\"gatsby-code-text\">catch()</code> 处理，而不会传递到 <code class=\"gatsby-code-text\">Promise.all()</code> 和 <code class=\"gatsby-code-text\">Promise.race()</code> 的 <code class=\"gatsby-code-text\">catch()</code> 。</p>\n<h2>Promise.resolve()、Promise.reject()</h2>\n<p>这两个也是 Promise 的静态函数，接受一个对象，并将其转为对应状态的 Promise 对象。相比之下，这两个函数可能比 <code class=\"gatsby-code-text\">Promise.all()</code> 和 <code class=\"gatsby-code-text\">Promise.race()</code> 还要更常用一些。</p>\n<p><code class=\"gatsby-code-text\">Promise.resolve()</code> 的参数可能有几种情况：</p>\n<ul>\n<li>Promise实例：这种情况直接返回，不做修改。</li>\n<li>thenable 对象：具有 <code class=\"gatsby-code-text\">then(resolve, reject)</code> 方法的对象，以这个函数作为 Promise 构造函数的参数，创建 Promise。</li>\n<li>非 thenable 对象，或非对象原始值：返回一个状态为 resolved 的 Promise 对象，参数值直接用于回调。</li>\n<li>不带任何参数：获得一个状态为 resolved 的 Promise 对象，没有回调的参数</li>\n</ul>\n<p>需要注意的是，通过 <code class=\"gatsby-code-text\">Promise.resolve()</code> 创建的 Promise 对象，其 resolve 的时机在本轮事件循环，而不是下一轮事件循环。</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre style=\"counter-reset: linenumber NaN\" class=\"gatsby-code-js line-numbers\"><code class=\"gatsby-code-js\"><span class=\"token function\">setTimeout</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'three'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 下一轮事件循环</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\nPromise<span class=\"token punctuation\">.</span><span class=\"token function\">resolve</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">then</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'two'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 本轮事件循环</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'one'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 立即执行</span>\n\n<span class=\"token comment\">// one</span>\n<span class=\"token comment\">// two</span>\n<span class=\"token comment\">// three</span></code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n<p><code class=\"gatsby-code-text\">Promise.reject()</code> 的参数没有那么复杂，不管是什么类型，都会原封不动的作为 reject 的理由传递给后续的方法。通常来说，reject 的理由会是一个 Error 的实例。</p>\n<h2>Promise.try()</h2>\n<p>这是一个非标准的函数，还在提案阶段。但是一些主流的 Promise 库（Bluebird、Q、when）早就已经提供了这个方法，背后也确实有实际需求存在，未来还是很可能进入标准的。</p>\n<p>这个函数背后的需求，就是 Promise 执行的内容是异步的，但是我们希望同步的代码也可以使用 <code class=\"gatsby-code-text\">then()</code> 的方式来写，这样语义上更符合直觉。目前的方案只有通过改造成立即执行函数来实现，而且同步代码报错需要用 JS 本身的 <code class=\"gatsby-code-text\">try...catch</code> 来捕获，而异步的用 Promise 的 <code class=\"gatsby-code-text\">catch()</code> ，一个 try 对应两种 catch 的方式非常混乱。</p>\n<p><code class=\"gatsby-code-text\">Promise.try</code> 被设计为可以容纳同步和异步的代码，不管哪种类型的异常，都可以交给 <code class=\"gatsby-code-text\">Promise.prototype.catch</code> 去捕获，这样一来 Promise 就具备了完整的 <code class=\"gatsby-code-text\">try...catch</code> 机制，不再只有 catch 却没有 try 了。</p>\n<h2>小结</h2>\n<p>Promise 是 ES6 带来的重要特性之一，也是最为广大开发者熟知的 ES6 新特性之一。从我对应聘者的面试情况来看，当我问及 ES6 有哪些新特性时，应聘者可能未必能说出 ES6 为对象、数组、字符串等添加了什么新的方法，也未必能讲清楚 Symbol、Proxy、Reflect 都是个啥，甚至可能都不知道 Map 和 Set 的存在，但说到 Promise，每个人都可以说上一两句，即便没有专门研究过 ES6，在使用 Axios、Fetch API、Q 等的过程中也会顺带学习到 <code class=\"gatsby-code-text\">then()</code> 的用法，可见 Promise 在前端圈子的普及度。</p>\n<p>当然，在异步流程控制这一块，ES6 的贡献远不止 Promise，还包括 Generator、Async/Await 等方案，别着急，我们马上就会讲到。</p>","frontmatter":{"title":"每天一点ES6(15)：Promise","description":"对你的承诺，永远不变","cover":{"publicURL":"/static/es6daily-0950334fb8899f1006423341cbfeecb9.jpg"},"tags":["ecmascript","2015","es6","javascript","promise"],"series":"es6daily","draft":false},"fields":{"id":"es6-daily-15-promise","date":"2018-03-04"},"headings":[{"value":"写在前面","depth":2},{"value":"什么是 Promise","depth":2},{"value":"Promise 的基本使用","depth":2},{"value":"Promise.prorotype.then()","depth":2},{"value":"Promise.prototype.catch()","depth":2},{"value":"Promise.prototype.finally","depth":2},{"value":"Promise.all()、Promise.race()","depth":2},{"value":"Promise.resolve()、Promise.reject()","depth":2},{"value":"Promise.try()","depth":2},{"value":"小结","depth":2}],"tableOfContents":"<ul>\n<li><a href=\"/blog/2018/03/04/es6-daily-15-promise/#%E5%86%99%E5%9C%A8%E5%89%8D%E9%9D%A2\">写在前面</a></li>\n<li><a href=\"/blog/2018/03/04/es6-daily-15-promise/#%E4%BB%80%E4%B9%88%E6%98%AF-promise\">什么是 Promise</a></li>\n<li><a href=\"/blog/2018/03/04/es6-daily-15-promise/#promise-%E7%9A%84%E5%9F%BA%E6%9C%AC%E4%BD%BF%E7%94%A8\">Promise 的基本使用</a></li>\n<li><a href=\"/blog/2018/03/04/es6-daily-15-promise/#promiseprorotypethen\">Promise.prorotype.then()</a></li>\n<li><a href=\"/blog/2018/03/04/es6-daily-15-promise/#promiseprototypecatch\">Promise.prototype.catch()</a></li>\n<li><a href=\"/blog/2018/03/04/es6-daily-15-promise/#promiseprototypefinally\">Promise.prototype.finally</a></li>\n<li><a href=\"/blog/2018/03/04/es6-daily-15-promise/#promiseall%E3%80%81promiserace\">Promise.all()、Promise.race()</a></li>\n<li><a href=\"/blog/2018/03/04/es6-daily-15-promise/#promiseresolve%E3%80%81promisereject\">Promise.resolve()、Promise.reject()</a></li>\n<li><a href=\"/blog/2018/03/04/es6-daily-15-promise/#promisetry\">Promise.try()</a></li>\n<li><a href=\"/blog/2018/03/04/es6-daily-15-promise/#%E5%B0%8F%E7%BB%93\">小结</a></li>\n</ul>"}},"pageContext":{"slug":"/blog/2018/03/04/es6-daily-15-promise"}}}