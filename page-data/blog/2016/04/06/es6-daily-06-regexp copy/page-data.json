{"componentChunkName":"component---src-templates-blog-post-tsx","path":"/blog/2016/04/06/es6-daily-06-regexp copy","webpackCompilationHash":"","result":{"data":{"site":{"siteMetadata":{"title":"童话说","keywords":["tonghuashuo","github","front-end","javascript","typescript","react","node","washington","hua","童话","童话说","前端","博客","技术","计算机","互联网"]}},"markdownRemark":{"html":"<h2>终于这回不打脸了</h2>\n<p>难得日更了，这一回来讲正则。当然，这不是正则的基础教学，我们只关心 ES6 为 JavaScript 的正则带来的变化。</p>\n<h2>RegExp 构造函数</h2>\n<p>ES5 中，构造函数 <code class=\"gatsby-code-text\">RegExp()</code> 的参数有两种形式：</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre style=\"counter-reset: linenumber NaN\" class=\"gatsby-code-js line-numbers\"><code class=\"gatsby-code-js\"><span class=\"token keyword\">var</span> regexp <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">RegExp</span><span class=\"token punctuation\">(</span><span class=\"token string\">'xyz'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'i'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>    <span class=\"token comment\">// 字符串 + 修饰符</span>\n<span class=\"token keyword\">var</span> regexp <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">RegExp</span><span class=\"token punctuation\">(</span><span class=\"token regex\">/xyz/i</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>        <span class=\"token comment\">// 带修饰符的正则</span>\n\n<span class=\"token comment\">// 以上两种写法都等价于</span>\n<span class=\"token keyword\">var</span> regexp <span class=\"token operator\">=</span> <span class=\"token regex\">/xyz/i</span><span class=\"token punctuation\">;</span></code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n<p>ES6 提供了一种新的写法，提供带修饰符的正则的同时，还能通过第二个参数来覆盖修饰符的内容。</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre style=\"counter-reset: linenumber NaN\" class=\"gatsby-code-js line-numbers\"><code class=\"gatsby-code-js\"><span class=\"token keyword\">var</span> regexp <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">RegExp</span><span class=\"token punctuation\">(</span><span class=\"token string\">'/xyz/ig'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'i'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>    <span class=\"token comment\">// 第一个参数中的正则的修饰符会被忽略，用第二个参数覆盖</span></code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span></span></pre></div>\n<h2>更规范的方法定义</h2>\n<p>在使用正则的同时，必然会带有一个字符串。我们熟悉的 <code class=\"gatsby-code-text\">match()</code> ， <code class=\"gatsby-code-text\">replace()</code> ， <code class=\"gatsby-code-text\">search()</code> 和 <code class=\"gatsby-code-text\">split()</code> 等方法都是 <code class=\"gatsby-code-text\">String</code> 类的方法。</p>\n<p>ES6 对其做了一步规范化，将这些函数的实现全部移到了 <code class=\"gatsby-code-text\">RegExp</code> 类上， <code class=\"gatsby-code-text\">String</code> 类对象调用这些方法时，实际上都将会调用 <code class=\"gatsby-code-text\">RegExp</code> 类的对应方法。</p>\n<h2>新修饰符：u</h2>\n<p>“u”表示“Unicode模式”，用于正确处理四字节的UTF-16编码</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre style=\"counter-reset: linenumber NaN\" class=\"gatsby-code-js line-numbers\"><code class=\"gatsby-code-js\"><span class=\"token regex\">/^\\uD83D/u</span><span class=\"token punctuation\">.</span><span class=\"token function\">test</span><span class=\"token punctuation\">(</span><span class=\"token string\">'\\uD83D\\uDC2A'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  <span class=\"token comment\">/* false */</span>\n<span class=\"token operator\">/</span><span class=\"token operator\">^</span>\\uD83D<span class=\"token operator\">/</span><span class=\"token punctuation\">.</span><span class=\"token function\">test</span><span class=\"token punctuation\">(</span><span class=\"token string\">'\\uD83D\\uDC2A'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>   <span class=\"token comment\">/* true */</span></code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span></span></pre></div>\n<p>上面的代码中， <code class=\"gatsby-code-text\">\\uD83D\\uDC2A</code> 是一个四字节的UTF-16编码，代表一个字符。不加“u”，会按 ES5 将其识别为2个字符，加了“u”之后，会按 ES6 将其正确识别为一个字符。</p>\n<p>别看这小小的改动，影响的东西还是挺多的，以下几种情况就必须加上“u”才能正确识别：</p>\n<h3>1. 通配符</h3>\n<p> <code class=\"gatsby-code-text\">.</code> 在正则表达式中表示出换行符外的任意单个字符， <code class=\"gatsby-code-text\">\\S</code> 表示匹配所有不是空格的字符。对于四字节字符，它们是无法正确识别的，必须加上 <code class=\"gatsby-code-text\">u</code> 修饰符。</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre style=\"counter-reset: linenumber NaN\" class=\"gatsby-code-js line-numbers\"><code class=\"gatsby-code-js\"><span class=\"token keyword\">var</span> s <span class=\"token operator\">=</span> <span class=\"token string\">'𠮷'</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token regex\">/^.$/</span><span class=\"token punctuation\">.</span><span class=\"token function\">test</span><span class=\"token punctuation\">(</span>s<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  <span class=\"token comment\">// false</span>\n<span class=\"token operator\">/</span><span class=\"token operator\">^</span><span class=\"token punctuation\">.</span>$<span class=\"token operator\">/</span>u<span class=\"token punctuation\">.</span><span class=\"token function\">test</span><span class=\"token punctuation\">(</span>s<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// true</span></code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span><span></span></span></pre></div>\n<h3>2. ES6 新增的 Unicode 字符表示法</h3>\n<p>ES6 新增了使用花括号表示 Unicode 字符的写法，这种写法必须加上 <code class=\"gatsby-code-text\">u</code> 修饰符才能识别，否则会被识别为正则表达式中的量词。例如下面的 <code class=\"gatsby-code-text\">/\\u{61}/</code> ，本意是想匹配“a”，但因为没有加 <code class=\"gatsby-code-text\">u</code> ，只能被识别为匹配61个连续的“u”。</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre style=\"counter-reset: linenumber NaN\" class=\"gatsby-code-js line-numbers\"><code class=\"gatsby-code-js\"><span class=\"token regex\">/\\u{61}/</span><span class=\"token punctuation\">.</span><span class=\"token function\">test</span><span class=\"token punctuation\">(</span><span class=\"token string\">'a'</span><span class=\"token punctuation\">)</span>      <span class=\"token comment\">// false</span>\n<span class=\"token operator\">/</span>\\u<span class=\"token punctuation\">{</span><span class=\"token number\">61</span><span class=\"token punctuation\">}</span><span class=\"token operator\">/</span>u<span class=\"token punctuation\">.</span><span class=\"token function\">test</span><span class=\"token punctuation\">(</span><span class=\"token string\">'a'</span><span class=\"token punctuation\">)</span>     <span class=\"token comment\">// true</span>\n<span class=\"token operator\">/</span>\\u<span class=\"token punctuation\">{</span><span class=\"token number\">20</span>BB7<span class=\"token punctuation\">}</span><span class=\"token operator\">/</span>u<span class=\"token punctuation\">.</span><span class=\"token function\">test</span><span class=\"token punctuation\">(</span><span class=\"token string\">'𠮷'</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// true</span></code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span></span></pre></div>\n<h3>3. i 修饰符</h3>\n<p>有些Unicode字符的编码不同，但字型很相近，需要加 <code class=\"gatsby-code-text\">u</code> 才能识别</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre style=\"counter-reset: linenumber NaN\" class=\"gatsby-code-js line-numbers\"><code class=\"gatsby-code-js\"><span class=\"token regex\">/[a-z]/i</span><span class=\"token punctuation\">.</span><span class=\"token function\">test</span><span class=\"token punctuation\">(</span><span class=\"token string\">'\\u212A'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  <span class=\"token comment\">// false</span>\n<span class=\"token operator\">/</span><span class=\"token punctuation\">[</span>a<span class=\"token operator\">-</span>z<span class=\"token punctuation\">]</span><span class=\"token operator\">/</span>iu<span class=\"token punctuation\">.</span><span class=\"token function\">test</span><span class=\"token punctuation\">(</span><span class=\"token string\">'\\u212A'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// true</span></code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span></span></pre></div>\n<h2>新修饰符：y</h2>\n<p>和修饰符 <code class=\"gatsby-code-text\">y</code> 类似，都是全局匹配，后一次从上一次匹配成功的下一位置开始继续匹配。区别在于， <code class=\"gatsby-code-text\">g</code> 只要剩余部分中存在匹配即可，而 <code class=\"gatsby-code-text\">y</code> 要求必须从剩余部分的第一个位置开始。所谓“粘连”就是这个意思，其设计用途就是让头部匹配标志 <code class=\"gatsby-code-text\">^</code> 在全局匹配中都有效。</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre style=\"counter-reset: linenumber NaN\" class=\"gatsby-code-js line-numbers\"><code class=\"gatsby-code-js\"><span class=\"token keyword\">var</span> s <span class=\"token operator\">=</span> <span class=\"token string\">'aaa_aa_a'</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">var</span> r1 <span class=\"token operator\">=</span> <span class=\"token regex\">/a+/g</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">var</span> r2 <span class=\"token operator\">=</span> <span class=\"token regex\">/a+/y</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// 第一次匹配都成功</span>\nr1<span class=\"token punctuation\">.</span><span class=\"token function\">exec</span><span class=\"token punctuation\">(</span>s<span class=\"token punctuation\">)</span> <span class=\"token comment\">// [\"aaa\"]</span>\nr2<span class=\"token punctuation\">.</span><span class=\"token function\">exec</span><span class=\"token punctuation\">(</span>s<span class=\"token punctuation\">)</span> <span class=\"token comment\">// [\"aaa\"]</span>\n\nr1<span class=\"token punctuation\">.</span><span class=\"token function\">exec</span><span class=\"token punctuation\">(</span>s<span class=\"token punctuation\">)</span> <span class=\"token comment\">// [\"aa\"]</span>\nr2<span class=\"token punctuation\">.</span><span class=\"token function\">exec</span><span class=\"token punctuation\">(</span>s<span class=\"token punctuation\">)</span> <span class=\"token comment\">// null，剩余部分第一个位置是下划线，不匹配</span></code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n<p>若在 <code class=\"gatsby-code-text\">split()</code> 中使用 <code class=\"gatsby-code-text\">y</code> 修饰符，则原字符串必须以分隔符开头才有可能匹配成功，且匹配成功所得数组的第一个元素肯定是空字符串。 <code class=\"gatsby-code-text\">replace()</code> 等方法也是类似。</p>\n<h2>sticky 属性</h2>\n<p>这是 ES6 新增的 <code class=\"gatsby-code-text\">RegExp</code> 类的属性，用于表示正则对象是否设置了 <code class=\"gatsby-code-text\">y</code> 修饰符</p>\n<h2>flags 属性</h2>\n<p>ES6 为正则表达式新增了 <code class=\"gatsby-code-text\">flags</code> 属性，返回正则表达式的修饰符。要返回正则表达式的正文，则需要 <code class=\"gatsby-code-text\">source</code> 属性，这是 ES5 中就已经存在的属性。</p>\n<h2>该系列的其他文章</h2>\n<p>上一篇：<a href=\"/blog/2016/04/05/es6-daily-05-string\">每天一点ES6(5)：字符串的扩展</a></p>\n<p>下一篇：<a href=\"/blog/2016/04/12/es6-daily-07-number\">每天一点ES6(7)：数值的扩展</a></p>","frontmatter":{"title":"每天一点ES6(6)：正则的扩展","description":"四字节 Unicode 的春天","cover":{"publicURL":"/static/es6daily-0950334fb8899f1006423341cbfeecb9.jpg"},"tags":["ecmascript","2015","es6","javascript","regular","expression","regexp"],"series":"es6daily","draft":false},"fields":{"id":"es6-daily-06-regexp copy","date":"2016-04-05T16:00:00.000Z"}}},"pageContext":{"isCreatedByStatefulCreatePages":false,"slug":"/blog/2016/04/06/es6-daily-06-regexp copy"}}}