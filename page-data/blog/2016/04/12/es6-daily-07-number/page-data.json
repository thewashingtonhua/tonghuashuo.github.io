{"componentChunkName":"component---src-templates-blog-post-tsx","path":"/blog/2016/04/12/es6-daily-07-number","webpackCompilationHash":"05b002660778d734ef94","result":{"data":{"site":{"siteMetadata":{"title":"童话说","keywords":["tonghuashuo","github","front-end","javascript","typescript","react","node","washington","hua","童话","童话说","前端","博客","技术","计算机","互联网"]}},"markdownRemark":{"html":"<h2>二进制和八进制表示法</h2>\n<p>ES6 提供了二进制和八进制数的新写法，分别用前缀 <code class=\"gatsby-code-text\">0b</code> （零必）和 <code class=\"gatsby-code-text\">0o</code> （零欧）表示。</p>\n<p>ES5 开始，严格模式下就不再允许使用前缀 <code class=\"gatsby-code-text\">0</code> ，ES6 进一步明确必须使用前缀 <code class=\"gatsby-code-text\">0o</code> 。</p>\n<p>如果要将 <code class=\"gatsby-code-text\">0b</code> 和 <code class=\"gatsby-code-text\">0x</code> 前缀的字符串数值专为十进制，可以用 <code class=\"gatsby-code-text\">Number()</code> 方法。</p>\n<h2>旧酒装进了新瓶子</h2>\n<p>ES6 的一项重要任务，就是对全局函数的整理，将一些全局函数规范化到 <code class=\"gatsby-code-text\">String</code> 、 <code class=\"gatsby-code-text\">Number</code> 、 <code class=\"gatsby-code-text\">RegExp</code> 等原始类型中。</p>\n<h3>1. Number.isFinite()，Number.isNaN()</h3>\n<p>这两个函数是 ES6 中新增的函数，作为 <code class=\"gatsby-code-text\">Number</code> 类的方法。在 ES5 中，有两个同名的全局函数，作用其实相同，区别在于 ES5 中的这两个函数会先调用 <code class=\"gatsby-code-text\">Number()</code> 讲非数值转换为数值后再判断，而两个新的方法值对数只有小，对非数值一律返回false。</p>\n<h3>2. Number.parseInt()，Number.parseFloat()</h3>\n<p>同样是 ES6 中新增的函数，同样作为 <code class=\"gatsby-code-text\">Number</code> 类的方法，同样在 ES5 中存在同名的全局函数，但这两个函数的作用和用法并没有改变</p>\n<h2>新增的函数</h2>\n<p>除了对原有函数的整理，ES6 自然少不了一些新加的语法糖。</p>\n<h3>Number.isInteger()</h3>\n<p>用于判断整数，需要注意的是，JavaScript 内部对整数和浮点数采用一样的存储方式，因此小数点后为0的浮点数同样会被认为是整数。</p>\n<h3>Number.EPSILON</h3>\n<p>这是一个极小的常量，设计用来平衡浮点数的计算误差，如果浮点数计算所得的误差不超过它，则认为是可接受的。</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre style=\"counter-reset: linenumber NaN\" class=\"gatsby-code-js line-numbers\"><code class=\"gatsby-code-js\">Number<span class=\"token punctuation\">.</span><span class=\"token constant\">EPSILON</span>                  <span class=\"token comment\">//  2.220446049250313e-16</span>\nNumber<span class=\"token punctuation\">.</span><span class=\"token constant\">EPSILON</span><span class=\"token punctuation\">.</span><span class=\"token function\">toFixed</span><span class=\"token punctuation\">(</span><span class=\"token number\">20</span><span class=\"token punctuation\">)</span>      <span class=\"token comment\">// '0.00000000000000022204'</span></code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span></span></pre></div>\n<h2>安全整数</h2>\n<p>JavaScript 能准确表示的整数范围为：- 2^53 ~ 2^53，超出这个范围的整数，JavaScript 将无法直接表示。ES6 引入了 <code class=\"gatsby-code-text\">Number.MAX_SAFE_INTEGER</code> 和 <code class=\"gatsby-code-text\">Number.MIN_SAFE_INTEGER</code> 这两个常量，用来表示这个范围的上下限，以及 <code class=\"gatsby-code-text\">Number.isSafeInteger()</code> 来判断一个整数是否在这个范围内。</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre style=\"counter-reset: linenumber NaN\" class=\"gatsby-code-js line-numbers\"><code class=\"gatsby-code-js\">Number<span class=\"token punctuation\">.</span><span class=\"token constant\">MAX_SAFE_INTEGER</span> <span class=\"token operator\">===</span>  <span class=\"token number\">9007199254740991</span><span class=\"token punctuation\">;</span>             <span class=\"token comment\">//   2^53 - 1</span>\nNumber<span class=\"token punctuation\">.</span><span class=\"token constant\">MIN_SAFE_INTEGER</span> <span class=\"token operator\">===</span> <span class=\"token operator\">-</span><span class=\"token number\">9007199254740991</span><span class=\"token punctuation\">;</span>             <span class=\"token comment\">// -(2^53 - 1)</span>\nNumber<span class=\"token punctuation\">.</span><span class=\"token constant\">MIN_SAFE_INTEGER</span> <span class=\"token operator\">===</span> <span class=\"token operator\">-</span>Number<span class=\"token punctuation\">.</span><span class=\"token constant\">MAX_SAFE_INTEGER</span><span class=\"token punctuation\">;</span>      <span class=\"token comment\">// true</span></code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span></span></pre></div>\n<p>注意，在用 <code class=\"gatsby-code-text\">Number.isSafeInteger()</code> 判断运算时，要对参与运算的每个值都进行验证，光验证计算结果是不足以说明问题的，因为超过精度范围的数并不是不存在，只是超出部分被截断，只保留精度范围的上下限。</p>\n<h2>Math对象的扩展</h2>\n<p>ES6 在 <code class=\"gatsby-code-text\">Math</code> 对象上新增了17个静态方法：</p>\n<h3>Math.trunc()</h3>\n<p>取整数部分，小数部分直接截断不舍入，相当于对负数执行 <code class=\"gatsby-code-text\">ceil()</code> ，对正数执行 <code class=\"gatsby-code-text\">floor()</code> 。非数值会先经过 <code class=\"gatsby-code-text\">Number()</code> 转换，空值和无法截取整数的值会返回 <code class=\"gatsby-code-text\">NaN</code> 。</p>\n<h3>Math.sign()</h3>\n<p>返回一个数的正负，正数返回1，负数返回-1，正负0返回自身，其他值返回 <code class=\"gatsby-code-text\">NaN</code> 。</p>\n<h3>Math.cbrt()</h3>\n<p>开立方根。</p>\n<h3>Math.clz32()</h3>\n<p>JavaScript 整数采用32位二进制形式表示，该函数返回一个数的32位无符号整数形式有多少个前导零。对于小数， <code class=\"gatsby-code-text\">Math.clz32()</code> 只考虑去整数部分。clz是Count Leading Zero的缩写。</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre style=\"counter-reset: linenumber NaN\" class=\"gatsby-code-js line-numbers\"><code class=\"gatsby-code-js\">Math<span class=\"token punctuation\">.</span><span class=\"token function\">clz32</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// 32</span>\nMath<span class=\"token punctuation\">.</span><span class=\"token function\">clz32</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// 31</span>\nMath<span class=\"token punctuation\">.</span><span class=\"token function\">clz32</span><span class=\"token punctuation\">(</span><span class=\"token number\">1000</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// 22，1000的二进制为0...01111101000，前22位都是0</span></code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span></span></pre></div>\n<p> <code class=\"gatsby-code-text\">Math.clz32()</code> 和左移运算符 <code class=\"gatsby-code-text\">&amp;lt;&amp;lt;</code> 密切相关，后者会直接影响前者的结果。</p>\n<h3>Math.imul()</h3>\n<p>返回两个数以32位带符号整数形式相乘的结果，返回的也是一个32位的带符号整数。通常情况下和一般的乘法没有区别，这个函数的意义在于计算结果超过 2^53 时可以正确保留后 32 位的值。</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre style=\"counter-reset: linenumber NaN\" class=\"gatsby-code-js line-numbers\"><code class=\"gatsby-code-js\"><span class=\"token punctuation\">(</span><span class=\"token number\">0x7fffffff</span> <span class=\"token operator\">*</span> <span class=\"token number\">0x7fffffff</span><span class=\"token punctuation\">)</span><span class=\"token operator\">|</span><span class=\"token number\">0</span>       <span class=\"token comment\">// 0</span>\nMath<span class=\"token punctuation\">.</span><span class=\"token function\">imul</span><span class=\"token punctuation\">(</span><span class=\"token number\">0x7fffffff</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0x7fffffff</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// 1</span></code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span></span></pre></div>\n<h3>Math.fround()</h3>\n<p>返回一个数的单精度浮点数形式。对整数而言没有任何不同，主要影响那些无法用64个二进制位精确表示的小数，函数返回最接近这个小数的单精度浮点数。</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre style=\"counter-reset: linenumber NaN\" class=\"gatsby-code-js line-numbers\"><code class=\"gatsby-code-js\">Math<span class=\"token punctuation\">.</span><span class=\"token function\">fround</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>     <span class=\"token comment\">// 0</span>\nMath<span class=\"token punctuation\">.</span><span class=\"token function\">fround</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>     <span class=\"token comment\">// 1</span>\nMath<span class=\"token punctuation\">.</span><span class=\"token function\">fround</span><span class=\"token punctuation\">(</span><span class=\"token number\">1.337</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 1.3370000123977661</span>\nMath<span class=\"token punctuation\">.</span><span class=\"token function\">fround</span><span class=\"token punctuation\">(</span><span class=\"token number\">1.5</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>   <span class=\"token comment\">// 1.5</span>\nMath<span class=\"token punctuation\">.</span><span class=\"token function\">fround</span><span class=\"token punctuation\">(</span><span class=\"token number\">NaN</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>   <span class=\"token comment\">// NaN</span></code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n<h3>Math.hypot()</h3>\n<p>返回所有参数的平方和的平方根。</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre style=\"counter-reset: linenumber NaN\" class=\"gatsby-code-js line-numbers\"><code class=\"gatsby-code-js\">Math<span class=\"token punctuation\">.</span><span class=\"token function\">hypot</span><span class=\"token punctuation\">(</span><span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>        <span class=\"token comment\">// 5</span>\nMath<span class=\"token punctuation\">.</span><span class=\"token function\">hypot</span><span class=\"token punctuation\">(</span><span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4</span><span class=\"token punctuation\">,</span> <span class=\"token number\">5</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>     <span class=\"token comment\">// 7.0710678118654755</span></code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span></span></pre></div>\n<h3>Math.expm1()</h3>\n<p> <code class=\"gatsby-code-text\">math.expm1(x)</code> 返回e^x-1，即 <code class=\"gatsby-code-text\">Math.exp(x) - 1</code></p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre style=\"counter-reset: linenumber NaN\" class=\"gatsby-code-js line-numbers\"><code class=\"gatsby-code-js\">Math<span class=\"token punctuation\">.</span><span class=\"token function\">expm1</span><span class=\"token punctuation\">(</span><span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// -0.6321205588285577</span>\nMath<span class=\"token punctuation\">.</span><span class=\"token function\">expm1</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  <span class=\"token comment\">// 0</span>\nMath<span class=\"token punctuation\">.</span><span class=\"token function\">expm1</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  <span class=\"token comment\">// 1.718281828459045</span></code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span></span></pre></div>\n<h3>Math.log1p()</h3>\n<p> <code class=\"gatsby-code-text\">Math.log1p(x)</code> 返回ln(1+x)，即 <code class=\"gatsby-code-text\">Math.log(1+x)</code> 。如果 x&#x3C;-1，返回 <code class=\"gatsby-code-text\">NaN</code> 。</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre style=\"counter-reset: linenumber NaN\" class=\"gatsby-code-js line-numbers\"><code class=\"gatsby-code-js\">Math<span class=\"token punctuation\">.</span><span class=\"token function\">expm1</span><span class=\"token punctuation\">(</span><span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// -0.6321205588285577</span>\nMath<span class=\"token punctuation\">.</span><span class=\"token function\">expm1</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  <span class=\"token comment\">// 0</span>\nMath<span class=\"token punctuation\">.</span><span class=\"token function\">expm1</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  <span class=\"token comment\">// 1.718281828459045</span></code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span></span></pre></div>\n<h3>Math.log10()</h3>\n<p> <code class=\"gatsby-code-text\">Math.log10(x)</code> 返回以10为底的x的对数，即 <code class=\"gatsby-code-text\">Math.log(x) / Math.LN10</code> 。如果 x&#x3C;0，返回 <code class=\"gatsby-code-text\">NaN</code> 。</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre style=\"counter-reset: linenumber NaN\" class=\"gatsby-code-js line-numbers\"><code class=\"gatsby-code-js\">Math<span class=\"token punctuation\">.</span><span class=\"token function\">expm1</span><span class=\"token punctuation\">(</span><span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// -0.6321205588285577</span>\nMath<span class=\"token punctuation\">.</span><span class=\"token function\">expm1</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  <span class=\"token comment\">// 0</span>\nMath<span class=\"token punctuation\">.</span><span class=\"token function\">expm1</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  <span class=\"token comment\">// 1.718281828459045</span></code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span></span></pre></div>\n<h3>Math.log2()</h3>\n<p> <code class=\"gatsby-code-text\">Math.log2(x)</code> 返回以2为底的x的对数，即 <code class=\"gatsby-code-text\">Math.log(x) / Math.LN2</code> 。如果 x&#x3C;0，返回 <code class=\"gatsby-code-text\">NaN</code> 。</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre style=\"counter-reset: linenumber NaN\" class=\"gatsby-code-js line-numbers\"><code class=\"gatsby-code-js\">Math<span class=\"token punctuation\">.</span><span class=\"token function\">expm1</span><span class=\"token punctuation\">(</span><span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// -0.6321205588285577</span>\nMath<span class=\"token punctuation\">.</span><span class=\"token function\">expm1</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  <span class=\"token comment\">// 0</span>\nMath<span class=\"token punctuation\">.</span><span class=\"token function\">expm1</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  <span class=\"token comment\">// 1.718281828459045</span></code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span></span></pre></div>\n<h3>双曲函数</h3>\n<table>\n<thead>\n<tr>\n<th>函数名</th>\n<th>作用</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>Math.sinh(x)</td>\n<td>双曲正切</td>\n</tr>\n<tr>\n<td>Math.cosh(x)</td>\n<td>双曲余弦</td>\n</tr>\n<tr>\n<td>Math.tanh(x)</td>\n<td>双曲正切</td>\n</tr>\n<tr>\n<td>Math.asinh(x)</td>\n<td>反双曲正弦</td>\n</tr>\n<tr>\n<td>Math.acosh(x)</td>\n<td>反双曲余弦</td>\n</tr>\n<tr>\n<td>Math.atanh(x)</td>\n<td>反双曲正切</td>\n</tr>\n</tbody>\n</table>\n<h3>指数运算符号 **</h3>\n<p>这是一个 ES7 打算引入的运算符 <code class=\"gatsby-code-text\">**</code> ，可以和等号连用构成 <code class=\"gatsby-code-text\">**=</code> 。目前 Babel 已经支持。</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre style=\"counter-reset: linenumber NaN\" class=\"gatsby-code-js line-numbers\"><code class=\"gatsby-code-js\"><span class=\"token number\">2</span> <span class=\"token operator\">**</span> <span class=\"token number\">3</span><span class=\"token punctuation\">;</span>   <span class=\"token comment\">// 8</span>\n\n<span class=\"token keyword\">let</span> a<span class=\"token operator\">=</span><span class=\"token number\">2</span><span class=\"token punctuation\">;</span>\na <span class=\"token operator\">**=</span> <span class=\"token number\">3</span><span class=\"token punctuation\">;</span>  <span class=\"token comment\">// 8</span></code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span><span></span></span></pre></div>\n<h2>该系列的其他文章</h2>\n<p>上一篇：<a href=\"/blog/2016/04/06/es6-daily-06-regexp\">每天一点ES6(6)：正则的扩展</a></p>\n<p>下一篇：<a href=\"/blog/2016/07/26/es6-daily-08-array\">每天一点ES6(8)：数组的扩展</a></p>","frontmatter":{"title":"每天一点ES6(7)：数值的扩展","description":"每一个数字都不能放过","cover":{"publicURL":"/static/es6daily-0950334fb8899f1006423341cbfeecb9.jpg"},"tags":["ecmascript","2015","es6","javascript","number"],"series":"es6daily","draft":false},"fields":{"id":"es6-daily-07-number","date":"2016-04-11T16:00:00.000Z"}}},"pageContext":{"isCreatedByStatefulCreatePages":false,"slug":"/blog/2016/04/12/es6-daily-07-number"}}}