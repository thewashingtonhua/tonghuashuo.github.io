{"componentChunkName":"component---src-templates-blog-post-tsx","path":"/blog/2019/05/27/rethink-in-hooks","result":{"data":{"site":{"siteMetadata":{"title":"童话说","keywords":["tonghuashuo","github","front-end","javascript","typescript","react","node","washington","hua","童话","童话说","前端","博客","技术","计算机","互联网"]}},"allMarkdownRemark":{"totalCount":70,"edges":[{"node":{"id":"c205d1bc-0577-5639-90aa-37b6f09d3547","frontmatter":{"title":"CSS Scan","description":"VSCode 扩展，自动补全 CSS 变量","tags":null,"cover":{"publicURL":"/static/blank-72e94c39ebb670dd23625675c0a22ace.jpg"},"series":null,"draft":true,"original":null},"fields":{"id":"css-scan","slug":"/project/css-scan","type":"project","date":null}}},{"node":{"id":"6a3bf076-bd85-5f11-8eb1-16e95286adaf","frontmatter":{"title":"FBC","description":"联合办公空间的会员服务","tags":null,"cover":{"publicURL":"/static/fbc-73b8b250e607c97c493edf1b542345fa.jpg"},"series":null,"draft":false,"original":null},"fields":{"id":"fbc","slug":"/project/fbc","type":"project","date":null}}},{"node":{"id":"71ffc9c2-24f4-5a91-a9fc-4694778e43c7","frontmatter":{"title":"Github-Flutter","description":"基于 Flutter 开发的 Github 客户端","tags":null,"cover":{"publicURL":"/static/blank-72e94c39ebb670dd23625675c0a22ace.jpg"},"series":null,"draft":true,"original":null},"fields":{"id":"github-flutter","slug":"/project/github-flutter","type":"project","date":null}}},{"node":{"id":"096c5d70-0164-57e4-91c0-1aafddde7880","frontmatter":{"title":"INEX 影力所","description":"泛娱乐领域的垂直数字货币交易所","tags":null,"cover":{"publicURL":"/static/inex-40ff0dfa20bfd2e8e2b2ea8abb900b5b.jpg"},"series":null,"draft":false,"original":null},"fields":{"id":"inex","slug":"/project/inex","type":"project","date":null}}},{"node":{"id":"d3fe6409-636c-5419-97f1-f15c8dca1056","frontmatter":{"title":"小图标","description":"一站式 Favicon 解决方案","tags":null,"cover":{"publicURL":"/static/blank-72e94c39ebb670dd23625675c0a22ace.jpg"},"series":null,"draft":true,"original":null},"fields":{"id":"the-favicon","slug":"/project/the-favicon","type":"project","date":null}}},{"node":{"id":"a2ea7f53-9ec5-5042-b8ca-5be79e9c6785","frontmatter":{"title":"小扫描","description":"磁盘占用一眼","tags":null,"cover":{"publicURL":"/static/blank-72e94c39ebb670dd23625675c0a22ace.jpg"},"series":null,"draft":true,"original":null},"fields":{"id":"the-scanner","slug":"/project/the-scanner","type":"project","date":null}}},{"node":{"id":"7b74e9c9-8dc8-59b9-86d9-ad7f13a67df6","frontmatter":{"title":"小剧透","description":"Web 版「剧情连拍」","tags":null,"cover":{"publicURL":"/static/blank-72e94c39ebb670dd23625675c0a22ace.jpg"},"series":null,"draft":true,"original":null},"fields":{"id":"the-spoiler","slug":"/project/the-spoiler","type":"project","date":null}}},{"node":{"id":"4f46ae77-847c-5508-acae-7c8d89c42804","frontmatter":{"title":"Thoughts 所思","description":"企业知识管理应用","tags":null,"cover":{"publicURL":"/static/thoughts-faff3495c115cab9b6fd951f3c6b96f9.jpg"},"series":null,"draft":false,"original":null},"fields":{"id":"thoughts","slug":"/project/thoughts","type":"project","date":null}}},{"node":{"id":"24f860b7-781d-5fca-a7d2-dc224a10bd4c","frontmatter":{"title":"新阅","description":"在线视频协作平台","tags":null,"cover":{"publicURL":"/static/xinyue-64b35564f5bc639232b66b6559065b31.jpg"},"series":null,"draft":false,"original":null},"fields":{"id":"xinyue","slug":"/project/xinyue","type":"project","date":null}}},{"node":{"id":"7a64b536-2246-5627-93d5-c19fa4db4d5d","frontmatter":{"title":"Xshowroom 买手圈","description":"时尚业专业买手服务平台","tags":null,"cover":{"publicURL":"/static/xshowroom-72ea2ae7921cb5aa0b3b4f56578ed2b9.jpg"},"series":null,"draft":false,"original":null},"fields":{"id":"xshowroom","slug":"/project/xshowroom","type":"project","date":null}}},{"node":{"id":"499d6aa3-64ca-5ff7-9dbe-f2dc15620111","frontmatter":{"title":"时间是什么颜色的","description":"如果时间有颜色……","tags":["color","time","project"],"cover":{"publicURL":"/static/tik-tok-color-03c874556dd31d9db5f30b7609751b92.jpg"},"series":"","draft":false,"original":true},"fields":{"id":"tik-tok-color","slug":"/blog/2015/02/11/tik-tok-color","type":"blog","date":"2015-02-11"}}},{"node":{"id":"4421f486-85ac-5dd2-8347-cb417b4085ac","frontmatter":{"title":"栈计算器","description":"通过“栈”实现的方程式计算器","tags":["stack","calculator","algorithm","project"],"cover":{"publicURL":"/static/stack-calculator-256bbf9439e7f58974c946bc16f54832.jpg"},"series":"","draft":false,"original":true},"fields":{"id":"stack-calculator","slug":"/blog/2015/02/10/stack-calculator","type":"blog","date":"2015-02-10"}}},{"node":{"id":"5920ff7d-5749-5463-b37b-23cc9a8b122c","frontmatter":{"title":"使用 Sublime Text 编写 LaTeX","description":"用你最熟悉的工具来写 LaTeX 吧","tags":["sublime","latex"],"cover":{"publicURL":"/static/latex-with-sublime-text-e7689b7e9fe6160a6ed614a10125ca29.jpg"},"series":"","draft":false,"original":true},"fields":{"id":"latex-with-sublime-text","slug":"/blog/2015/04/01/latex-with-sublime-text","type":"blog","date":"2015-04-01"}}},{"node":{"id":"290932e4-635f-592d-be69-7d9c3b5d7ba0","frontmatter":{"title":"小书签","description":"让 Chrome 的书签更好用","tags":null,"cover":{"publicURL":"/static/blank-72e94c39ebb670dd23625675c0a22ace.jpg"},"series":null,"draft":true,"original":null},"fields":{"id":"the-collector","slug":"/project/the-collector","type":"project","date":null}}},{"node":{"id":"029e2e2f-9244-5e03-8940-1c8581163583","frontmatter":{"title":"substr() 和 substring() 的区别","description":"两个函数，傻傻分不清楚","tags":["javascript","substr","substring","slice"],"cover":{"publicURL":"/static/substring-289ad52fc38963e15549cd1dc24678e4.jpg"},"series":"","draft":false,"original":true},"fields":{"id":"substr-and-substring","slug":"/blog/2015/05/15/substr-and-substring","type":"blog","date":"2015-05-15"}}},{"node":{"id":"f736dccd-78cb-5c90-bd99-5a07fa51913a","frontmatter":{"title":"MIUI 图标缓存问题","description":"离奇失踪的图标","tags":["android","miui","icon","cache"],"cover":{"publicURL":"/static/miui-icon-cache-2e66c31a61d5319c1849ea082e8c80ee.jpg"},"series":"","draft":false,"original":true},"fields":{"id":"miui-icon-cache","slug":"/blog/2015/04/18/miui-icon-cache","type":"blog","date":"2015-04-18"}}},{"node":{"id":"13b8d1d1-789b-5dc9-916c-7b7893210310","frontmatter":{"title":"纯 CSS3 绘制月饼","description":"中秋佳节，用CSS3来画个月饼吧","tags":["css","mooncake","project"],"cover":{"publicURL":"/static/css3-mooncake-9aaefaae86216c79623893c080f1ccc2.jpg"},"series":"","draft":false,"original":true},"fields":{"id":"css3-mooncake","slug":"/blog/2015/09/27/css3-mooncake","type":"blog","date":"2015-09-27"}}},{"node":{"id":"a7bb9a3a-e254-5aa9-bb0b-151acf106547","frontmatter":{"title":"每天一点ES6(1)：概述","description":"伊艾斯6大法好，每天一点不会老！","tags":["ecmascript","2015","es6","javascript"],"cover":{"publicURL":"/static/es6daily-0950334fb8899f1006423341cbfeecb9.jpg"},"series":"es6daily","draft":false,"original":true},"fields":{"id":"es6-daily-01-intro","slug":"/blog/2016/01/24/es6-daily-01-intro","type":"blog","date":"2016-01-24"}}},{"node":{"id":"c265e8ec-ef97-51b2-8bb4-53e1b6e2b4c9","frontmatter":{"title":"每天一点ES6(2)：let 和 const","description":"终于，JavaScript 也能用上块级作用域和常量了","tags":["ecmascript","2015","es6","javascript","let","const"],"cover":{"publicURL":"/static/es6daily-0950334fb8899f1006423341cbfeecb9.jpg"},"series":"es6daily","draft":false,"original":true},"fields":{"id":"es6-daily-02-let-and-const","slug":"/blog/2016/01/25/es6-daily-02-let-and-const","type":"blog","date":"2016-01-25"}}},{"node":{"id":"8ac916b6-109e-53d3-8208-b858de01b8b3","frontmatter":{"title":"每天一点ES6(6)：正则的扩展","description":"四字节 Unicode 的春天","tags":["ecmascript","2015","es6","javascript","regular","expression","regexp"],"cover":{"publicURL":"/static/es6daily-0950334fb8899f1006423341cbfeecb9.jpg"},"series":"es6daily","draft":false,"original":true},"fields":{"id":"es6-daily-06-regexp","slug":"/blog/2016/04/06/es6-daily-06-regexp","type":"blog","date":"2016-04-06"}}},{"node":{"id":"05523bfe-fa16-5b14-aa80-42a411b2f859","frontmatter":{"title":"电梯调度算法","description":"上上下下的感受","tags":["elevator","algorithm","project"],"cover":{"publicURL":"/static/elevator-7b7f4cefe4c7bf293ff2cdb266af33d9.jpg"},"series":"","draft":false,"original":true},"fields":{"id":"elevator","slug":"/blog/2016/02/16/elevator","type":"blog","date":"2016-02-16"}}},{"node":{"id":"efd68842-6b4e-5a6a-81b0-8c3a3b324c22","frontmatter":{"title":"每天一点ES6(7)：数值的扩展","description":"每一个数字都不能放过","tags":["ecmascript","2015","es6","javascript","number"],"cover":{"publicURL":"/static/es6daily-0950334fb8899f1006423341cbfeecb9.jpg"},"series":"es6daily","draft":false,"original":true},"fields":{"id":"es6-daily-07-number","slug":"/blog/2016/04/12/es6-daily-07-number","type":"blog","date":"2016-04-12"}}},{"node":{"id":"63080f8f-fd06-5b77-87ba-fa49b124abc6","frontmatter":{"title":"每天一点ES6(8)：数组的扩展","description":"别拿语法糖不当干粮","tags":["ecmascript","2015","es6","javascript","array"],"cover":{"publicURL":"/static/es6daily-0950334fb8899f1006423341cbfeecb9.jpg"},"series":"es6daily","draft":false,"original":true},"fields":{"id":"es6-daily-08-array","slug":"/blog/2016/07/26/es6-daily-08-array","type":"blog","date":"2016-07-26"}}},{"node":{"id":"e3ed4d20-d956-5578-bc5f-12619bd85faf","frontmatter":{"title":"5 分钟彻底明白 JSONP","description":"说穿了，其实没那么难","tags":["javascript","jsonp"],"cover":{"publicURL":"/static/jsonp-f8f2d118b15646398f7d00e19eb17ff9.jpg"},"series":"","draft":false,"original":true},"fields":{"id":"jsonp","slug":"/blog/2016/08/17/jsonp","type":"blog","date":"2016-08-17"}}},{"node":{"id":"a9d38fb9-9cbb-5162-9315-03ab6d83727d","frontmatter":{"title":"记 new Date().toString() 的一个坑","description":"万万没想到，竟在这里踩了个坑……","tags":["javascript","date","tostring"],"cover":{"publicURL":"/static/date-tostring-e192283893c7e97feb631571134bb805.jpg"},"series":"","draft":false,"original":true},"fields":{"id":"a-pit-in-date-tostring","slug":"/blog/2017/03/08/a-pit-in-date-tostring","type":"blog","date":"2017-03-08"}}},{"node":{"id":"5caebd71-bf77-5d58-a3fe-1609e95678a6","frontmatter":{"title":"解决 macOS 下 MySQL 2002 错误","description":"MySQL 真是个磨人的小妖精","tags":["mac","mysql","2002"],"cover":{"publicURL":"/static/mysql-error-2002-6f1abf9c085f6538df6bced86e008157.jpg"},"series":"","draft":false,"original":true},"fields":{"id":"mysql-error-2002","slug":"/blog/2017/02/07/mysql-error-2002","type":"blog","date":"2017-02-07"}}},{"node":{"id":"b59e8376-90fa-5473-a44e-442ca891df72","frontmatter":{"title":"iOS 下 click() 无效的问题","description":"iOS这个傲娇的小公举","tags":["ios","click"],"cover":{"publicURL":"/static/ios-click-f79051a5758b8a973902b2e5d190b714.jpg"},"series":"","draft":false,"original":true},"fields":{"id":"unable-to-trigger-click-on-ios","slug":"/blog/2017/03/31/unable-to-trigger-click-on-ios","type":"blog","date":"2017-03-31"}}},{"node":{"id":"70de981c-ab69-5cb2-be03-b2517a2c4342","frontmatter":{"title":"PHP 处理多源 CORS 的解决办法","description":"一个老生常谈的话题，碰到了顺便记录一下","tags":["php","cors"],"cover":{"publicURL":"/static/cors-77fc63594cf3a06c31921df671acd258.jpg"},"series":"","draft":false,"original":true},"fields":{"id":"multi-origin-cors-with-php","slug":"/blog/2017/03/30/multi-origin-cors-with-php","type":"blog","date":"2017-03-30"}}},{"node":{"id":"3c2c676f-674b-5a0c-9f99-beb36ff42844","frontmatter":{"title":"Webpack \"Invalid Host Header\"","description":"更新有风险，更新需谨慎……","tags":["webpack","dev","server","invalid","host"],"cover":{"publicURL":"/static/webpack-dev-server-977bc2ebe23a9b6b10fdac4b470847b8.jpg"},"series":"","draft":false,"original":true},"fields":{"id":"webpack-dev-server-invalid-host-header","slug":"/blog/2017/05/04/webpack-dev-server-invalid-host-header","type":"blog","date":"2017-05-04"}}},{"node":{"id":"5c1bab2a-a42b-5d3a-ad4d-04994d6278b8","frontmatter":{"title":"每天一点ES6(11)：Symbol","description":"原始类型家族的新成员","tags":["ecmascript","2015","es6","javascript","symbol"],"cover":{"publicURL":"/static/es6daily-0950334fb8899f1006423341cbfeecb9.jpg"},"series":"es6daily","draft":false,"original":true},"fields":{"id":"es6-daily-11-symbol","slug":"/blog/2017/07/02/es6-daily-11-symbol","type":"blog","date":"2017-07-02"}}},{"node":{"id":"2420224b-ff97-5758-bfc7-8fd774bfbd96","frontmatter":{"title":"每天一点ES6(12)：Set 和 Map","description":"多余的，一概不要","tags":["ecmascript","2015","es6","javascript","map","set"],"cover":{"publicURL":"/static/es6daily-0950334fb8899f1006423341cbfeecb9.jpg"},"series":"es6daily","draft":false,"original":true},"fields":{"id":"es6-daily-12-set-and-map","slug":"/blog/2017/07/03/es6-daily-12-set-and-map","type":"blog","date":"2017-07-03"}}},{"node":{"id":"091655de-9bba-5969-adf6-648155248dcb","frontmatter":{"title":"Electron 安装出坑指南","description":"世界本无坑，用的人多了，也就有了坑","tags":["electron"],"cover":{"publicURL":"/static/electron-a9838665d68ab68d327e48d8720bac3f.jpg"},"series":"","draft":false,"original":true},"fields":{"id":"electron-install-guide","slug":"/blog/2017/07/06/electron-install-guide","type":"blog","date":"2017-07-06"}}},{"node":{"id":"a6d4a8b6-f020-52a2-9ab3-263c7526ec29","frontmatter":{"title":"Node.js 9.0.0 发布","description":"一转眼，又半年过去了","tags":["nodejs","release"],"cover":{"publicURL":"/static/nodejs-9-release-86f3115cebbb8dd82646ff1d231fa317.jpg"},"series":"","draft":false,"original":true},"fields":{"id":"nodejs-9-release","slug":"/blog/2017/11/01/nodejs-9-release","type":"blog","date":"2017-11-01"}}},{"node":{"id":"a7518a19-a4da-554a-998b-03878e21bd40","frontmatter":{"title":"每天一点ES6(13)：Proxy 和 Reflect","description":"对不起，有代理真就是可以为所欲为","tags":["ecmascript","2015","es6","javascript","proxy","reflect"],"cover":{"publicURL":"/static/es6daily-0950334fb8899f1006423341cbfeecb9.jpg"},"series":"es6daily","draft":false,"original":true},"fields":{"id":"es6-daily-13-proxy-and-reflect","slug":"/blog/2017/12/20/es6-daily-13-proxy-and-reflect","type":"blog","date":"2017-12-20"}}},{"node":{"id":"f4aaf2e2-6eb9-57e2-9b9d-cf58e38dfa71","frontmatter":{"title":"每天一点ES6(14)：Iterator","description":"遍历也能搞出花来，怎么遍历你说了算","tags":["ecmascript","2015","es6","javascript","iterator","generator"],"cover":{"publicURL":"/static/es6daily-0950334fb8899f1006423341cbfeecb9.jpg"},"series":"es6daily","draft":false,"original":true},"fields":{"id":"es6-daily-14-iterator","slug":"/blog/2018/02/28/es6-daily-14-iterator","type":"blog","date":"2018-02-28"}}},{"node":{"id":"2032ccd8-f390-5d45-9dab-b79ab54a905d","frontmatter":{"title":"每天一点ES6(17)：Async / Await","description":"异步？先等等！","tags":["ecmascript","2015","es6","javascript","async","await","generator"],"cover":{"publicURL":"/static/es6daily-0950334fb8899f1006423341cbfeecb9.jpg"},"series":"es6daily","draft":false,"original":true},"fields":{"id":"es6-daily-17-async-await","slug":"/blog/2018/10/06/es6-daily-17-async-await","type":"blog","date":"2018-10-06"}}},{"node":{"id":"06008135-1b93-5a7b-a498-94098ee5ebb2","frontmatter":{"title":"一个非著名前端开发者的 2018","description":"资本寒冬大概是属燕子的吧，一到年末出现","tags":["summary","2018","2019"],"cover":{"publicURL":"/static/summary-2018-0e9c38c3d5d6b94d53a8dee2a7bdfbae.jpg"},"series":"summary","draft":false,"original":true},"fields":{"id":"summary-2018","slug":"/blog/2018/12/31/summary-2018","type":"blog","date":"2018-12-31"}}},{"node":{"id":"3201b0bb-9550-5617-a5a2-4df3a309b2f0","frontmatter":{"title":"【译】我们为什么要写 super(props)?","description":"好像知道，又好像不知道","tags":["react"],"cover":{"publicURL":"/static/overreacted-9fbf74366dc5b9e4aab57572a9f0470d.jpg"},"series":"overreacted","draft":false,"original":false},"fields":{"id":"why-do-we-write-super-props","slug":"/blog/2019/02/22/why-do-we-write-super-props","type":"blog","date":"2019-02-22"}}},{"node":{"id":"bafd8336-ff70-50b1-9a4a-c2c105c4cd96","frontmatter":{"title":"Homebrew 也有后悔药：回退一次小版本更新","description":"有了后悔药，可劲随便造","tags":["homebrew"],"cover":{"publicURL":"/static/homebrew-2cd1cc709ca5d68b1a1fb9eb6283b820.jpg"},"series":"","draft":false,"original":true},"fields":{"id":"how-to-downgrade-from-homebrew","slug":"/blog/2019/10/11/how-to-downgrade-from-homebrew","type":"blog","date":"2019-10-11"}}},{"node":{"id":"75045fce-2b37-559a-b519-62fef7e992da","frontmatter":{"title":"为什么我们总是在不断地造轮子","description":"圆的圆的圆的东西","tags":["thinking"],"cover":{"publicURL":"/static/wheel-120fefa8e824de66889cf2e45b746ebe.jpg"},"series":"","draft":true,"original":true},"fields":{"id":"why-do-we-keep-building-wheels","slug":"/blog/2019/11/15/why-do-we-keep-building-wheels","type":"blog","date":"2019-11-15"}}},{"node":{"id":"c5f39bda-8264-5392-a4d2-2f2f2861c18a","frontmatter":{"title":"「童话说」又改版啦","description":"酒还是那酒，但瓶子已经不是那瓶子了","tags":["blog","4.0","update"],"cover":{"publicURL":"/static/blank-d221320d45d5d7ac530fe7af1ab4cd79.jpg"},"series":"","draft":true,"original":true},"fields":{"id":"introducing-ths-v4","slug":"/blog/2019/12/02/introducing-ths-v4","type":"blog","date":"2019-12-02"}}},{"node":{"id":"1a4948a9-1702-5bb8-9e1b-a9b2aafb0a5a","frontmatter":{"title":"我的数组返回了啥","description":"功夫再高，一针下去也得倒","tags":["javascript","array"],"cover":{"publicURL":"/static/array-805a58ee0da37d1812988339eb18df47.jpg"},"series":"","draft":true,"original":true},"fields":{"id":"what-does-my-array-return","slug":"/blog/2019/12/10/what-does-my-array-return","type":"blog","date":"2019-12-10"}}},{"node":{"id":"cedd0941-7ae6-58c4-b22e-099949c049aa","frontmatter":{"title":"提效 50%，榨干 webpack","description":"我们的目标是：榨干 webpack","tags":["webpack"],"cover":{"publicURL":"/static/blank-d221320d45d5d7ac530fe7af1ab4cd79.jpg"},"series":"","draft":true,"original":true},"fields":{"id":"speed-up-your-build","slug":"/blog/2020/01/20/speed-up-your-build","type":"blog","date":"2020-01-20"}}},{"node":{"id":"4a0c441a-a4da-5f0a-ad86-0c53a7fe8d0a","frontmatter":{"title":"Flutter 扫雷记","description":"目标，移动端，走起","tags":["flutter"],"cover":{"publicURL":"/static/flutter-b6ce1e63c11d6fddd7a988bfb312deb5.jpg"},"series":"","draft":true,"original":true},"fields":{"id":"learning-flutter","slug":"/blog/2019/12/03/learning-flutter","type":"blog","date":"2019-12-03"}}},{"node":{"id":"acf607a8-7894-5f69-be93-a1d6fc8bc92a","frontmatter":{"title":"聊聊前端面试","description":"人嘛，总是在不断的试错中成长起来的","tags":["interview"],"cover":{"publicURL":"/static/interview-c6ee2544d5e90e8349ec2b751c37e298.jpg"},"series":"","draft":true,"original":true},"fields":{"id":"thoughts-about-fe-interview","slug":"/blog/2020/01/20/thoughts-about-fe-interview","type":"blog","date":"2020-01-20"}}},{"node":{"id":"47ae9e45-56fa-5fc9-bcd2-0256ac0c9cb6","frontmatter":{"title":"TypeScript：又一个终将逝去的青春","description":"你，轰轰烈烈地来；你，平平淡淡地走。","tags":["typescript"],"cover":{"publicURL":"/static/typescript-another-fading-youth-b7b7642447ca6a5b28abf9f90bf06ef8.jpg"},"series":"","draft":false,"original":true},"fields":{"id":"typescript-another-fading-youth","slug":"/blog/2019/10/10/typescript-another-fading-youth","type":"blog","date":"2019-10-10"}}},{"node":{"id":"118361c5-5726-55ed-8350-5ce368d488b1","frontmatter":{"title":"每天一点ES6(3)：解构赋值","description":"让你一次赋个够","tags":["ecmascript","2015","es6","javascript","destructuring"],"cover":{"publicURL":"/static/es6daily-0950334fb8899f1006423341cbfeecb9.jpg"},"series":"es6daily","draft":false,"original":true},"fields":{"id":"es6-daily-03-destructuring","slug":"/blog/2016/02/02/es6-daily-03-destructuring","type":"blog","date":"2016-02-02"}}},{"node":{"id":"2594b15f-ccec-543c-974e-ec904ba23a3b","frontmatter":{"title":"每天一点ES6(4)：Babel","description":"《圣经》的光辉，永恒！","tags":["ecmascript","2015","es6","javascript","babel","npm"],"cover":{"publicURL":"/static/es6daily-0950334fb8899f1006423341cbfeecb9.jpg"},"series":"es6daily","draft":false,"original":true},"fields":{"id":"es6-daily-04-babel","slug":"/blog/2016/02/19/es6-daily-04-babel","type":"blog","date":"2016-02-19"}}},{"node":{"id":"89d7b739-7a7d-551a-8db0-eda594cc06c1","frontmatter":{"title":"每天一点ES6(5)：字符串的扩展","description":"不变的字符串现在更加多变了","tags":["ecmascript","2015","es6","javascript","string"],"cover":{"publicURL":"/static/es6daily-0950334fb8899f1006423341cbfeecb9.jpg"},"series":"es6daily","draft":false,"original":true},"fields":{"id":"es6-daily-05-string","slug":"/blog/2016/04/05/es6-daily-05-string","type":"blog","date":"2016-04-05"}}},{"node":{"id":"fd299029-9c49-5b21-9569-3399040fdc66","frontmatter":{"title":"每天一点ES6(9)：函数的扩展","description":"博采众长的实用语法糖","tags":["ecmascript","2015","es6","javascript","function"],"cover":{"publicURL":"/static/es6daily-0950334fb8899f1006423341cbfeecb9.jpg"},"series":"es6daily","draft":false,"original":true},"fields":{"id":"es6-daily-09-function","slug":"/blog/2016/12/20/es6-daily-09-function","type":"blog","date":"2016-12-20"}}},{"node":{"id":"27d50f62-9cdb-50bc-9b9b-2a7c98c5c92e","frontmatter":{"title":"Leetcode 第一刷：Two Sum","description":"都闪开，我要开始装逼了","tags":["leetcode","two","sum"],"cover":{"publicURL":"/static/leetcode-1aa86b8eea674fca29117e535cfba751.jpg"},"series":"","draft":false,"original":true},"fields":{"id":"leetcode-01-two-sum","slug":"/blog/2017/04/11/leetcode-01-two-sum","type":"blog","date":"2017-04-11"}}},{"node":{"id":"25995aa2-2b02-5db0-b65b-1bc827bf60a0","frontmatter":{"title":"每天一点ES6(10)：对象的扩展","description":"迟来的更新……","tags":["ecmascript","2015","es6","javascript","object"],"cover":{"publicURL":"/static/es6daily-0950334fb8899f1006423341cbfeecb9.jpg"},"series":"es6daily","draft":false,"original":true},"fields":{"id":"es6-daily-10-object","slug":"/blog/2017/04/05/es6-daily-10-object","type":"blog","date":"2017-04-05"}}},{"node":{"id":"adcf3ad8-3ea4-54c3-a0f4-209e1e518dbd","frontmatter":{"title":"ECMAScript 2017 正式到来","description":"ES 的世界开始日趋平静","tags":["ecmascript","2017","es8","javascript"],"cover":{"publicURL":"/static/es2017-77b7677386d27526bcb0b2687218f3f1.jpg"},"series":"","draft":false,"original":true},"fields":{"id":"ecmascript-2017-is-here","slug":"/blog/2017/07/12/ecmascript-2017-is-here","type":"blog","date":"2017-07-12"}}},{"node":{"id":"2c071f6a-f91e-5144-ae6a-44e6e5265429","frontmatter":{"title":"童话说 V2.0 改版小结","description":"时隔多年，终于换新面貌了","tags":["blog","2.0","update"],"cover":{"publicURL":"/static/introducing-ths-v2-630ee6fc7ad1be564eebffb0e0dd447d.jpg"},"series":"","draft":false,"original":true},"fields":{"id":"introducing-ths-v2","slug":"/blog/2017/08/12/introducing-ths-v2","type":"blog","date":"2017-08-12"}}},{"node":{"id":"bac95ff2-76be-59c9-9d8c-173de3cdacc4","frontmatter":{"title":"TypeScriptS + Vue 踩坑纪实","description":"坑这种东西，多踩踩就平了","tags":["typescript","vue"],"cover":{"publicURL":"/static/guide-for-vue-with-typescript-fe6f5086d26293f21adf217a84141fd6.jpg"},"series":"","draft":false,"original":true},"fields":{"id":"guide-for-vue-with-typescript","slug":"/blog/2017/10/26/guide-for-vue-with-typescript","type":"blog","date":"2017-10-26"}}},{"node":{"id":"d87372c5-7ed2-53da-bdb4-5f5e446e6aa1","frontmatter":{"title":"每天一点ES6(15)：Promise","description":"对你的承诺，永远不变","tags":["ecmascript","2015","es6","javascript","promise"],"cover":{"publicURL":"/static/es6daily-0950334fb8899f1006423341cbfeecb9.jpg"},"series":"es6daily","draft":false,"original":true},"fields":{"id":"es6-daily-15-promise","slug":"/blog/2018/03/04/es6-daily-15-promise","type":"blog","date":"2018-03-04"}}},{"node":{"id":"7bd9aa4d-d774-5b54-ad31-bdda42c47ab9","frontmatter":{"title":"每天一点ES6(16)：Generator","description":"一起来摩擦摩擦发电吧","tags":["ecmascript","2015","es6","javascript","promise"],"cover":{"publicURL":"/static/es6daily-0950334fb8899f1006423341cbfeecb9.jpg"},"series":"es6daily","draft":false,"original":true},"fields":{"id":"es6-daily-16-generator","slug":"/blog/2018/06/14/es6-daily-16-generator","type":"blog","date":"2018-06-14"}}},{"node":{"id":"c776fd0e-b7ac-5ead-a74f-b96ceb48d75b","frontmatter":{"title":"除了 SSR，就没有别的办法了吗","description":"当 MVVM 遇上 SEO，该如何是好","tags":["static","site","gatsby","pug"],"cover":{"publicURL":"/static/explore-static-site-generation-c2ac5cf49eafd77a1b2ce1fab7f53515.jpg"},"series":"","draft":false,"original":true},"fields":{"id":"explore-static-site-generation","slug":"/blog/2019/02/07/explore-static-site-generation","type":"blog","date":"2019-02-07"}}},{"node":{"id":"8215bee6-5bed-50dd-8acd-94c865145e35","frontmatter":{"title":"每天一点ES6(18)：Class","description":"这回总没人质疑 JS 不是面向对象了吧？","tags":["ecmascript","2015","es6","javascript","class"],"cover":{"publicURL":"/static/es6daily-0950334fb8899f1006423341cbfeecb9.jpg"},"series":"es6daily","draft":false,"original":true},"fields":{"id":"es6-daily-18-class","slug":"/blog/2018/12/17/es6-daily-18-class","type":"blog","date":"2018-12-17"}}},{"node":{"id":"8477f3e8-e0f0-5969-a545-fb5c5843246e","frontmatter":{"title":"你可能已经知道的 ES 2018 和 2019","description":"好饭不怕晚","tags":["ecmascript","2018","2019"],"cover":{"publicURL":"/static/es2019-5646b4878e533cd7c725ce4c17984071.jpg"},"series":"","draft":false,"original":true},"fields":{"id":"es2018-and-es2019","slug":"/blog/2019/02/11/es2018-and-es2019","type":"blog","date":"2019-02-11"}}},{"node":{"id":"74c9ea53-35c1-5f8d-9a70-6325c8908983","frontmatter":{"title":"如何 Think in Hooks","description":"差不多是时候该换换脑子了","tags":["react","hooks"],"cover":{"publicURL":"/static/think-in-hooks-26d13ef2591ee05a3c4bba7fc34daa88.jpg"},"series":"","draft":false,"original":true},"fields":{"id":"how-to-think-in-hooks","slug":"/blog/2019/02/15/how-to-think-in-hooks","type":"blog","date":"2019-02-15"}}},{"node":{"id":"7117f3a5-1987-5f74-aaee-d6c004857b4b","frontmatter":{"title":"每天一点ES6(19)：Module","description":"可能是 ES6 中对未来影响最大的一项改变","tags":["ecmascript","2015","es6","javascript","module","import","export"],"cover":{"publicURL":"/static/es6daily-0950334fb8899f1006423341cbfeecb9.jpg"},"series":"es6daily","draft":false,"original":true},"fields":{"id":"es6-daily-19-module","slug":"/blog/2018/12/19/es6-daily-19-module","type":"blog","date":"2018-12-19"}}},{"node":{"id":"a1adc2ee-2a64-5653-bc31-a00ea3b70407","frontmatter":{"title":"探索 React 组件之间的生命周期","description":"有时候，生活就是一团麻","tags":["react","lifecycle"],"cover":{"publicURL":"/static/react-lifecycle-0edf69056144aaf512a28d0670b53b57.jpg"},"series":"","draft":false,"original":true},"fields":{"id":"react-lifecycle","slug":"/blog/2019/05/02/react-lifecycle","type":"blog","date":"2019-05-02"}}},{"node":{"id":"3141b4c6-4a37-5347-a5cc-92327f36cee6","frontmatter":{"title":"TypeScript 次日指南","description":"坑这种东西，是不会写在文档上的","tags":["typescript"],"cover":{"publicURL":"/static/typescript-8239307adc5ccdfc32320e1bcadb6300.jpg"},"series":"","draft":false,"original":true},"fields":{"id":"typescript-the-second-day","slug":"/blog/2019/07/28/typescript-the-second-day","type":"blog","date":"2019-07-28"}}},{"node":{"id":"4cdbfcff-81fd-5c18-ac98-bba8d122f8e3","frontmatter":{"title":"一个非著名前端开发者的 2019","description":"感谢曾经努力的自己","tags":["summary","2019","2020"],"cover":{"publicURL":"/static/summary-2019-1011f23d2ed2635035a07878c03ed1da.jpg"},"series":"summary","draft":false,"original":true},"fields":{"id":"summary-2019","slug":"/blog/2019/12/31/summary-2019","type":"blog","date":"2019-12-31"}}},{"node":{"id":"b2993941-a485-5c65-9de7-17cba65b2418","frontmatter":{"title":"一个非著名前端开发者的 2016","description":"回顾 2016，是充实的一年，不负青春。2017 加油继续！","tags":["summary","2016","2017"],"cover":{"publicURL":"/static/summary-2016-d4bc85d6ff1aa8985e03c3875f90ea51.jpg"},"series":"summary","draft":false,"original":true},"fields":{"id":"summary-2016","slug":"/blog/2016/12/31/summary-2016","type":"blog","date":"2016-12-31"}}},{"node":{"id":"c78c2577-3dc3-580d-9aa3-059949484423","frontmatter":{"title":"一个非著名前端开发者的 2017","description":"哎 ~ 又一年过去了","tags":["summary","2017","2018"],"cover":{"publicURL":"/static/summary-2017-0d96380257d25f6b398d9bc8e47af5a1.jpg"},"series":"summary","draft":false,"original":true},"fields":{"id":"summary-2017","slug":"/blog/2017/12/29/summary-2017","type":"blog","date":"2017-12-29"}}},{"node":{"id":"9483d67a-7761-50d0-aa75-ecdf8077db2d","frontmatter":{"title":"TradingView + WebSocket 脱坑指南","description":"让我来告诉你，K 线到底该怎么画","tags":["tradingview","chart","library","guide","websocket","webworker","ohlc","kchart"],"cover":{"publicURL":"/static/tradingview-1ceaf53d99815784a18273970e741bfd.jpg"},"series":"","draft":false,"original":true},"fields":{"id":"tradingview-charting-library-simple-guide","slug":"/blog/2018/09/22/tradingview-charting-library-simple-guide","type":"blog","date":"2018-09-22"}}},{"node":{"id":"66c964e4-0a45-548e-9f94-6fd84283c9a4","frontmatter":{"title":"【译】React 如何区分 Class 和 Function？","description":"所谓的简单，只是因为有人帮你把复杂的问题给解决掉了","tags":["react"],"cover":{"publicURL":"/static/overreacted-9fbf74366dc5b9e4aab57572a9f0470d.jpg"},"series":"overreacted","draft":false,"original":false},"fields":{"id":"how-does-react-tell-a-class-from-a-function","slug":"/blog/2019/03/06/how-does-react-tell-a-class-from-a-function","type":"blog","date":"2019-03-06"}}},{"node":{"id":"3b0c4aa9-d3ba-5bba-aad0-51cad6f0dd1c","frontmatter":{"title":"重新 Think in Hooks","description":"忘记过去之所学，我们从头来过","tags":["react","hooks"],"cover":{"publicURL":"/static/rethink-in-hooks-f9fcd719dcab55af4a1ad3d3cfbe0585.jpg"},"series":"","draft":false,"original":true},"fields":{"id":"rethink-in-hooks","slug":"/blog/2019/05/27/rethink-in-hooks","type":"blog","date":"2019-05-27"}}}]},"markdownRemark":{"html":"<h2>为什么要重新来过？</h2>\n<p>我之前写过 <a href=\"/blog/2019/02/15/how-to-think-in-hooks\">一篇博客</a>，介绍了 Class 组件的各个生命周期钩子函数在 Hooks 中对应的方案。那时 Hooks 刚刚发布，开发者最关心的莫过于代码的迁移问题，也就是怎么把现有的 Class 组件改造成 Hooks 的方式。</p>\n<p>尽管这种方式非常的直观有效，但很快我们就发现，事情似乎没那么简单。单纯用这个思维来考虑问题，并不能很好地解释 Hooks 的一些行为，比如 <code class=\"gatsby-code-text\">useEffect</code> 中的变量有时候无法获取最新的值、命令式的回调函数也不总是按照我们的预期工作，<code class=\"gatsby-code-text\">useEffect</code> 的依赖数组好像总是缺点什么。</p>\n<p>在亲自踩了 2 个多月的坑，参与了一些 <a href=\"https://github.com/reactjs/zh-hans.reactjs.org/pull/121\" target=\"_blank\" rel=\"noopener noreferrer\">React 官网的翻译工作</a>，拜读了 <a href=\"https://overreacted.io/a-complete-guide-to-useeffect\" target=\"_blank\" rel=\"noopener noreferrer\">几篇</a> <a href=\"https://overreacted.io/react-as-a-ui-runtime\" target=\"_blank\" rel=\"noopener noreferrer\">非常好的</a> <a href=\"https://overreacted.io/making-setinterval-declarative-with-react-hooks\" target=\"_blank\" rel=\"noopener noreferrer\">博客</a> 之后，我对「如何 Think in Hooks」有了新的认识。</p>\n<p>因此这篇博客，我们来「重新 Think in Hooks」。</p>\n<h2>当我们讨论 Hooks 时，我们到底在讨论什么？</h2>\n<p>要理解 Hooks，我们得先回到 Hooks 的本质 —— 一种逻辑复用的方式。</p>\n<p>Hooks 并不是新的组件类型，当我们讨论 Hooks 时，我们讨论的其实是函数组件 —— 就是那种只是根据 props 返回相应的 JSX 的渲染函数。Hooks 的出现让函数组件可以和 Class 组件一样可以拥有 state（是可以，不是必须）。因此确切的说，我们是在讨论使用了 Hooks 的函数组件。</p>\n<p>但是「使用了 Hooks 的函数组件」这个词太长了，而下文我又将经常提到这个词，所以在后面的文字中，我将简单用 Hooks 来表示这个概念。</p>\n<h2>忘掉你所学</h2>\n<p>当我们在使用 Class 组件时，每当 props 或 state 有更新，所有的修改都发生在 React 组件实例上，就像修改一个对象的属性一样。这个逻辑放到 Hooks 里是行不通的，函数组件的渲染只是简单的函数调用，不加 <code class=\"gatsby-code-text\">new</code> 的函数调用是不存在所谓生成实例的。这也是很多问题产生的根源。</p>\n<p>所以要想真正 Think in Hooks，首先你得忘记如何 Think in Class，改为 Think in Functions。</p>\n<h2>为什么我的 state 不更新？</h2>\n<p>Hooks 的本质是一个渲染函数，就像是把 Class 组件的 <code class=\"gatsby-code-text\">render()</code> 函数单独提取出来一样。</p>\n<p><code class=\"gatsby-code-text\">render()</code> 函数在运行时会根据那一次的 props 和 state 去渲染。如果在 <code class=\"gatsby-code-text\">render()</code> 函数运行期间 props 或是 state 再次发生变化，并不会影响这一次的执行，而是会触发新一轮的渲染，<code class=\"gatsby-code-text\">render()</code> 再一次被调用，并且这一次传入的是变化后的 props 和 state。</p>\n<p>到这里我们得出结论：</p>\n<blockquote>\n<p><code class=\"gatsby-code-text\">render()</code> 函数中用到的 props 和 state 在函数执行的一开始就已经被确定了。</p>\n</blockquote>\n<p>好了，理论说得够多了，我们来看代码吧。假设我们有这样一个组件：</p>\n<div class=\"gatsby-highlight\" data-language=\"jsx\"><pre style=\"counter-reset: linenumber NaN\" class=\"gatsby-code-jsx line-numbers\"><code class=\"gatsby-code-jsx\"><span class=\"token keyword\">function</span> <span class=\"token function\">Counter</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> <span class=\"token punctuation\">[</span>count<span class=\"token punctuation\">,</span> setCount<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token function\">useState</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span>\n\n  <span class=\"token keyword\">function</span> <span class=\"token function\">onClick</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token function\">setTimeout</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n      <span class=\"token function\">setCount</span><span class=\"token punctuation\">(</span>count <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2000</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token keyword\">return</span> <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>p</span> <span class=\"token attr-name\">onClick</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span>onClick<span class=\"token punctuation\">}</span></span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">You clicked </span><span class=\"token punctuation\">{</span>count<span class=\"token punctuation\">}</span><span class=\"token plain-text\"> times</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>p</span><span class=\"token punctuation\">></span></span>\n<span class=\"token punctuation\">}</span></code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n<p>等价的 Class 组件实现可以是下面这样：</p>\n<div class=\"gatsby-highlight\" data-language=\"jsx\"><pre style=\"counter-reset: linenumber NaN\" class=\"gatsby-code-jsx line-numbers\"><code class=\"gatsby-code-jsx\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">Counter</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">Component</span> <span class=\"token punctuation\">{</span>\n  state <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n    count<span class=\"token operator\">:</span> <span class=\"token number\">0</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token function-variable function\">onClick</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n    <span class=\"token function\">setTimeout</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n      <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">setState</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n        count<span class=\"token operator\">:</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>state<span class=\"token punctuation\">.</span>count <span class=\"token operator\">+</span> <span class=\"token number\">1</span>\n      <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2000</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token function\">render</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>p</span> <span class=\"token attr-name\">onClick</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>onClick<span class=\"token punctuation\">}</span></span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">You clicked </span><span class=\"token punctuation\">{</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>state<span class=\"token punctuation\">.</span>count<span class=\"token punctuation\">}</span><span class=\"token plain-text\"> times</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>p</span><span class=\"token punctuation\">></span></span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n<p>对比一下两段函数，如果把 Class 的语法中的所有东西全部塞到 <code class=\"gatsby-code-text\">render()</code> 函数里，然后把 <code class=\"gatsby-code-text\">render()</code> 函数单独拎出来，给变量和函数换个名字 —— 恭喜你，你得到了一个等效的 Hooks ！</p>\n<p>开玩笑的，但这真的很像对不对。</p>\n<p>现在考虑一个问题：如果我在 2 秒内点击组件 3 次，那么到第 5 秒的时候，组件会显示什么？</p>\n<p>在类组件的实现中，结果是 3，因为触发了 3 次更新，每次都在原有的基础上加 1。</p>\n<p>但在 Hooks 的实现中，结果意外地变成了 1。很奇怪对不对，明明是一样的逻辑，为什么结果不一样？（我向你保证这跟闭包没有关系）</p>\n<p>如果你在 <code class=\"gatsby-code-text\">onClick</code> 函数中 <code class=\"gatsby-code-text\">console.log</code> 一下，你会发现点击事件确实被触发了 3 次，但是 3 次 <code class=\"gatsby-code-text\">count</code> 的值是一样的。</p>\n<p>这是为什么？</p>\n<p>还记得我们前面的结论吗？「<code class=\"gatsby-code-text\">render()</code> 函数中用到的 props 和 state 在函数执行的一开始就已经被确定了」。为了简化问题，我们可以把 Hooks 的代码中所有用到的 props 和 state 直接替换成那一次的取值：</p>\n<div class=\"gatsby-highlight\" data-language=\"jsx\"><pre style=\"counter-reset: linenumber NaN\" class=\"gatsby-code-jsx line-numbers\"><code class=\"gatsby-code-jsx\"><span class=\"token comment\">// 第一次渲染</span>\n<span class=\"token keyword\">function</span> <span class=\"token function\">Counter</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token comment\">// 这里是对 useState 的等价替换</span>\n<span class=\"gatsby-highlight-code-line\">  <span class=\"token keyword\">const</span> count <span class=\"token operator\">=</span> <span class=\"token number\">0</span></span>  <span class=\"token keyword\">const</span> <span class=\"token function-variable function\">setCount</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">val</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span> <span class=\"token operator\">...</span> <span class=\"token punctuation\">}</span>\n\n  <span class=\"token keyword\">function</span> <span class=\"token function\">onClick</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token function\">setTimeout</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n<span class=\"gatsby-highlight-code-line\">      <span class=\"token function\">setCount</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span> <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span></span>    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2000</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">}</span>\n\n<span class=\"gatsby-highlight-code-line\">  <span class=\"token keyword\">return</span> <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>p</span> <span class=\"token attr-name\">onClick</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span>onClick<span class=\"token punctuation\">}</span></span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">You clicked 0 times</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>p</span><span class=\"token punctuation\">></span></span></span><span class=\"token punctuation\">}</span></code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n<p>注意到第 9 行的变化了么？这就是为什么。在这 2 秒钟之内，无论点击多少次，我们都是在给组件下达同样的指令：2 秒钟后把 <code class=\"gatsby-code-text\">count</code> 设置为 1。2 秒之后组件或许会被更新多次，但结果都是一样的。<code class=\"gatsby-code-text\">onClick</code> 函数中 <code class=\"gatsby-code-text\">count</code> 的值在一开始就已经被确定了。</p>\n<p>那如果我想实现 Class 版本的那种效果要怎么办？可以通过给 <code class=\"gatsby-code-text\">setCount()</code> 传入一个回调函数来解决（如果可以的话，我推荐在更新 state 时尽量采用这种写法，原因后面会讲到）：</p>\n<div class=\"gatsby-highlight\" data-language=\"jsx\"><pre style=\"counter-reset: linenumber NaN\" class=\"gatsby-code-jsx line-numbers\"><code class=\"gatsby-code-jsx\"><span class=\"token keyword\">function</span> <span class=\"token function\">Counter</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> <span class=\"token punctuation\">[</span>count<span class=\"token punctuation\">,</span> setCount<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token function\">useState</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span>\n\n  <span class=\"token keyword\">function</span> <span class=\"token function\">onClick</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token function\">setTimeout</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n<span class=\"gatsby-highlight-code-line\">      <span class=\"token function\">setCount</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">c</span> <span class=\"token operator\">=></span> c <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span></span>    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2000</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token keyword\">return</span> <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>p</span> <span class=\"token attr-name\">onClick</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span>onClick<span class=\"token punctuation\">}</span></span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">You clicked </span><span class=\"token punctuation\">{</span>count<span class=\"token punctuation\">}</span><span class=\"token plain-text\"> times</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>p</span><span class=\"token punctuation\">></span></span>\n<span class=\"token punctuation\">}</span></code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n<p>这里表示不管 count 现在的值是多少，往上加一就好了。Class 组件中的 <code class=\"gatsby-code-text\">setState()</code> 函数也有同样的写法，虽然它俩的目的并不相同。</p>\n<h2>useEffect 的依赖数组到底应该怎么用</h2>\n<p>这可能是刚接触 Hooks 时最让人头疼的一个问题，相信每个人都对「依赖数组里的内容会决定 Effect 是否会重新执行」这一点印象深刻，给人感觉这就是 <code class=\"gatsby-code-text\">componentDidUpdate()</code> 的等效实现，按照我们对 Class 组件的认知，只要依赖数组里的内容不变，Effect 就不会重新执行；如果某个变量不参与比对的过程，就不需要出现在依赖数组中。然而依赖数组并没有我们想象的这么简单。</p>\n<p>依赖数组真正的含义，是「这个 Effect 引用了哪些外部变量」。不管它是否参与比对的过程，只要 Effect 中引用了（也就是 Effect 依赖了这个变量），就必须出现在依赖数组中。举个例子：</p>\n<p>在下面的代码中，我们想要实现：<code class=\"gatsby-code-text\">foo</code> 或 <code class=\"gatsby-code-text\">bar</code> 在被点击时自身加一，其中任何一个的变化都会触发 <code class=\"gatsby-code-text\">total</code> 也加一，同时有一个 Effect 在每秒打印 <code class=\"gatsby-code-text\">total</code> 的值。由于我们只需要在组件挂载时启用一下计时器就好，因此我们把依赖数组留空。</p>\n<div class=\"gatsby-highlight\" data-language=\"jsx\"><pre style=\"counter-reset: linenumber NaN\" class=\"gatsby-code-jsx line-numbers\"><code class=\"gatsby-code-jsx\"><span class=\"token keyword\">const</span> <span class=\"token function-variable function\">App</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">props</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> <span class=\"token punctuation\">[</span>total<span class=\"token punctuation\">,</span> setTotal<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token function\">useState</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span>\n  <span class=\"token keyword\">const</span> <span class=\"token punctuation\">[</span>foo<span class=\"token punctuation\">,</span> setFoo<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token function\">useState</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span>\n  <span class=\"token keyword\">const</span> <span class=\"token punctuation\">[</span>bar<span class=\"token punctuation\">,</span> setBar<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token function\">useState</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span>\n\n<span class=\"gatsby-highlight-code-line\">  <span class=\"token function\">useEffect</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span></span><span class=\"gatsby-highlight-code-line\">    <span class=\"token function\">setInterval</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span></span><span class=\"gatsby-highlight-code-line\">      console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>total<span class=\"token punctuation\">)</span></span><span class=\"gatsby-highlight-code-line\">    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1000</span><span class=\"token punctuation\">)</span></span><span class=\"gatsby-highlight-code-line\">  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span></span>\n  <span class=\"token keyword\">function</span> <span class=\"token function\">updateTotal</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token function\">setTotal</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">t</span> <span class=\"token operator\">=></span> t <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token keyword\">function</span> <span class=\"token function\">addFoo</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token function\">setFoo</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">f</span> <span class=\"token operator\">=></span> f <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span>\n    <span class=\"token function\">updateTotal</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token keyword\">function</span> <span class=\"token function\">addBar</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token function\">setBar</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">b</span> <span class=\"token operator\">=></span> b <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span>\n    <span class=\"token function\">updateTotal</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token keyword\">return</span> <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span></span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\"></span>\n<span class=\"token plain-text\">    </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>button</span> <span class=\"token attr-name\">onClick</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span>addFoo<span class=\"token punctuation\">}</span></span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">{</span>foo<span class=\"token punctuation\">}</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>button</span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\"></span>\n<span class=\"token plain-text\">    +</span>\n<span class=\"token plain-text\">    </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>button</span> <span class=\"token attr-name\">onClick</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span>addBar<span class=\"token punctuation\">}</span></span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">{</span>bar<span class=\"token punctuation\">}</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>button</span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\"></span>\n<span class=\"token plain-text\">    =</span>\n<span class=\"token plain-text\">    </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>span</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">{</span>total<span class=\"token punctuation\">}</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>span</span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\"></span>\n<span class=\"token plain-text\">  </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span></span><span class=\"token punctuation\">></span></span>\n<span class=\"token punctuation\">}</span></code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n<p>这个 Effect 引用了 <code class=\"gatsby-code-text\">total</code> 这个变量，但是 <code class=\"gatsby-code-text\">total</code> 并没有参与「是否要执行这个 Effect」的决策。按照我们之前对于 Class 组件的理解，<code class=\"gatsby-code-text\">total</code> 不需要出现在依赖数组中。那么我们来执行一下这段代码。</p>\n<p>点击按钮，<code class=\"gatsby-code-text\">foo</code> 和 <code class=\"gatsby-code-text\">bar</code> 如我们预期的那样自增了，页面上 <code class=\"gatsby-code-text\">total</code> 也显示了最新的值。然而控制台打印出来的 <code class=\"gatsby-code-text\">total</code> 却始终为 0。</p>\n<p>为什么会这样？</p>\n<p>如我们上一节所说的，「<code class=\"gatsby-code-text\">render()</code> 函数中用到的 props 和 state 在函数执行的一开始就已经被确定了」，Effect 也是 render 函数的一部分，因此同样适用这条规则，那么我们带入变量值看一下：</p>\n<div class=\"gatsby-highlight\" data-language=\"jsx\"><pre style=\"counter-reset: linenumber NaN\" class=\"gatsby-code-jsx line-numbers\"><code class=\"gatsby-code-jsx\"><span class=\"token comment\">// 初始化时</span>\n<span class=\"token function\">useEffect</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token function\">setInterval</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1000</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span></code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n<div class=\"gatsby-highlight\" data-language=\"jsx\"><pre style=\"counter-reset: linenumber NaN\" class=\"gatsby-code-jsx line-numbers\"><code class=\"gatsby-code-jsx\"><span class=\"token comment\">// 点击 foo</span>\n<span class=\"token function\">useEffect</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token function\">setInterval</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1000</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span></code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n<div class=\"gatsby-highlight\" data-language=\"jsx\"><pre style=\"counter-reset: linenumber NaN\" class=\"gatsby-code-jsx line-numbers\"><code class=\"gatsby-code-jsx\"><span class=\"token comment\">// 再点击 bar</span>\n<span class=\"token function\">useEffect</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token function\">setInterval</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1000</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span></code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n<p>由于 <code class=\"gatsby-code-text\">total</code> 并没有在依赖数组中申明，因此 <code class=\"gatsby-code-text\">total</code> 的更新不会触发 Effect 重新执行，也就不会去获取它的最新值，每次执行都引用了第一次执行时候的值。</p>\n<p>要解决这个问题，我们可以把 <code class=\"gatsby-code-text\">total</code> 加入依赖数组，告诉 Effect 当 <code class=\"gatsby-code-text\">total</code> 更新时重新执行 Effect，这样依赖 Effect 就能在重新执行时获取到 <code class=\"gatsby-code-text\">total</code> 的最新值了。同时注意，由于每次 <code class=\"gatsby-code-text\">total</code> 改变会引起 Effect 的重新执行，因此 <code class=\"gatsby-code-text\">setInterval()</code> 也会重复执行，创建多个计时器，要解决这个问题，只要让 Effect 返回一个清理函数，结束掉上一个计时器即可：</p>\n<div class=\"gatsby-highlight\" data-language=\"jsx\"><pre style=\"counter-reset: linenumber NaN\" class=\"gatsby-code-jsx line-numbers\"><code class=\"gatsby-code-jsx\"><span class=\"token function\">useEffect</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> id <span class=\"token operator\">=</span> <span class=\"token function\">setInterval</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>total<span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1000</span><span class=\"token punctuation\">)</span>\n\n  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n    <span class=\"token function\">clearInterval</span><span class=\"token punctuation\">(</span>id<span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span>total<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span></code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n<p>这么一来，程序就正常了。</p>\n<p>现在新版的 React 已经自带了对 Hooks 规则的一些检查，当它发现一些不合规的写法（比如 Effect 中引用了外部变量，但没有在依赖数组中进行申明），就会给出提示。只要保持使用最新版的 React，理论上就可以避免这一类的错误。如果你出于某些原因不方便升级，也可以手动安装 <a href=\"https://www.npmjs.com/package/eslint-plugin-react-hooks\" target=\"_blank\" rel=\"noopener noreferrer\">eslint-plugin-react-hooks</a> 来进行检查。</p>\n<p>总的来说，对于 <code class=\"gatsby-code-text\">useEffect()</code> 的依赖数组，一定要牢记：</p>\n<blockquote>\n<p>只要是 <code class=\"gatsby-code-text\">useEffect()</code> 中用到的，都要在依赖数组中申明。</p>\n</blockquote>\n<p>那如果 <code class=\"gatsby-code-text\">useEffect()</code> 中引用了一些不参与「是否执行 Effect」的决策的变量，我们要怎么处理这些尴尬的变量呢？别担心，方法有很多：</p>\n<ol>\n<li>用回调函数的方式来设置 state，以解除对某些 state 变量的引用。</li>\n<li>如果组件内部的函数仅用于某个 Effect，可以把这个函数的定义移到 <code class=\"gatsby-code-text\">useEffect()</code> 内部，以解除对某些函数的引用。</li>\n<li>如果一些变量的存在是为了决定另一些变量（比如 url 查询参数），可以把相关逻辑抽取为独立的函数，用 <code class=\"gatsby-code-text\">useCallback()</code> 进行优化，然后我们就可以把这部分变量提取到 Effect 之外去，以精简依赖数组。</li>\n<li>实在没法优化了，还有个最简单粗暴的方法。在 <code class=\"gatsby-code-text\">useEffect()</code> 中对所有参与决策的变量进行比对，判断是否发生变化，以决定是继续执行还是就此返回。</li>\n</ol>\n<h2>不要担心重复定义函数</h2>\n<p>从工程学的角度，我们习惯通过缓存来避免频繁的销毁和重建同样的内容。在 Class 组件中，通过函数绑定，我们可以很轻易的做到这一点。但在 Hooks 中，我们或许需要改变一下习惯，试着接受这一类的开销。</p>\n<p>由于函数组件的特性，它不像类组件的实例那样，存在生命周期的概念。函数组件的核心就只有一个渲染函数，即便 Hooks 引入了 state，函数组件的更新也还是重新执行整个函数，而不是在某个实例上小修小改。这样的特定就决定了函数组件内定义的函数，会在组件每次重新渲染时被销毁然后重建，即便函数本身并没有改变，只是传入的参数发生了改变。Hooks 的执行就只是单纯的「渲染 -> 执行 Effect」，当组件状态发生改变，它并不是去修改某个现有的东西，而是给组件的函数传入新的参数，然后重置走一遍「渲染 -> 执行 Effect」的流程。</p>\n<p>事实上，Hooks 的每一次渲染，都有它自己的 props、state、函数、Effect、……所有的一切都是这一次渲染独有的。</p>\n<p>好在，只要不是非常高频的更新，这种程度的开销并不会对我们的应用造成明显的负面影响。因此我们可以允许这种反模式的存在。</p>\n<h2>如何在 Hooks 中发起 HTTP 请求</h2>\n<p>在 Class 组件中，我们常见的做法是定义一个获取数据的函数，在其中读取 props 和 state，拼接出要传递的参数，好一点的做法或许还要判断一下 loading 状态以避免重复操作和异步冲突，然后发起其请求，等 Promise 被 resolve 后，处理返回的结果，更新一些 state。</p>\n<p>但当我们尝试在 Hooks 中重现这一套路时，我们遇到了问题。要想读取最新的 props 和 state，我们就必须把发起请求的函数写到一个 Effect 中，并且所有引用到的变量都必须放进依赖数组中。这就导致我们必须非常小心地处理每一个依赖的变化，一不小心就会陷入死循环。</p>\n<p>具体的操作，展开来篇幅太长了，这里就不展开了，推荐一篇非常全面的<a href=\"https://www.robinwieruch.de/react-hooks-fetch-data/\" target=\"_blank\" rel=\"noopener noreferrer\">文章</a>，需要的可以看一下。这篇文章国内有不少人做了翻译，<a href=\"https://juejin.im/post/5c98fb35518825157172acc6\" target=\"_blank\" rel=\"noopener noreferrer\">这篇</a>是一个不错的译本，英文有压力的同学可以看看。</p>\n<h2>如何使用 <code class=\"gatsby-code-text\">setInterval()</code></h2>\n<p>还有一个非常常见的命令式操作，就是设置定时器。</p>\n<p>比如一个短信验证码的倒计时，在 Class 组件中，我们通常会这么做：</p>\n<div class=\"gatsby-highlight\" data-language=\"jsx\"><pre style=\"counter-reset: linenumber NaN\" class=\"gatsby-code-jsx line-numbers\"><code class=\"gatsby-code-jsx\">state <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n  countdown<span class=\"token operator\">:</span> <span class=\"token number\">0</span>\n<span class=\"token punctuation\">}</span>\n\ntimer <span class=\"token operator\">=</span> <span class=\"token keyword\">null</span>\n\n<span class=\"token function-variable function\">startCountdown</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">duration</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">setState</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span> countdown<span class=\"token operator\">:</span> duration <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>timer <span class=\"token operator\">=</span> <span class=\"token function\">setInterval</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n      <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">setState</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span> countdown<span class=\"token operator\">:</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>state<span class=\"token punctuation\">.</span>countdown <span class=\"token operator\">-</span> <span class=\"token number\">1</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>state<span class=\"token punctuation\">.</span>countdown<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n          <span class=\"token function\">clearInterval</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>timer<span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">}</span>\n      <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1000</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span></code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n<p>现在我们尝试改用 Hooks 来实现。</p>\n<p>设置一个 state 用于存储当前剩余秒数，然后在 <code class=\"gatsby-code-text\">setInterval()</code> 的回调函数中更新这个值（通过回调函数的写法，我们不需要引用这个 state 也能正确更新它）。很好，倒计时开始了，页面上也能获取到更新了，目前为止一切顺利。</p>\n<div class=\"gatsby-highlight\" data-language=\"jsx\"><pre style=\"counter-reset: linenumber NaN\" class=\"gatsby-code-jsx line-numbers\"><code class=\"gatsby-code-jsx\"><span class=\"token keyword\">const</span> <span class=\"token punctuation\">[</span>countdown<span class=\"token punctuation\">,</span> setCountdown<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token function\">useState</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">const</span> timer <span class=\"token operator\">=</span> <span class=\"token function\">useRef</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token keyword\">function</span> <span class=\"token function\">startCountdown</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">duration</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token function\">setCountdown</span><span class=\"token punctuation\">(</span>duration<span class=\"token punctuation\">)</span>\n  timer <span class=\"token operator\">=</span> <span class=\"token function\">setInterval</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n    <span class=\"token function\">setCountdown</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">c</span> <span class=\"token operator\">=></span> c <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1000</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span></code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n<p>3、2、1、0、-1？问题出现了。我们希望数到 0 的时候结束倒计时，为此我们需要判断 countdown 是否为 0 以决定是否要 <code class=\"gatsby-code-text\">clearInterval()</code>，然而现在我们无法直接读取 countdown 的最新值。为了能读到 countdown 的最新值，我们需要把这个逻辑放到一个 Effect 里，并把 countdown 放进依赖数组中。</p>\n<div class=\"gatsby-highlight\" data-language=\"jsx\"><pre style=\"counter-reset: linenumber NaN\" class=\"gatsby-code-jsx line-numbers\"><code class=\"gatsby-code-jsx\"><span class=\"token keyword\">const</span> <span class=\"token punctuation\">[</span>countdown<span class=\"token punctuation\">,</span> setCountdown<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token function\">useState</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token keyword\">function</span> <span class=\"token function\">startCountdown</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">duration</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token function\">setCountdown</span><span class=\"token punctuation\">(</span>duration<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token function\">useEffect</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>countdown<span class=\"token punctuation\">)</span> <span class=\"token keyword\">return</span>\n  timer <span class=\"token operator\">=</span> <span class=\"token function\">setInterval</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n    <span class=\"token function\">setCountdown</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">c</span> <span class=\"token operator\">=></span> c <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>countdown<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token function\">clearInterval</span><span class=\"token punctuation\">(</span>timer<span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1000</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span>countdown<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span></code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n<p>然而事情还没有结束，仔细看一下代码，不难发现每次 countdown 更新都会触发一次新的 <code class=\"gatsby-code-text\">setInterval()</code>，这并不是我们想要的。并且我们没法提前结束这个计时器。</p>\n<p>哎~明明在 Class 组件中很简单的事情，怎么到了 Hooks 中这么复杂。</p>\n<p>解决方案看<a href=\"https://overreacted.io/zh-hans/making-setinterval-declarative-with-react-hooks/\" target=\"_blank\" rel=\"noopener noreferrer\">这里</a>，你会惊讶的。</p>\n<h2>小结</h2>\n<p>第一次看到官方文档中的「It takes a bit of a mindshift to start “thinking in Hooks”」这句话的时候，我并没有太当回事，觉得无非就是有一样新东西要学而已。时隔几个月再看，这句话分量还是挺重的。从 Class 到 Hooks 的变化真的很大，很多思维模式都变了，我们甚至需要接受一些曾经极力避免的反模式。</p>\n<p>React 从一开始就推崇声明式的设计，万物皆组件，最大的感受就是路由的设计。Hooks 相比 Class 更加符合声明式的设计，从此 React 进入「万物皆函数」的时代。</p>\n<p>如果你觉得 Hooks 是一颗重磅炸弹，我建议你了解一下 <a href=\"https://reactjs.org/blog/2018/11/27/react-16-roadmap.html#react-16x-q2-2019-the-one-with-concurrent-mode\" target=\"_blank\" rel=\"noopener noreferrer\">Concurrent Mode</a>。然后你会发现，Hooks 只是一道前菜，是为后面真正的主菜做铺垫用的。</p>","frontmatter":{"title":"重新 Think in Hooks","description":"忘记过去之所学，我们从头来过","cover":{"publicURL":"/static/rethink-in-hooks-f9fcd719dcab55af4a1ad3d3cfbe0585.jpg"},"tags":["react","hooks"],"series":"","draft":false},"fields":{"id":"rethink-in-hooks","date":"2019-05-27"},"headings":[{"value":"为什么要重新来过？","depth":2},{"value":"当我们讨论 Hooks 时，我们到底在讨论什么？","depth":2},{"value":"忘掉你所学","depth":2},{"value":"为什么我的 state 不更新？","depth":2},{"value":"useEffect 的依赖数组到底应该怎么用","depth":2},{"value":"不要担心重复定义函数","depth":2},{"value":"如何在 Hooks 中发起 HTTP 请求","depth":2},{"value":"如何使用 <code class=\"gatsby-code-text\">setInterval()</code>","depth":2},{"value":"小结","depth":2}],"tableOfContents":"<ul>\n<li><a href=\"/blog/2019/05/27/rethink-in-hooks/#%E4%B8%BA%E4%BB%80%E4%B9%88%E8%A6%81%E9%87%8D%E6%96%B0%E6%9D%A5%E8%BF%87%EF%BC%9F\">为什么要重新来过？</a></li>\n<li><a href=\"/blog/2019/05/27/rethink-in-hooks/#%E5%BD%93%E6%88%91%E4%BB%AC%E8%AE%A8%E8%AE%BA-hooks-%E6%97%B6%EF%BC%8C%E6%88%91%E4%BB%AC%E5%88%B0%E5%BA%95%E5%9C%A8%E8%AE%A8%E8%AE%BA%E4%BB%80%E4%B9%88%EF%BC%9F\">当我们讨论 Hooks 时，我们到底在讨论什么？</a></li>\n<li><a href=\"/blog/2019/05/27/rethink-in-hooks/#%E5%BF%98%E6%8E%89%E4%BD%A0%E6%89%80%E5%AD%A6\">忘掉你所学</a></li>\n<li><a href=\"/blog/2019/05/27/rethink-in-hooks/#%E4%B8%BA%E4%BB%80%E4%B9%88%E6%88%91%E7%9A%84-state-%E4%B8%8D%E6%9B%B4%E6%96%B0%EF%BC%9F\">为什么我的 state 不更新？</a></li>\n<li><a href=\"/blog/2019/05/27/rethink-in-hooks/#useeffect-%E7%9A%84%E4%BE%9D%E8%B5%96%E6%95%B0%E7%BB%84%E5%88%B0%E5%BA%95%E5%BA%94%E8%AF%A5%E6%80%8E%E4%B9%88%E7%94%A8\">useEffect 的依赖数组到底应该怎么用</a></li>\n<li><a href=\"/blog/2019/05/27/rethink-in-hooks/#%E4%B8%8D%E8%A6%81%E6%8B%85%E5%BF%83%E9%87%8D%E5%A4%8D%E5%AE%9A%E4%B9%89%E5%87%BD%E6%95%B0\">不要担心重复定义函数</a></li>\n<li><a href=\"/blog/2019/05/27/rethink-in-hooks/#%E5%A6%82%E4%BD%95%E5%9C%A8-hooks-%E4%B8%AD%E5%8F%91%E8%B5%B7-http-%E8%AF%B7%E6%B1%82\">如何在 Hooks 中发起 HTTP 请求</a></li>\n<li><a href=\"/blog/2019/05/27/rethink-in-hooks/#%E5%A6%82%E4%BD%95%E4%BD%BF%E7%94%A8-code-classgatsby-code-textsetintervalcode\">如何使用 <code class=\"gatsby-code-text\">setInterval()</code></a></li>\n<li><a href=\"/blog/2019/05/27/rethink-in-hooks/#%E5%B0%8F%E7%BB%93\">小结</a></li>\n</ul>"}},"pageContext":{"slug":"/blog/2019/05/27/rethink-in-hooks"}}}