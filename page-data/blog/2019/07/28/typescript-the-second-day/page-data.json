{"componentChunkName":"component---src-templates-blog-post-tsx","path":"/blog/2019/07/28/typescript-the-second-day","result":{"data":{"site":{"siteMetadata":{"title":"童话说","keywords":["thewashingtonhua","github","front-end","javascript","typescript","react","node","washington","hua","童话","童话说","前端","博客","技术","计算机","互联网"]}},"allMarkdownRemark":{"totalCount":83,"edges":[{"node":{"id":"d8972347-1404-5f3f-b52f-a96b5d18ad54","frontmatter":{"title":"CSS Scan","description":"VSCode 扩展，自动补全 CSS 变量","tags":null,"cover":{"publicURL":"/static/72e94c39ebb670dd23625675c0a22ace/blank.jpg"},"series":null,"draft":true,"original":null},"fields":{"id":"css-scan","slug":"/project/css-scan","type":"project","date":null}}},{"node":{"id":"a18d8b3f-fe18-59c1-bcc1-fcd84958e624","frontmatter":{"title":"FBC","description":"联合办公空间的会员服务","tags":null,"cover":{"publicURL":"/static/73b8b250e607c97c493edf1b542345fa/fbc.jpg"},"series":null,"draft":true,"original":null},"fields":{"id":"fbc","slug":"/project/fbc","type":"project","date":null}}},{"node":{"id":"130b94e2-4a4c-5ff6-bcdd-f583151f8e9a","frontmatter":{"title":"影力所","description":"泛娱乐领域的垂直数字货币交易所","tags":null,"cover":{"publicURL":"/static/40ff0dfa20bfd2e8e2b2ea8abb900b5b/inex.jpg"},"series":null,"draft":false,"original":null},"fields":{"id":"inex","slug":"/project/inex","type":"project","date":null}}},{"node":{"id":"1ef032fc-5cff-5d54-b043-5630c19726dd","frontmatter":{"title":"Teambition 网盘","description":"Teambition 出品的网盘应用","tags":null,"cover":{"publicURL":"/static/a18be47f8ccb3a72f9a63b94e7e02a89/teamedia.jpg"},"series":null,"draft":false,"original":null},"fields":{"id":"teamedia","slug":"/project/teamedia","type":"project","date":null}}},{"node":{"id":"f939aecc-08da-5e52-be67-4204ba57a43f","frontmatter":{"title":"The Bookmark","description":"让整理 Chrome 书签不那么麻烦","tags":null,"cover":{"publicURL":"/static/72e94c39ebb670dd23625675c0a22ace/blank.jpg"},"series":null,"draft":true,"original":null},"fields":{"id":"the-bookmark","slug":"/project/the-bookmark","type":"project","date":null}}},{"node":{"id":"d2e65cfa-f706-51de-a5af-b49346004338","frontmatter":{"title":"Github-Flutter","description":"基于 Flutter 开发的 Github 客户端","tags":null,"cover":{"publicURL":"/static/72e94c39ebb670dd23625675c0a22ace/blank.jpg"},"series":null,"draft":true,"original":null},"fields":{"id":"github-flutter","slug":"/project/github-flutter","type":"project","date":null}}},{"node":{"id":"8b0f2e60-5e93-590c-8f0b-fdb1f9b60f72","frontmatter":{"title":"Fridge","description":"设计资产速查工具","tags":null,"cover":{"publicURL":"/static/97b869f04b74e763be87e4369e4690e3/fridge.jpg"},"series":null,"draft":false,"original":null},"fields":{"id":"fridge","slug":"/project/fridge","type":"project","date":null}}},{"node":{"id":"d1d07852-8bd0-5f2d-b71e-d581f89f6834","frontmatter":{"title":"The Renamer","description":"批量重命名文件","tags":null,"cover":{"publicURL":"/static/72e94c39ebb670dd23625675c0a22ace/blank.jpg"},"series":null,"draft":true,"original":null},"fields":{"id":"the-renamer","slug":"/project/the-renamer","type":"project","date":null}}},{"node":{"id":"69b8a9b0-5842-5f8a-af9e-7969ae9a52de","frontmatter":{"title":"The Favicon","description":"一站式 Favicon 解决方案","tags":null,"cover":{"publicURL":"/static/956c5d68ba30b313078082a832a80573/the-favicon.jpg"},"series":null,"draft":false,"original":null},"fields":{"id":"the-favicon","slug":"/project/the-favicon","type":"project","date":null}}},{"node":{"id":"e2e9ca5d-5451-5488-bbdb-95d2f726007d","frontmatter":{"title":"The Scanner","description":"一眼看清磁盘占用情况","tags":null,"cover":{"publicURL":"/static/72e94c39ebb670dd23625675c0a22ace/blank.jpg"},"series":null,"draft":true,"original":null},"fields":{"id":"the-scanner","slug":"/project/the-scanner","type":"project","date":null}}},{"node":{"id":"03ce08e4-747a-593a-a4b6-c3f880063ba2","frontmatter":{"title":"Thoughts 所思","description":"Teambition 出品的企业知识管理应用","tags":null,"cover":{"publicURL":"/static/faff3495c115cab9b6fd951f3c6b96f9/thoughts.jpg"},"series":null,"draft":false,"original":null},"fields":{"id":"thoughts","slug":"/project/thoughts","type":"project","date":null}}},{"node":{"id":"f9d819bd-ec6f-5208-babe-af3321b98849","frontmatter":{"title":"The Spoiler","description":"仿 QQ 影音「剧情连拍」","tags":null,"cover":{"publicURL":"/static/72e94c39ebb670dd23625675c0a22ace/blank.jpg"},"series":null,"draft":true,"original":null},"fields":{"id":"the-spoiler","slug":"/project/the-spoiler","type":"project","date":null}}},{"node":{"id":"96d8262a-1a3a-5d8d-927a-61a92af40bbb","frontmatter":{"title":"Xshowroom 买手圈","description":"时尚业专业买手服务平台","tags":null,"cover":{"publicURL":"/static/72ea2ae7921cb5aa0b3b4f56578ed2b9/xshowroom.jpg"},"series":null,"draft":true,"original":null},"fields":{"id":"xshowroom","slug":"/project/xshowroom","type":"project","date":null}}},{"node":{"id":"ef1d93e7-33e6-5c26-8a0b-fcb475a4a7bd","frontmatter":{"title":"自己动手做一个播放器","description":"一潭看起来很浅的深水","tags":["media","video","audio"],"cover":{"publicURL":"/static/d221320d45d5d7ac530fe7af1ab4cd79/blank.jpg"},"series":"","draft":true,"original":true},"fields":{"id":"blog/draft/custom-media-player","slug":"/blog/blog/draft/custom-media-player","type":"blog","date":null}}},{"node":{"id":"d268eb02-e779-5455-920f-246feac07c7e","frontmatter":{"title":"聊聊前端架构","description":"前端如果只是写写页面的话，路就走窄了","tags":["architecture","架构"],"cover":{"publicURL":"/static/d221320d45d5d7ac530fe7af1ab4cd79/blank.jpg"},"series":"","draft":true,"original":true},"fields":{"id":"blog/draft/frontend-architecture","slug":"/blog/blog/draft/frontend-architecture","type":"blog","date":null}}},{"node":{"id":"6f90759d-2425-5cd2-b498-b62726e30328","frontmatter":{"title":"基于 Monorepo 的项目架构","description":"分久必合","tags":["architecture","monorepo","架构"],"cover":{"publicURL":"/static/d221320d45d5d7ac530fe7af1ab4cd79/blank.jpg"},"series":"","draft":true,"original":true},"fields":{"id":"blog/draft/design-a-monorepo-project","slug":"/blog/blog/draft/design-a-monorepo-project","type":"blog","date":null}}},{"node":{"id":"cbeb2307-591f-54ae-8ff1-48f59949994d","frontmatter":{"title":"「童话说」又改版啦","description":"只为遇见更好的自己","tags":["blog","4.0","update"],"cover":{"publicURL":"/static/d221320d45d5d7ac530fe7af1ab4cd79/blank.jpg"},"series":"","draft":true,"original":true},"fields":{"id":"blog/draft/introducing-ths-v4","slug":"/blog/blog/draft/introducing-ths-v4","type":"blog","date":null}}},{"node":{"id":"66e250ec-9f77-59c4-89ad-62de1da8af4f","frontmatter":{"title":"阅流","description":"音视频资产管理与协同工作流平台","tags":null,"cover":{"publicURL":"/static/9714ee2418af11ae8e80156b953176e5/yueliu.jpg"},"series":null,"draft":false,"original":null},"fields":{"id":"xinyue","slug":"/project/xinyue","type":"project","date":null}}},{"node":{"id":"629e72b7-0c5b-5119-a4eb-2117f81c1c74","frontmatter":{"title":"让你的 Electron 应用更像原生","description":"青出于蓝，就得够蓝","tags":["electron"],"cover":{"publicURL":"/static/d221320d45d5d7ac530fe7af1ab4cd79/blank.jpg"},"series":"","draft":true,"original":true},"fields":{"id":"blog/draft/make-electron-app-like-native","slug":"/blog/blog/draft/make-electron-app-like-native","type":"blog","date":null}}},{"node":{"id":"e48043ee-92d6-5f14-a21e-25316a24d6fc","frontmatter":{"title":"为什么我们总是在不断地造轮子","description":"圆的圆的圆的东西","tags":["thinking"],"cover":{"publicURL":"/static/120fefa8e824de66889cf2e45b746ebe/wheel.jpg"},"series":"","draft":true,"original":true},"fields":{"id":"blog/draft/why-do-we-keep-building-wheels","slug":"/blog/blog/draft/why-do-we-keep-building-wheels","type":"blog","date":null}}},{"node":{"id":"831f0b6d-239a-57bc-9df2-9515c8033613","frontmatter":{"title":"Fridge 背后的故事","description":"能动手的，咱们尽量别吵吵","tags":["electron","iconfont","svg","fridge"],"cover":{"publicURL":"/static/d221320d45d5d7ac530fe7af1ab4cd79/blank.jpg"},"series":"","draft":true,"original":true},"fields":{"id":"blog/draft/story-behind-fridge","slug":"/blog/blog/draft/story-behind-fridge","type":"blog","date":null}}},{"node":{"id":"06f78e85-6919-5c8b-acd3-87868117a0b8","frontmatter":{"title":"当我想要复用一些代码时","description":"懒惰真的是人类进步的最大动力","tags":["npm","monorepo","design pattern"],"cover":{"publicURL":"/static/d221320d45d5d7ac530fe7af1ab4cd79/blank.jpg"},"series":"","draft":true,"original":true},"fields":{"id":"blog/draft/when-i-want-to-reuse-some-code","slug":"/blog/blog/draft/when-i-want-to-reuse-some-code","type":"blog","date":null}}},{"node":{"id":"f7b25b63-8a8f-5c85-8d99-e6513c498f70","frontmatter":{"title":"多端 Web 应用实践","description":"去往梦想的路，总是坑坑洼洼的","tags":["cross-platform"],"cover":{"publicURL":"/static/d221320d45d5d7ac530fe7af1ab4cd79/blank.jpg"},"series":"","draft":true,"original":true},"fields":{"id":"blog/draft/web-cross-platform-in-action","slug":"/blog/blog/draft/web-cross-platform-in-action","type":"blog","date":null}}},{"node":{"id":"235647b7-ab40-5666-8a43-5e3f0b84bc15","frontmatter":{"title":"金三银四，聊聊前端面试","description":"人嘛，总是在不断的试错中成长起来的","tags":["interview"],"cover":{"publicURL":"/static/d221320d45d5d7ac530fe7af1ab4cd79/blank.jpg"},"series":"","draft":true,"original":true},"fields":{"id":"thoughts-about-fe-interview","slug":"/blog/2022/03/01/thoughts-about-fe-interview","type":"blog","date":"2022-03-01"}}},{"node":{"id":"3a2d2bcd-1ecc-5974-9394-efb756f1f1a9","frontmatter":{"title":"你铁定已经知道的 ES 2020","description":"迟到，总比不到好","tags":["ecmascript","2020"],"cover":{"publicURL":"/static/5bbe9cbd4d341256fe533f89aa242cb6/es2020.jpg"},"series":"ecmascript","draft":false,"original":true},"fields":{"id":"es-2020","slug":"/blog/2020/12/28/es-2020","type":"blog","date":"2020-12-28"}}},{"node":{"id":"f8010292-2ae9-55e9-8dc1-b161e1ed0e8e","frontmatter":{"title":"我的数组返回了啥","description":"功夫再高，一针下去也得倒","tags":["javascript","array"],"cover":{"publicURL":"/static/2cc085eb3cdf21f44644810589c3bd8a/array.jpg"},"series":"","draft":false,"original":true},"fields":{"id":"what-does-my-array-return","slug":"/blog/2020/12/07/what-does-my-array-return","type":"blog","date":"2020-12-07"}}},{"node":{"id":"cce39a0a-715e-52b1-9ffc-4bedcaa986f3","frontmatter":{"title":"一个非著名前端开发者的 2020","description":"继续，让进步发生","tags":["summary","2020","2021"],"cover":{"publicURL":"/static/40556f5636111e701f3949914488b854/summary-2020.jpg"},"series":"summary","draft":false,"original":true},"fields":{"id":"summary-2020","slug":"/blog/2020/12/31/summary-2020","type":"blog","date":"2020-12-31"}}},{"node":{"id":"78accc1d-9509-5bb3-9dc5-f47e1f336faf","frontmatter":{"title":"设计一套乐观更新机制","description":"做人呐，最重要的就是乐观啦","tags":["design","optimistic","update"],"cover":{"publicURL":"/static/92603cdac7e5c420caea18ea2c459646/optimistic-update.jpg"},"series":"","draft":false,"original":true},"fields":{"id":"building-an-optimisic-update-mechanism","slug":"/blog/2020/07/13/building-an-optimisic-update-mechanism","type":"blog","date":"2020-07-13"}}},{"node":{"id":"a2307fdb-e855-5054-bb5c-5afcd8b4486b","frontmatter":{"title":"除了 SSR，就没有别的办法了吗","description":"当 MVVM 遇上 SEO，该如何是好","tags":["static","site","gatsby","pug"],"cover":{"publicURL":"/static/c2ac5cf49eafd77a1b2ce1fab7f53515/explore-static-site-generation.jpg"},"series":"","draft":false,"original":true},"fields":{"id":"explore-static-site-generation","slug":"/blog/2019/02/07/explore-static-site-generation","type":"blog","date":"2019-02-07"}}},{"node":{"id":"36b1a9b7-cbb3-5603-8b82-4d208c3b8a90","frontmatter":{"title":"【译】我们为什么要写 super(props)?","description":"好像知道，又好像不知道","tags":["react"],"cover":{"publicURL":"/static/9fbf74366dc5b9e4aab57572a9f0470d/overreacted.jpg"},"series":"overreacted","draft":false,"original":false},"fields":{"id":"why-do-we-write-super-props","slug":"/blog/2019/02/22/why-do-we-write-super-props","type":"blog","date":"2019-02-22"}}},{"node":{"id":"1bca0d32-a7ee-5439-a55f-9d75e9426eb1","frontmatter":{"title":"重新 Think in Hooks","description":"忘记过去之所学，我们从头来过","tags":["react","hooks"],"cover":{"publicURL":"/static/f9fcd719dcab55af4a1ad3d3cfbe0585/rethink-in-hooks.jpg"},"series":"","draft":false,"original":true},"fields":{"id":"rethink-in-hooks","slug":"/blog/2019/05/27/rethink-in-hooks","type":"blog","date":"2019-05-27"}}},{"node":{"id":"cee0c8aa-e571-5394-a0fa-84dedb9bd3c0","frontmatter":{"title":"【译】React 如何区分 Class 和 Function？","description":"所谓的简单，只是因为有人帮你把复杂的问题给解决掉了","tags":["react"],"cover":{"publicURL":"/static/9fbf74366dc5b9e4aab57572a9f0470d/overreacted.jpg"},"series":"overreacted","draft":false,"original":false},"fields":{"id":"how-does-react-tell-a-class-from-a-function","slug":"/blog/2019/03/06/how-does-react-tell-a-class-from-a-function","type":"blog","date":"2019-03-06"}}},{"node":{"id":"1c714ef9-56d1-5ce8-aa92-ad38fb776c27","frontmatter":{"title":"你可能已经知道的 ES 2018 和 2019","description":"好饭不怕晚","tags":["ecmascript","2018","2019"],"cover":{"publicURL":"/static/5646b4878e533cd7c725ce4c17984071/es2019.jpg"},"series":"ecmascript","draft":false,"original":true},"fields":{"id":"es2018-and-es2019","slug":"/blog/2019/02/11/es2018-and-es2019","type":"blog","date":"2019-02-11"}}},{"node":{"id":"38745745-24e5-5fd0-b893-a81ccdeed4e8","frontmatter":{"title":"TypeScript：又一个终将逝去的青春","description":"你，轰轰烈烈地来；你，平平淡淡地走。","tags":["typescript"],"cover":{"publicURL":"/static/b7b7642447ca6a5b28abf9f90bf06ef8/typescript-another-fading-youth.jpg"},"series":"","draft":false,"original":true},"fields":{"id":"typescript-another-fading-youth","slug":"/blog/2019/10/10/typescript-another-fading-youth","type":"blog","date":"2019-10-10"}}},{"node":{"id":"1bd98cff-a13f-5d96-a821-4e8b172460f2","frontmatter":{"title":"探索 React 组件之间的生命周期","description":"有时候，生活就是一团麻","tags":["react","lifecycle"],"cover":{"publicURL":"/static/0edf69056144aaf512a28d0670b53b57/react-lifecycle.jpg"},"series":"","draft":false,"original":true},"fields":{"id":"react-lifecycle","slug":"/blog/2019/05/02/react-lifecycle","type":"blog","date":"2019-05-02"}}},{"node":{"id":"1b946c8e-4515-5f6a-bff0-9d63a338fca9","frontmatter":{"title":"Homebrew 也有后悔药：回退一次小版本更新","description":"有了后悔药，可劲随便造","tags":["homebrew"],"cover":{"publicURL":"/static/2cd1cc709ca5d68b1a1fb9eb6283b820/homebrew.jpg"},"series":"","draft":false,"original":true},"fields":{"id":"how-to-downgrade-from-homebrew","slug":"/blog/2019/10/11/how-to-downgrade-from-homebrew","type":"blog","date":"2019-10-11"}}},{"node":{"id":"60328fae-7371-5510-8f73-e804ed636097","frontmatter":{"title":"如何 Think in Hooks","description":"差不多是时候该换换脑子了","tags":["react","hooks"],"cover":{"publicURL":"/static/26d13ef2591ee05a3c4bba7fc34daa88/think-in-hooks.jpg"},"series":"","draft":false,"original":true},"fields":{"id":"how-to-think-in-hooks","slug":"/blog/2019/02/15/how-to-think-in-hooks","type":"blog","date":"2019-02-15"}}},{"node":{"id":"e4cb7abe-3cde-5832-a981-7128e5c0d895","frontmatter":{"title":"一个非著名前端开发者的 2019","description":"感谢曾经努力的自己","tags":["summary","2019","2020"],"cover":{"publicURL":"/static/1011f23d2ed2635035a07878c03ed1da/summary-2019.jpg"},"series":"summary","draft":false,"original":true},"fields":{"id":"summary-2019","slug":"/blog/2019/12/31/summary-2019","type":"blog","date":"2019-12-31"}}},{"node":{"id":"ce78757a-076a-5b89-9be0-9ac597211f81","frontmatter":{"title":"每天一点ES6(15)：Promise","description":"对你的承诺，永远不变","tags":["ecmascript","2015","es6","javascript","promise"],"cover":{"publicURL":"/static/0950334fb8899f1006423341cbfeecb9/es6daily.jpg"},"series":"es6daily","draft":false,"original":true},"fields":{"id":"es6-daily-15-promise","slug":"/blog/2018/03/04/es6-daily-15-promise","type":"blog","date":"2018-03-04"}}},{"node":{"id":"b5e8773f-6dff-512b-98df-725d27df8f4f","frontmatter":{"title":"每天一点ES6(14)：Iterator","description":"遍历也能搞出花来，怎么遍历你说了算","tags":["ecmascript","2015","es6","javascript","iterator","generator"],"cover":{"publicURL":"/static/0950334fb8899f1006423341cbfeecb9/es6daily.jpg"},"series":"es6daily","draft":false,"original":true},"fields":{"id":"es6-daily-14-iterator","slug":"/blog/2018/02/28/es6-daily-14-iterator","type":"blog","date":"2018-02-28"}}},{"node":{"id":"4d37b609-e7b3-544a-9c20-f50ace245da1","frontmatter":{"title":"TypeScript 次日指南","description":"坑这种东西，是不会写在文档上的","tags":["typescript"],"cover":{"publicURL":"/static/8239307adc5ccdfc32320e1bcadb6300/typescript.jpg"},"series":"","draft":false,"original":true},"fields":{"id":"typescript-the-second-day","slug":"/blog/2019/07/28/typescript-the-second-day","type":"blog","date":"2019-07-28"}}},{"node":{"id":"2980c140-8128-583c-b715-00c459639f74","frontmatter":{"title":"TradingView + WebSocket 脱坑指南","description":"让我来告诉你，K 线到底该怎么画","tags":["tradingview","chart","library","guide","websocket","webworker","ohlc","kchart"],"cover":{"publicURL":"/static/1ceaf53d99815784a18273970e741bfd/tradingview.jpg"},"series":"","draft":false,"original":true},"fields":{"id":"tradingview-charting-library-simple-guide","slug":"/blog/2018/09/22/tradingview-charting-library-simple-guide","type":"blog","date":"2018-09-22"}}},{"node":{"id":"f06b7a4d-10f9-5a92-be83-9e703c97b24a","frontmatter":{"title":"每天一点ES6(17)：Async / Await","description":"异步？先等等！","tags":["ecmascript","2015","es6","javascript","async","await","generator"],"cover":{"publicURL":"/static/0950334fb8899f1006423341cbfeecb9/es6daily.jpg"},"series":"es6daily","draft":false,"original":true},"fields":{"id":"es6-daily-17-async-await","slug":"/blog/2018/10/06/es6-daily-17-async-await","type":"blog","date":"2018-10-06"}}},{"node":{"id":"ab6648bb-2a63-5907-9644-5bb1c03f3d13","frontmatter":{"title":"每天一点ES6(19)：Module","description":"可能是 ES6 中对未来影响最大的一项改变","tags":["ecmascript","2015","es6","javascript","module","import","export"],"cover":{"publicURL":"/static/0950334fb8899f1006423341cbfeecb9/es6daily.jpg"},"series":"es6daily","draft":false,"original":true},"fields":{"id":"es6-daily-19-module","slug":"/blog/2018/12/19/es6-daily-19-module","type":"blog","date":"2018-12-19"}}},{"node":{"id":"acaadd98-c9a3-5f8d-8592-9eb580993d5a","frontmatter":{"title":"解决 macOS 下 MySQL 2002 错误","description":"MySQL 真是个磨人的小妖精","tags":["mac","mysql","2002"],"cover":{"publicURL":"/static/6f1abf9c085f6538df6bced86e008157/mysql-error-2002.jpg"},"series":"","draft":false,"original":true},"fields":{"id":"mysql-error-2002","slug":"/blog/2017/02/07/mysql-error-2002","type":"blog","date":"2017-02-07"}}},{"node":{"id":"a320306e-d8c5-57d0-bccd-65654be47ebe","frontmatter":{"title":"记 new Date().toString() 的一个坑","description":"万万没想到，竟在这里踩了个坑……","tags":["javascript","date","tostring"],"cover":{"publicURL":"/static/e192283893c7e97feb631571134bb805/date-tostring.jpg"},"series":"","draft":false,"original":true},"fields":{"id":"a-pit-in-date-tostring","slug":"/blog/2017/03/08/a-pit-in-date-tostring","type":"blog","date":"2017-03-08"}}},{"node":{"id":"675cdc47-ff83-5d54-b1f6-9eb1ab727257","frontmatter":{"title":"一个非著名前端开发者的 2018","description":"资本寒冬大概是属燕子的吧，一到年末出现","tags":["summary","2018","2019"],"cover":{"publicURL":"/static/0e9c38c3d5d6b94d53a8dee2a7bdfbae/summary-2018.jpg"},"series":"summary","draft":false,"original":true},"fields":{"id":"summary-2018","slug":"/blog/2018/12/31/summary-2018","type":"blog","date":"2018-12-31"}}},{"node":{"id":"4768bfd5-810a-597a-b108-4478ae7b0c62","frontmatter":{"title":"每天一点ES6(16)：Generator","description":"一起来摩擦摩擦发电吧","tags":["ecmascript","2015","es6","javascript","promise"],"cover":{"publicURL":"/static/0950334fb8899f1006423341cbfeecb9/es6daily.jpg"},"series":"es6daily","draft":false,"original":true},"fields":{"id":"es6-daily-16-generator","slug":"/blog/2018/06/14/es6-daily-16-generator","type":"blog","date":"2018-06-14"}}},{"node":{"id":"1459c3df-c925-54f1-b807-e4a212f2c4bd","frontmatter":{"title":"每天一点ES6(18)：Class","description":"这回总没人质疑 JS 不是面向对象了吧？","tags":["ecmascript","2015","es6","javascript","class"],"cover":{"publicURL":"/static/0950334fb8899f1006423341cbfeecb9/es6daily.jpg"},"series":"es6daily","draft":false,"original":true},"fields":{"id":"es6-daily-18-class","slug":"/blog/2018/12/17/es6-daily-18-class","type":"blog","date":"2018-12-17"}}},{"node":{"id":"8605b9b5-c87c-561f-b9c5-eae2b52d86c1","frontmatter":{"title":"聊聊「深色模式」","description":"你说的黑不是黑，你说的暗是什么暗","tags":["design","dark"],"cover":{"publicURL":"/static/d221320d45d5d7ac530fe7af1ab4cd79/blank.jpg"},"series":"","draft":true,"original":true},"fields":{"id":"dark-mode","slug":"/blog/2021/11/30/dark-mode","type":"blog","date":"2021-11-30"}}},{"node":{"id":"899b40b6-931d-5582-8849-ad164824a190","frontmatter":{"title":"阿里云盘","description":"阿里云出品的网盘应用","tags":null,"cover":{"publicURL":"/static/d42b88ce13a4592608ec8325f693ecb3/adrive.jpg"},"series":null,"draft":false,"original":null},"fields":{"id":"adrive","slug":"/project/adrive","type":"project","date":null}}},{"node":{"id":"48340073-afd2-514f-94c7-db3af2dc5796","frontmatter":{"title":"每天一点ES6(10)：对象的扩展","description":"迟来的更新……","tags":["ecmascript","2015","es6","javascript","object"],"cover":{"publicURL":"/static/0950334fb8899f1006423341cbfeecb9/es6daily.jpg"},"series":"es6daily","draft":false,"original":true},"fields":{"id":"es6-daily-10-object","slug":"/blog/2017/04/05/es6-daily-10-object","type":"blog","date":"2017-04-05"}}},{"node":{"id":"9d030bff-d2d5-56ca-8bd6-4f994f728eee","frontmatter":{"title":"PHP 处理多源 CORS 的解决办法","description":"一个老生常谈的话题，碰到了顺便记录一下","tags":["php","cors"],"cover":{"publicURL":"/static/77fc63594cf3a06c31921df671acd258/cors.jpg"},"series":"","draft":false,"original":true},"fields":{"id":"multi-origin-cors-with-php","slug":"/blog/2017/03/30/multi-origin-cors-with-php","type":"blog","date":"2017-03-30"}}},{"node":{"id":"3d497cac-d699-51f6-a002-70934f8f6885","frontmatter":{"title":"iOS 下 click() 无效的问题","description":"iOS这个傲娇的小公举","tags":["ios","click"],"cover":{"publicURL":"/static/f79051a5758b8a973902b2e5d190b714/ios-click.jpg"},"series":"","draft":false,"original":true},"fields":{"id":"unable-to-trigger-click-on-ios","slug":"/blog/2017/03/31/unable-to-trigger-click-on-ios","type":"blog","date":"2017-03-31"}}},{"node":{"id":"070c2a8f-3033-5739-a1ff-0e54e104f1a6","frontmatter":{"title":"Webpack \"Invalid Host Header\"","description":"更新有风险，更新需谨慎……","tags":["webpack","dev","server","invalid","host"],"cover":{"publicURL":"/static/977bc2ebe23a9b6b10fdac4b470847b8/webpack-dev-server.jpg"},"series":"","draft":false,"original":true},"fields":{"id":"webpack-dev-server-invalid-host-header","slug":"/blog/2017/05/04/webpack-dev-server-invalid-host-header","type":"blog","date":"2017-05-04"}}},{"node":{"id":"870a098a-b7e9-5ed2-bef5-f04a6b9f451f","frontmatter":{"title":"Leetcode 第一刷：Two Sum","description":"都闪开，我要开始装逼了","tags":["leetcode","two","sum"],"cover":{"publicURL":"/static/1aa86b8eea674fca29117e535cfba751/leetcode.jpg"},"series":"","draft":false,"original":true},"fields":{"id":"leetcode-01-two-sum","slug":"/blog/2017/04/11/leetcode-01-two-sum","type":"blog","date":"2017-04-11"}}},{"node":{"id":"6d2ed849-7eaf-57bb-b08e-89dc9bab9ce0","frontmatter":{"title":"每天一点ES6(11)：Symbol","description":"原始类型家族的新成员","tags":["ecmascript","2015","es6","javascript","symbol"],"cover":{"publicURL":"/static/0950334fb8899f1006423341cbfeecb9/es6daily.jpg"},"series":"es6daily","draft":false,"original":true},"fields":{"id":"es6-daily-11-symbol","slug":"/blog/2017/07/02/es6-daily-11-symbol","type":"blog","date":"2017-07-02"}}},{"node":{"id":"1dcfd3d2-d775-5454-815d-2f289e2088b3","frontmatter":{"title":"Node.js 9.0.0 发布","description":"一转眼，又半年过去了","tags":["nodejs","release"],"cover":{"publicURL":"/static/86f3115cebbb8dd82646ff1d231fa317/nodejs-9-release.jpg"},"series":"","draft":false,"original":true},"fields":{"id":"nodejs-9-release","slug":"/blog/2017/11/01/nodejs-9-release","type":"blog","date":"2017-11-01"}}},{"node":{"id":"1f254d7c-060e-52f9-af37-6824c1f0fe89","frontmatter":{"title":"童话说 V2.0 改版小结","description":"时隔多年，终于换新面貌了","tags":["blog","2.0","update"],"cover":{"publicURL":"/static/630ee6fc7ad1be564eebffb0e0dd447d/introducing-ths-v2.jpg"},"series":"","draft":false,"original":true},"fields":{"id":"introducing-ths-v2","slug":"/blog/2017/08/12/introducing-ths-v2","type":"blog","date":"2017-08-12"}}},{"node":{"id":"0ab1e422-9e2e-585d-8aee-2273e0715029","frontmatter":{"title":"每天一点ES6(12)：Set 和 Map","description":"多余的，一概不要","tags":["ecmascript","2015","es6","javascript","map","set"],"cover":{"publicURL":"/static/0950334fb8899f1006423341cbfeecb9/es6daily.jpg"},"series":"es6daily","draft":false,"original":true},"fields":{"id":"es6-daily-12-set-and-map","slug":"/blog/2017/07/03/es6-daily-12-set-and-map","type":"blog","date":"2017-07-03"}}},{"node":{"id":"49b0f445-7cbd-5d20-86a3-dff801ff11ef","frontmatter":{"title":"Electron 安装出坑指南","description":"世界本无坑，用的人多了，也就有了坑","tags":["electron"],"cover":{"publicURL":"/static/a9838665d68ab68d327e48d8720bac3f/electron.jpg"},"series":"","draft":false,"original":true},"fields":{"id":"electron-install-guide","slug":"/blog/2017/07/06/electron-install-guide","type":"blog","date":"2017-07-06"}}},{"node":{"id":"3d9678b9-4055-5296-8dad-32f261af39e3","frontmatter":{"title":"一个非著名前端开发者的 2017","description":"哎 ~ 又一年过去了","tags":["summary","2017","2018"],"cover":{"publicURL":"/static/0d96380257d25f6b398d9bc8e47af5a1/summary-2017.jpg"},"series":"summary","draft":false,"original":true},"fields":{"id":"summary-2017","slug":"/blog/2017/12/29/summary-2017","type":"blog","date":"2017-12-29"}}},{"node":{"id":"af03b8b2-0679-5776-a6ee-2dcb39f7aec6","frontmatter":{"title":"ECMAScript 2017 正式到来","description":"ES 的世界开始日趋平静","tags":["ecmascript","2017","es8","javascript"],"cover":{"publicURL":"/static/77b7677386d27526bcb0b2687218f3f1/es2017.jpg"},"series":"ecmascript","draft":false,"original":true},"fields":{"id":"ecmascript-2017-is-here","slug":"/blog/2017/07/12/ecmascript-2017-is-here","type":"blog","date":"2017-07-12"}}},{"node":{"id":"bad38d10-8840-5d4a-b8ee-7307eca7ff5f","frontmatter":{"title":"电梯调度算法","description":"上上下下的感受","tags":["elevator","algorithm","project"],"cover":{"publicURL":"/static/7b7f4cefe4c7bf293ff2cdb266af33d9/elevator.jpg"},"series":"","draft":false,"original":true},"fields":{"id":"elevator","slug":"/blog/2016/02/16/elevator","type":"blog","date":"2016-02-16"}}},{"node":{"id":"479d9be7-97d4-5482-aab6-90a9b33052f9","frontmatter":{"title":"每天一点ES6(13)：Proxy 和 Reflect","description":"对不起，有代理真就是可以为所欲为","tags":["ecmascript","2015","es6","javascript","proxy","reflect"],"cover":{"publicURL":"/static/0950334fb8899f1006423341cbfeecb9/es6daily.jpg"},"series":"es6daily","draft":false,"original":true},"fields":{"id":"es6-daily-13-proxy-and-reflect","slug":"/blog/2017/12/20/es6-daily-13-proxy-and-reflect","type":"blog","date":"2017-12-20"}}},{"node":{"id":"feaa4abe-dead-5b26-aafd-2ba664077e0a","frontmatter":{"title":"每天一点ES6(2)：let 和 const","description":"终于，JavaScript 也能用上块级作用域和常量了","tags":["ecmascript","2015","es6","javascript","let","const"],"cover":{"publicURL":"/static/0950334fb8899f1006423341cbfeecb9/es6daily.jpg"},"series":"es6daily","draft":false,"original":true},"fields":{"id":"es6-daily-02-let-and-const","slug":"/blog/2016/01/25/es6-daily-02-let-and-const","type":"blog","date":"2016-01-25"}}},{"node":{"id":"ba0a8dc4-e229-5632-9024-5a19823848f4","frontmatter":{"title":"每天一点ES6(1)：概述","description":"伊艾斯6大法好，每天一点不会老！","tags":["ecmascript","2015","es6","javascript"],"cover":{"publicURL":"/static/0950334fb8899f1006423341cbfeecb9/es6daily.jpg"},"series":"es6daily","draft":false,"original":true},"fields":{"id":"es6-daily-01-intro","slug":"/blog/2016/01/24/es6-daily-01-intro","type":"blog","date":"2016-01-24"}}},{"node":{"id":"d951db07-68df-59f9-9cee-c441a69a70e3","frontmatter":{"title":"每天一点ES6(5)：字符串的扩展","description":"不变的字符串现在更加多变了","tags":["ecmascript","2015","es6","javascript","string"],"cover":{"publicURL":"/static/0950334fb8899f1006423341cbfeecb9/es6daily.jpg"},"series":"es6daily","draft":false,"original":true},"fields":{"id":"es6-daily-05-string","slug":"/blog/2016/04/05/es6-daily-05-string","type":"blog","date":"2016-04-05"}}},{"node":{"id":"140d4f03-33ff-5c2f-bc34-f3db45e4af68","frontmatter":{"title":"每天一点ES6(6)：正则的扩展","description":"四字节 Unicode 的春天","tags":["ecmascript","2015","es6","javascript","regular","expression","regexp"],"cover":{"publicURL":"/static/0950334fb8899f1006423341cbfeecb9/es6daily.jpg"},"series":"es6daily","draft":false,"original":true},"fields":{"id":"es6-daily-06-regexp","slug":"/blog/2016/04/06/es6-daily-06-regexp","type":"blog","date":"2016-04-06"}}},{"node":{"id":"78a4c0f1-f9a4-5abe-9fb0-fa0bdd0559f0","frontmatter":{"title":"每天一点ES6(4)：Babel","description":"《圣经》的光辉，永恒！","tags":["ecmascript","2015","es6","javascript","babel","npm"],"cover":{"publicURL":"/static/0950334fb8899f1006423341cbfeecb9/es6daily.jpg"},"series":"es6daily","draft":false,"original":true},"fields":{"id":"es6-daily-04-babel","slug":"/blog/2016/02/19/es6-daily-04-babel","type":"blog","date":"2016-02-19"}}},{"node":{"id":"f9ed5267-cb6b-5bec-9610-b1e9f8e8ebc0","frontmatter":{"title":"每天一点ES6(8)：数组的扩展","description":"别拿语法糖不当干粮","tags":["ecmascript","2015","es6","javascript","array"],"cover":{"publicURL":"/static/0950334fb8899f1006423341cbfeecb9/es6daily.jpg"},"series":"es6daily","draft":false,"original":true},"fields":{"id":"es6-daily-08-array","slug":"/blog/2016/07/26/es6-daily-08-array","type":"blog","date":"2016-07-26"}}},{"node":{"id":"42c4dde9-d4c0-508a-bed0-070004ef8069","frontmatter":{"title":"每天一点ES6(7)：数值的扩展","description":"每一个数字都不能放过","tags":["ecmascript","2015","es6","javascript","number"],"cover":{"publicURL":"/static/0950334fb8899f1006423341cbfeecb9/es6daily.jpg"},"series":"es6daily","draft":false,"original":true},"fields":{"id":"es6-daily-07-number","slug":"/blog/2016/04/12/es6-daily-07-number","type":"blog","date":"2016-04-12"}}},{"node":{"id":"431e4dd2-8cc9-5f84-b84b-c4c1eabd3b09","frontmatter":{"title":"每天一点ES6(3)：解构赋值","description":"让你一次赋个够","tags":["ecmascript","2015","es6","javascript","destructuring"],"cover":{"publicURL":"/static/0950334fb8899f1006423341cbfeecb9/es6daily.jpg"},"series":"es6daily","draft":false,"original":true},"fields":{"id":"es6-daily-03-destructuring","slug":"/blog/2016/02/02/es6-daily-03-destructuring","type":"blog","date":"2016-02-02"}}},{"node":{"id":"ab0b546a-515e-504e-92f2-5bc12544ed39","frontmatter":{"title":"每天一点ES6(9)：函数的扩展","description":"博采众长的实用语法糖","tags":["ecmascript","2015","es6","javascript","function"],"cover":{"publicURL":"/static/0950334fb8899f1006423341cbfeecb9/es6daily.jpg"},"series":"es6daily","draft":false,"original":true},"fields":{"id":"es6-daily-09-function","slug":"/blog/2016/12/20/es6-daily-09-function","type":"blog","date":"2016-12-20"}}},{"node":{"id":"2b011eae-b89b-5d41-9cf1-15025c9a6117","frontmatter":{"title":"一个非著名前端开发者的 2016","description":"回顾 2016，是充实的一年，不负青春。2017 加油继续！","tags":["summary","2016","2017"],"cover":{"publicURL":"/static/d4bc85d6ff1aa8985e03c3875f90ea51/summary-2016.jpg"},"series":"summary","draft":false,"original":true},"fields":{"id":"summary-2016","slug":"/blog/2016/12/31/summary-2016","type":"blog","date":"2016-12-31"}}},{"node":{"id":"4da7c54c-1654-5479-8d6b-ce27531ec6ea","frontmatter":{"title":"5 分钟彻底明白 JSONP","description":"说穿了，其实没那么难","tags":["javascript","jsonp"],"cover":{"publicURL":"/static/f8f2d118b15646398f7d00e19eb17ff9/jsonp.jpg"},"series":"","draft":false,"original":true},"fields":{"id":"jsonp","slug":"/blog/2016/08/17/jsonp","type":"blog","date":"2016-08-17"}}},{"node":{"id":"fa129fb7-cea0-54ef-97d9-2cd0e7dc435f","frontmatter":{"title":"栈计算器","description":"通过“栈”实现的方程式计算器","tags":["stack","calculator","algorithm","project"],"cover":{"publicURL":"/static/256bbf9439e7f58974c946bc16f54832/stack-calculator.jpg"},"series":"","draft":false,"original":true},"fields":{"id":"stack-calculator","slug":"/blog/2015/02/10/stack-calculator","type":"blog","date":"2015-02-10"}}},{"node":{"id":"481787e1-0e84-58ba-932e-7c6584b7ea7c","frontmatter":{"title":"时间是什么颜色的","description":"如果时间有颜色……","tags":["color","time","project"],"cover":{"publicURL":"/static/03c874556dd31d9db5f30b7609751b92/tik-tok-color.jpg"},"series":"","draft":false,"original":true},"fields":{"id":"tik-tok-color","slug":"/blog/2015/02/11/tik-tok-color","type":"blog","date":"2015-02-11"}}},{"node":{"id":"bb0d4469-c33f-5b65-9dce-b9eaa84033a7","frontmatter":{"title":"MIUI 图标缓存问题","description":"离奇失踪的图标","tags":["android","miui","icon","cache"],"cover":{"publicURL":"/static/2e66c31a61d5319c1849ea082e8c80ee/miui-icon-cache.jpg"},"series":"","draft":false,"original":true},"fields":{"id":"miui-icon-cache","slug":"/blog/2015/04/18/miui-icon-cache","type":"blog","date":"2015-04-18"}}},{"node":{"id":"94f6b895-88ca-521e-8647-c0df5f922670","frontmatter":{"title":"使用 Sublime Text 编写 LaTeX","description":"用你最熟悉的工具来写 LaTeX 吧","tags":["sublime","latex"],"cover":{"publicURL":"/static/e7689b7e9fe6160a6ed614a10125ca29/latex-with-sublime-text.jpg"},"series":"","draft":false,"original":true},"fields":{"id":"latex-with-sublime-text","slug":"/blog/2015/04/01/latex-with-sublime-text","type":"blog","date":"2015-04-01"}}},{"node":{"id":"b1595fb6-f219-5181-8272-64ed2e1efd07","frontmatter":{"title":"substr() 和 substring() 的区别","description":"两个函数，傻傻分不清楚","tags":["javascript","substr","substring","slice"],"cover":{"publicURL":"/static/289ad52fc38963e15549cd1dc24678e4/substring.jpg"},"series":"","draft":false,"original":true},"fields":{"id":"substr-and-substring","slug":"/blog/2015/05/15/substr-and-substring","type":"blog","date":"2015-05-15"}}},{"node":{"id":"eae3570c-3509-5e64-bd53-a1ce138da4e5","frontmatter":{"title":"纯 CSS3 绘制月饼","description":"中秋佳节，用CSS3来画个月饼吧","tags":["css","mooncake","project"],"cover":{"publicURL":"/static/9aaefaae86216c79623893c080f1ccc2/css3-mooncake.jpg"},"series":"","draft":false,"original":true},"fields":{"id":"css3-mooncake","slug":"/blog/2015/09/27/css3-mooncake","type":"blog","date":"2015-09-27"}}},{"node":{"id":"31e80902-e1a3-5bb7-a308-d7d01f260331","frontmatter":{"title":"TypeScript + Vue 踩坑纪实","description":"坑这种东西，多踩踩就平了","tags":["typescript","vue"],"cover":{"publicURL":"/static/fe6f5086d26293f21adf217a84141fd6/guide-for-vue-with-typescript.jpg"},"series":"","draft":false,"original":true},"fields":{"id":"guide-for-vue-with-typescript","slug":"/blog/2017/10/26/guide-for-vue-with-typescript","type":"blog","date":"2017-10-26"}}}]},"markdownRemark":{"id":"4d37b609-e7b3-544a-9c20-f50ace245da1","html":"<h2>杂谈</h2>\n<p>不知道是就我这样，还是大家也是，最近的内容圈子里关于 TypeScript 的文章满天飞，各种 TypeScript 有多好、多受欢迎，要不就是 TypeScript 的教程、实践。偏偏我在这时候有了写这篇文章的想法，搞得很有跟风蹭热度的嫌疑。</p>\n<p>作为一名坚持原创的作者，我并不想把市面上随手可得的东西，换一种方式再讲给大家听，这样不仅是在浪费大家的时间，也是在浪费我自己的时间。我所理解的为社区做贡献，应该是能够填补当前环境下的一些空白，去做一些真正有意义的事，而不是摆出一副资深的样子，去转发或是创造一些重复的内容。</p>\n<p>今天这篇文章，虽然有跟风的嫌疑，但我向你保证，内容依然是绝对的原创。如有巧合，那么英雄所见略同。</p>\n<h2>为什么是次日？</h2>\n<p>上手 TypeScript 并不难，有 JavaScript 基础的同学，花个一天时间过一遍文档，基本就都清楚了。如果你刚好还有 Java、C# 等后端语言的基础，那么其中关于 OOP 的一些概念相信你一定会觉得非常眼熟。</p>\n<p>如果你刚看完文档就开始准备把 TypeScript 用到项目中去，那么恭喜你，你很快就会遇到各种坑，而且你无法直接从文档中寻找到对应的解决方案。这篇文章的存在，就是希望能够填补这中间的空白，帮助各位顺利的把 TypeScript 落地到项目中。</p>\n<p>这便是标题中「次日」的由来。如果你还没有看过 TypeScript 的文档，那么这篇文章现在还不适合你，建议先收藏起来，等看完了文档再回来。</p>\n<p>如果你已经准备好了，那我们开始吧。</p>\n<h2>你或许并不需要 TypeScript</h2>\n<p>每个人接触 TypeScript 的原因不同，有的是被人安利，有的是因为团队在用，有的是因为用了 Angular。但不管因为什么入了这个坑，我们都需要明白：TypeScript 并非必须。</p>\n<p>TypeScript 适合大型项目，小型项目最好还是继续用 JavaScript。这已经是业内的一个共识。</p>\n<p>TypeScript 可以简单理解为 JavaScript + Types。从工程效率的角度上讲，Types 的部分属于额外的工作量，如果不能给项目带来足够的收益，去平衡掉其引入的成本，那么这项投入就不是很值得。</p>\n<p>如果只是官网之类的小型项目，类型不类型的并不重要，没必要为了用 TypeScript 而用 TypeScript。但随着项目的规模和复杂度的增加，代码质量、沟通成本等问题开始浮现，而这恰恰是类型系统能够解决的问题。通过类型检测，我们可以更早的发现潜在的类型错误，进行主动防御，进而提高代码质量；通过类型定义，我们可以更加直观的描述我们的数据结构，降低团队作业中的沟通成本。</p>\n<p>因此，要不要用 TypeScript，取决于你项目的类型以及规模，不要盲目跟风。</p>\n<h2>别忘了 jsDoc</h2>\n<p>很多人对 TypeScript 有一个误解，觉得有了静态类型的代码已经足够「自解释」，就不需要 jsDoc 一类的注释了。</p>\n<p>静态类型描述的是数据的结构，而注释描述的是数据的作用，两者解决的是不同的问题，彼此之间并不冲突。</p>\n<p>比如下面这段 JavaScript 代码：</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre style=\"counter-reset: linenumber NaN\" class=\"gatsby-code-js line-numbers\"><code class=\"gatsby-code-js\"><span class=\"token keyword\">function</span> <span class=\"token function\">convert</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">val<span class=\"token punctuation\">,</span> config</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token comment\">// some code</span>\n<span class=\"token punctuation\">}</span></code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span></span></pre></div>\n<p>不难看出这是一个转换函数，接收一个待转换的值，以及一个配置对象，但我们并不知道这个函数用来转换什么，配置对象又有哪些参数。</p>\n<p>现在我们用 TypeScript 来重写一下，补充一些类型定义。</p>\n<div class=\"gatsby-highlight\" data-language=\"ts\"><pre style=\"counter-reset: linenumber NaN\" class=\"gatsby-code-ts line-numbers\"><code class=\"gatsby-code-ts\"><span class=\"token keyword\">function</span> <span class=\"token function\">convert</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">val<span class=\"token operator\">:</span> <span class=\"token builtin\">string</span><span class=\"token punctuation\">,</span> config<span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span> x<span class=\"token operator\">:</span> <span class=\"token builtin\">string</span><span class=\"token punctuation\">,</span> y<span class=\"token operator\">?</span> <span class=\"token operator\">:</span><span class=\"token builtin\">boolean</span><span class=\"token punctuation\">}</span></span><span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> <span class=\"token builtin\">string</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token comment\">// some code</span>\n<span class=\"token punctuation\">}</span></code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span></span></pre></div>\n<p>现在我们知道了这是一个用于处理字符串的转换函数，配置对象有两个参数，一个是必选的字符串，一个是可选的布尔值，最后返回的也是一个字符串。但具体到业务中，这个函数用来转换什么样的字符串，我们还是不太清楚。</p>\n<div class=\"gatsby-highlight\" data-language=\"ts\"><pre style=\"counter-reset: linenumber NaN\" class=\"gatsby-code-ts line-numbers\"><code class=\"gatsby-code-ts\"><span class=\"token comment\">/**\n * @description 对手机号进行编码，隐藏其中一部分，如：13812345678 -> 138****5678\n * @param val 待编码的手机号\n * @param config 配置选项\n */</span>\n<span class=\"token keyword\">function</span> <span class=\"token function\">convert</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">val<span class=\"token operator\">:</span> <span class=\"token builtin\">string</span><span class=\"token punctuation\">,</span> config<span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span> x<span class=\"token operator\">:</span> <span class=\"token builtin\">string</span><span class=\"token punctuation\">,</span> y<span class=\"token operator\">?</span> <span class=\"token operator\">:</span><span class=\"token builtin\">boolean</span><span class=\"token punctuation\">}</span></span><span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> <span class=\"token builtin\">string</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token comment\">// some code</span>\n<span class=\"token punctuation\">}</span></code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n<p>加上注释之后，一切就都清楚了：这是一个对手机号进行编码，将其中一部分替换成其他字符，以保护用户隐私的函数。</p>\n<p>所以你看，TypeScript 并不能完全替代 jsDoc 的作用，该写的注释还是得写。</p>\n<p>当然对于上面的例子，如果是一个单纯的工具函数，我们完全可以使用更加直观的命名，比如 <code class=\"gatsby-code-text\">encodeMobile (mobile, config)</code>，但如果这是某个类中的成员函数，那么可能就不可避免地会出现示例中的写法。总之，你明白我的意思就好，就不要钻牛角尖了。</p>\n<p>对了，得益于 TypeScript 的类型系统，<code class=\"gatsby-code-text\">@param</code> 不需要再指定数据类型了，只要对变量的用途进行描述就好了。如果你配置了 Lint 工具，它也会提醒你优先使用 TypeScript 来定义类型，不要重复定义。</p>\n<h2>TSX 和 JSX</h2>\n<p>之前我们在用 JavaScript 写 React 时，对文件的扩展名没有什么特别的要求，<code class=\"gatsby-code-text\">*.js</code> 或者 <code class=\"gatsby-code-text\">*.jsx</code> 都行。</p>\n<p>但在 TypeScript 中，如果你要使用 JSX 语法，就不能使用 <code class=\"gatsby-code-text\">*.ts</code>，必须使用 <code class=\"gatsby-code-text\">*.tsx</code>。如果你不知道，或者忘了这么做，那么你会在使用了 JSX 代码的地方收到类型报错，但代码本身怎么看都没有问题。这也是刚上手 TypeScript + React 时几乎每个人都会遇到的坑。</p>\n<p>关于这一点，TypeScript 只是在官方教程的示例代码中直接用了 <code class=\"gatsby-code-text\">*.tsx</code>，但并没有明确说明这一问题。</p>\n<p>React 则在它的官方文档中说明了这一规则：</p>\n<blockquote>\n<p>In React, you most likely write your components in a <code class=\"gatsby-code-text\">.js</code> file. In TypeScript we have 2 file extensions:</p>\n<p><code class=\"gatsby-code-text\">.ts</code> is the default file extension while <code class=\"gatsby-code-text\">.tsx</code> is a special extension used for files which contain JSX.</p>\n</blockquote>\n<blockquote>\n<p>在使用 React 时，我们通常会把组件写在一个 <code class=\"gatsby-code-text\">.*js</code> 文件里。在 TypeScript 中我们有两种文件扩展名：</p>\n<p><code class=\"gatsby-code-text\">.ts</code> 是默认的文件扩展名，而 <code class=\"gatsby-code-text\">.tsx</code> 是用于包含了 JSX 的文件的特殊扩展名。</p>\n</blockquote>\n<p>其实上面这段话也没有明说在 <code class=\"gatsby-code-text\">*.ts</code> 中使用 JSX 会报错，所以即便有人看到了这段话，可能也以为只是像 <code class=\"gatsby-code-text\">*.jsx</code> 一样多了一种选择，并没有太当回事……直到遇到问题。</p>\n<h2>变量的 Type 怎么找</h2>\n<p>上手 TypeScript 之后很快我们就发现，即便是原生的 DOM、或是 React 的 API，也经常会要我们手动指定类型。但这些结构并不是简单的 JavaScript 原始类型，在使用 JavaScript 编写相关代码时候由于没有这种需要，我们也没关心过这些东西的类型，突然问起来，还真不知道这些类型叫什么名字。</p>\n<p>不光是这些标准类型，同样的问题在很多第三方的库中也会遇到，比如一些组件库会检查你传入的 Props。</p>\n<p>在我看来，这中间其实缺少了一部分的文档，来指导新用户如何找到所需要的类型。既然社区没有提供，那就我来吧。</p>\n<p>当然，让每个开发者都熟记所有的类型肯定是不现实的，总不能每接触一个新的库，就要去记一堆类型吧。放心，世界还是美好的，这种事情，当然是有方法的。</p>\n<p>最直白的方法就是去看库的 Types Definition，也就是那些 <code class=\"gatsby-code-text\">*.d.ts</code> 文件。如果你刚好有在用 VS Code 的话，有一个非常方便的操作：把鼠标移动到你想知道它类型的代码上（比如某个变量、某个函数调用，或是某个 JSX 标签、某个组件的 props），右键选择「Go to Definition」（或者光标选中后按 F12），就可以跳转到它的类型定义文件了。</p>\n<p>如果你更习惯使用 VS Code 之外的编辑器，我相信时至今日，它们应该也都早就对 TypeScript 提供了支持。具体操作我不太熟悉，你可以自己探索下（我一直用 VS Code，其它的不太熟）。</p>\n<p>一般来说，这个操作可以直接把你带到你想要的地方，但考虑到类型是可以继承的，有时候一次跳转可能不太够，遇到这种情况，那就需要你随机应变一下，沿着继承关系多跳几次，直到找到你想要的内容。</p>\n<p>对于不熟悉的类型，可以通过这个方法去寻找，慢慢熟悉以后，你会发现，一些常见的类型还是很好找的，稍微联想一下英文的表达方式，配合自动补全的提示，一般都不难找到。</p>\n<p>为了方便初学者，我们还是稍微列举一些常见的类型，找找感觉：</p>\n<h3>常见 Types 之 DOM</h3>\n<p>TypeScript 自带了一些基本的类型定义，包括 ECMAScript 和 DOM 的类型定义，所有你需要的类型都可以从这里找到。如果你想做一些「纯 TypeScript 开发」的话，有这些就够了。</p>\n<p>比如下面这张截图，就是对 <code class=\"gatsby-code-text\">&lt;div&gt;</code> 标签的类型定义。我们可以看到，它继承了更加通用的 <code class=\"gatsby-code-text\">HTMLElement</code> 类型，并且扩展了一个即将被废弃的 <code class=\"gatsby-code-text\">align</code> 属性，以及两组 <code class=\"gatsby-code-text\">addEventListener</code> 和 <code class=\"gatsby-code-text\">removeEventListener</code>，注意这里使用了重载。</p>\n<p><span\n      class=\"gatsby-resp-image-wrapper\"\n      style=\"position: relative; display: block; margin-left: auto; margin-right: auto; max-width: 960px; \"\n    >\n      <a\n    class=\"gatsby-resp-image-link\"\n    href=\"/static/59ea3ce87ce94ba6ab5dbb8d600c0fe2/4c65e/types-dom.png\"\n    style=\"display: block\"\n    target=\"_blank\"\n    rel=\"noopener\"\n  >\n    <span\n    class=\"gatsby-resp-image-background-image\"\n    style=\"padding-bottom: 68.75%; position: relative; bottom: 0; left: 0; display: block;\"\n  ></span>\n  <img\n        class=\"gatsby-resp-image-image\"\n        alt=\"types dom\"\n        title=\"types dom\"\n        src=\"/static/59ea3ce87ce94ba6ab5dbb8d600c0fe2/a91f8/types-dom.png\"\n        srcset=\"/static/59ea3ce87ce94ba6ab5dbb8d600c0fe2/072e7/types-dom.png 240w,\n/static/59ea3ce87ce94ba6ab5dbb8d600c0fe2/9aebd/types-dom.png 480w,\n/static/59ea3ce87ce94ba6ab5dbb8d600c0fe2/a91f8/types-dom.png 960w,\n/static/59ea3ce87ce94ba6ab5dbb8d600c0fe2/4c65e/types-dom.png 1127w\"\n        sizes=\"(max-width: 960px) 100vw, 960px\"\n        style=\"width:100%;height:100%;margin:0;vertical-align:middle;position:absolute;top:0;left:0;\"\n        loading=\"lazy\"\n      />\n  </a>\n    </span></p>\n<p>这里的命名也不是随便起的，都是在 <a href=\"https://developer.mozilla.org/en-US/docs/Web/API/HTMLDivElement\" target=\"_blank\" rel=\"noopener noreferrer\">MDN</a> 上可以查到的。</p>\n<p>还是以 <code class=\"gatsby-code-text\">&lt;div&gt;</code> 为例，我们已经知道它继承自 <code class=\"gatsby-code-text\">HTMLElement</code>，其实再往上，<code class=\"gatsby-code-text\">HTMLElement</code> 继承自 <code class=\"gatsby-code-text\">Element</code>，<code class=\"gatsby-code-text\">Element</code> 又继承自 <code class=\"gatsby-code-text\">Node</code>，顺着这条路，你可以挖掘出所有 HTML 标签的类型。</p>\n<p><span\n      class=\"gatsby-resp-image-wrapper\"\n      style=\"position: relative; display: block; margin-left: auto; margin-right: auto; max-width: 960px; \"\n    >\n      <a\n    class=\"gatsby-resp-image-link\"\n    href=\"/static/bfadf4ef868bc1446cd94511666171ee/3e0bb/HTMLDivElement.png\"\n    style=\"display: block\"\n    target=\"_blank\"\n    rel=\"noopener\"\n  >\n    <span\n    class=\"gatsby-resp-image-background-image\"\n    style=\"padding-bottom: 33.75%; position: relative; bottom: 0; left: 0; display: block;\"\n  ></span>\n  <img\n        class=\"gatsby-resp-image-image\"\n        alt=\"HTMLDivElement\"\n        title=\"HTMLDivElement\"\n        src=\"/static/bfadf4ef868bc1446cd94511666171ee/a91f8/HTMLDivElement.png\"\n        srcset=\"/static/bfadf4ef868bc1446cd94511666171ee/072e7/HTMLDivElement.png 240w,\n/static/bfadf4ef868bc1446cd94511666171ee/9aebd/HTMLDivElement.png 480w,\n/static/bfadf4ef868bc1446cd94511666171ee/a91f8/HTMLDivElement.png 960w,\n/static/bfadf4ef868bc1446cd94511666171ee/3e0bb/HTMLDivElement.png 1213w\"\n        sizes=\"(max-width: 960px) 100vw, 960px\"\n        style=\"width:100%;height:100%;margin:0;vertical-align:middle;position:absolute;top:0;left:0;\"\n        loading=\"lazy\"\n      />\n  </a>\n    </span></p>\n<p>对于一些 DOM 相关的属性，比如 <code class=\"gatsby-code-text\">onclick</code>、<code class=\"gatsby-code-text\">onchange</code> 等，你都可以如法炮制，找到它们的定义。</p>\n<h3>常见 Types 之 React</h3>\n<p>关于 TypeScript 的问题，有不少其实是在使用第三方库的时候遇到的，React 就是其中比较典型的一个。</p>\n<p>其实方法都一样，只不过相关的类型定义不在 TypeScript 中，而是在 <code class=\"gatsby-code-text\">@types/react</code> 中。</p>\n<p>React 的类型定义的名称其实也很直观，比如我们常见的 <code class=\"gatsby-code-text\">React.Component</code>，在定义 Class 组件时，我们需要对 Props 和 State 预先进行类型定义，为什么呢？答案就在它的类型定义中。</p>\n<p><span\n      class=\"gatsby-resp-image-wrapper\"\n      style=\"position: relative; display: block; margin-left: auto; margin-right: auto; max-width: 960px; \"\n    >\n      <a\n    class=\"gatsby-resp-image-link\"\n    href=\"/static/28cf66b5b8ab65a6857ca9971cdf20b2/22593/types-react-Component.png\"\n    style=\"display: block\"\n    target=\"_blank\"\n    rel=\"noopener\"\n  >\n    <span\n    class=\"gatsby-resp-image-background-image\"\n    style=\"padding-bottom: 110.83333333333334%; position: relative; bottom: 0; left: 0; display: block;\"\n  ></span>\n  <img\n        class=\"gatsby-resp-image-image\"\n        alt=\"types react Component\"\n        title=\"types react Component\"\n        src=\"/static/28cf66b5b8ab65a6857ca9971cdf20b2/a91f8/types-react-Component.png\"\n        srcset=\"/static/28cf66b5b8ab65a6857ca9971cdf20b2/072e7/types-react-Component.png 240w,\n/static/28cf66b5b8ab65a6857ca9971cdf20b2/9aebd/types-react-Component.png 480w,\n/static/28cf66b5b8ab65a6857ca9971cdf20b2/a91f8/types-react-Component.png 960w,\n/static/28cf66b5b8ab65a6857ca9971cdf20b2/22593/types-react-Component.png 1106w\"\n        sizes=\"(max-width: 960px) 100vw, 960px\"\n        style=\"width:100%;height:100%;margin:0;vertical-align:middle;position:absolute;top:0;left:0;\"\n        loading=\"lazy\"\n      />\n  </a>\n    </span></p>\n<p>再比如，当我们在写一些组件时，我们可能会需要向下传递 <code class=\"gatsby-code-text\">this.props.children</code>，但 <code class=\"gatsby-code-text\">children</code> 并没有被设为默认值，需要我们自己定义到 props 上，那么它的类型应该是什么呢？</p>\n<p>到类型定义中搜一下关键字 children，很快我们就找到了下面的定义：</p>\n<p><span\n      class=\"gatsby-resp-image-wrapper\"\n      style=\"position: relative; display: block; margin-left: auto; margin-right: auto; max-width: 960px; \"\n    >\n      <a\n    class=\"gatsby-resp-image-link\"\n    href=\"/static/cbfa2bc89b2793c7bca1f7914d65be95/994d6/types-react-children.png\"\n    style=\"display: block\"\n    target=\"_blank\"\n    rel=\"noopener\"\n  >\n    <span\n    class=\"gatsby-resp-image-background-image\"\n    style=\"padding-bottom: 58.75%; position: relative; bottom: 0; left: 0; display: block;\"\n  ></span>\n  <img\n        class=\"gatsby-resp-image-image\"\n        alt=\"types react children\"\n        title=\"types react children\"\n        src=\"/static/cbfa2bc89b2793c7bca1f7914d65be95/a91f8/types-react-children.png\"\n        srcset=\"/static/cbfa2bc89b2793c7bca1f7914d65be95/072e7/types-react-children.png 240w,\n/static/cbfa2bc89b2793c7bca1f7914d65be95/9aebd/types-react-children.png 480w,\n/static/cbfa2bc89b2793c7bca1f7914d65be95/a91f8/types-react-children.png 960w,\n/static/cbfa2bc89b2793c7bca1f7914d65be95/994d6/types-react-children.png 1093w\"\n        sizes=\"(max-width: 960px) 100vw, 960px\"\n        style=\"width:100%;height:100%;margin:0;vertical-align:middle;position:absolute;top:0;left:0;\"\n        loading=\"lazy\"\n      />\n  </a>\n    </span></p>\n<p>所有 React 中 JSX 所代表的内容，无论是 <code class=\"gatsby-code-text\">render()</code> 的返回，还是 <code class=\"gatsby-code-text\">children</code>，我们都可以定义为一个 <code class=\"gatsby-code-text\">ReactNode</code>。那这个 <code class=\"gatsby-code-text\">ReactNode</code> 长什么样呢？我们通过右键继续寻找：</p>\n<p><span\n      class=\"gatsby-resp-image-wrapper\"\n      style=\"position: relative; display: block; margin-left: auto; margin-right: auto; max-width: 960px; \"\n    >\n      <a\n    class=\"gatsby-resp-image-link\"\n    href=\"/static/d248f83cf376b3dd90a432c0ca06b982/97810/types-react-ReactNode.png\"\n    style=\"display: block\"\n    target=\"_blank\"\n    rel=\"noopener\"\n  >\n    <span\n    class=\"gatsby-resp-image-background-image\"\n    style=\"padding-bottom: 47.5%; position: relative; bottom: 0; left: 0; display: block;\"\n  ></span>\n  <img\n        class=\"gatsby-resp-image-image\"\n        alt=\"types react ReactNode\"\n        title=\"types react ReactNode\"\n        src=\"/static/d248f83cf376b3dd90a432c0ca06b982/a91f8/types-react-ReactNode.png\"\n        srcset=\"/static/d248f83cf376b3dd90a432c0ca06b982/072e7/types-react-ReactNode.png 240w,\n/static/d248f83cf376b3dd90a432c0ca06b982/9aebd/types-react-ReactNode.png 480w,\n/static/d248f83cf376b3dd90a432c0ca06b982/a91f8/types-react-ReactNode.png 960w,\n/static/d248f83cf376b3dd90a432c0ca06b982/97810/types-react-ReactNode.png 1089w\"\n        sizes=\"(max-width: 960px) 100vw, 960px\"\n        style=\"width:100%;height:100%;margin:0;vertical-align:middle;position:absolute;top:0;left:0;\"\n        loading=\"lazy\"\n      />\n  </a>\n    </span></p>\n<p>看到这里，我们不光找到了我们想要的类型，还顺带明白了为什么 <code class=\"gatsby-code-text\">render()</code> 可以返回 boolean、null、undefined 表示不渲染任何内容。</p>\n<p>那么事件呢？当我们给组件定义事件处理函数的时候，也经常会被要求指定类型。还是老办法，找不到咱就搜，比如 <code class=\"gatsby-code-text\">onClick</code> 不清楚，那我们就以它为关键字去搜：</p>\n<p><span\n      class=\"gatsby-resp-image-wrapper\"\n      style=\"position: relative; display: block; margin-left: auto; margin-right: auto; max-width: 960px; \"\n    >\n      <a\n    class=\"gatsby-resp-image-link\"\n    href=\"/static/b1bed6209b8d22e30dc513177859aede/1263b/types-react-onClick.png\"\n    style=\"display: block\"\n    target=\"_blank\"\n    rel=\"noopener\"\n  >\n    <span\n    class=\"gatsby-resp-image-background-image\"\n    style=\"padding-bottom: 90.41666666666666%; position: relative; bottom: 0; left: 0; display: block;\"\n  ></span>\n  <img\n        class=\"gatsby-resp-image-image\"\n        alt=\"types react onClick\"\n        title=\"types react onClick\"\n        src=\"/static/b1bed6209b8d22e30dc513177859aede/a91f8/types-react-onClick.png\"\n        srcset=\"/static/b1bed6209b8d22e30dc513177859aede/072e7/types-react-onClick.png 240w,\n/static/b1bed6209b8d22e30dc513177859aede/9aebd/types-react-onClick.png 480w,\n/static/b1bed6209b8d22e30dc513177859aede/a91f8/types-react-onClick.png 960w,\n/static/b1bed6209b8d22e30dc513177859aede/1263b/types-react-onClick.png 1000w\"\n        sizes=\"(max-width: 960px) 100vw, 960px\"\n        style=\"width:100%;height:100%;margin:0;vertical-align:middle;position:absolute;top:0;left:0;\"\n        loading=\"lazy\"\n      />\n  </a>\n    </span></p>\n<p>据此我们找到一个叫 <code class=\"gatsby-code-text\">MouseEventHandler</code> 的定义，这名字，够直白吧。</p>\n<p>好了，我们找到想要的了。不过既然来了，不如继续看一下，看看还能发现什么。我们右键 MouseEventHandler 继续往下看：</p>\n<p><span\n      class=\"gatsby-resp-image-wrapper\"\n      style=\"position: relative; display: block; margin-left: auto; margin-right: auto; max-width: 960px; \"\n    >\n      <a\n    class=\"gatsby-resp-image-link\"\n    href=\"/static/bda8aee3b0de956d1c9a557f7f6eb4a3/e26aa/types-react-EventHandler.png\"\n    style=\"display: block\"\n    target=\"_blank\"\n    rel=\"noopener\"\n  >\n    <span\n    class=\"gatsby-resp-image-background-image\"\n    style=\"padding-bottom: 88.33333333333333%; position: relative; bottom: 0; left: 0; display: block;\"\n  ></span>\n  <img\n        class=\"gatsby-resp-image-image\"\n        alt=\"types react EventHandler\"\n        title=\"types react EventHandler\"\n        src=\"/static/bda8aee3b0de956d1c9a557f7f6eb4a3/a91f8/types-react-EventHandler.png\"\n        srcset=\"/static/bda8aee3b0de956d1c9a557f7f6eb4a3/072e7/types-react-EventHandler.png 240w,\n/static/bda8aee3b0de956d1c9a557f7f6eb4a3/9aebd/types-react-EventHandler.png 480w,\n/static/bda8aee3b0de956d1c9a557f7f6eb4a3/a91f8/types-react-EventHandler.png 960w,\n/static/bda8aee3b0de956d1c9a557f7f6eb4a3/e26aa/types-react-EventHandler.png 1016w\"\n        sizes=\"(max-width: 960px) 100vw, 960px\"\n        style=\"width:100%;height:100%;margin:0;vertical-align:middle;position:absolute;top:0;left:0;\"\n        loading=\"lazy\"\n      />\n  </a>\n    </span></p>\n<p>看到了吗，所有的事件处理函数都有对应的定义，每个都需要一个泛型参数，传递了事件的类型，名称也挺直白的。</p>\n<p><span\n      class=\"gatsby-resp-image-wrapper\"\n      style=\"position: relative; display: block; margin-left: auto; margin-right: auto; max-width: 844px; \"\n    >\n      <a\n    class=\"gatsby-resp-image-link\"\n    href=\"/static/734f616478ea608009b5f36080ab57d8/4803b/types-react-Event.png\"\n    style=\"display: block\"\n    target=\"_blank\"\n    rel=\"noopener\"\n  >\n    <span\n    class=\"gatsby-resp-image-background-image\"\n    style=\"padding-bottom: 107.5%; position: relative; bottom: 0; left: 0; display: block;\"\n  ></span>\n  <img\n        class=\"gatsby-resp-image-image\"\n        alt=\"types react Event\"\n        title=\"types react Event\"\n        src=\"/static/734f616478ea608009b5f36080ab57d8/4803b/types-react-Event.png\"\n        srcset=\"/static/734f616478ea608009b5f36080ab57d8/072e7/types-react-Event.png 240w,\n/static/734f616478ea608009b5f36080ab57d8/9aebd/types-react-Event.png 480w,\n/static/734f616478ea608009b5f36080ab57d8/4803b/types-react-Event.png 844w\"\n        sizes=\"(max-width: 844px) 100vw, 844px\"\n        style=\"width:100%;height:100%;margin:0;vertical-align:middle;position:absolute;top:0;left:0;\"\n        loading=\"lazy\"\n      />\n  </a>\n    </span></p>\n<p>Ok，事件的类型也被我们挖出来了，以后如果需要单独定义一个事件相关的类型，就可以直接用了。</p>\n<p>以此类推，不管是什么东西的类型，都可以去它们对应的 <code class=\"gatsby-code-text\">@types/xxx</code> 里，按关键字搜，只要你的英语别太差，很容易就能找到。</p>\n<h2>多重 extends</h2>\n<p>我们知道 Interface 是可以多继承的，extends 后面可以跟多个其它 Interface，我们不能保证被继承的多个 Interface 一定没有重复的属性，那么当属性重复，但类型定义不同时，最终的结果会怎么样呢？</p>\n<p>在 TypeScript 中，Interface 会按照从右往左的顺序去合并多个被继承的 Interface，也就是说，同名属性，左边的会覆盖右边的。</p>\n<div class=\"gatsby-highlight\" data-language=\"typescript\"><pre style=\"counter-reset: linenumber NaN\" class=\"gatsby-code-typescript line-numbers\"><code class=\"gatsby-code-typescript\"><span class=\"token keyword\">interface</span> <span class=\"token class-name\">A</span> <span class=\"token punctuation\">{</span>\n  value<span class=\"token operator\">?</span><span class=\"token operator\">:</span> <span class=\"token builtin\">string</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">interface</span> <span class=\"token class-name\">B</span> <span class=\"token punctuation\">{</span>\n  value<span class=\"token operator\">:</span> <span class=\"token builtin\">string</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">interface</span> <span class=\"token class-name\">C</span> <span class=\"token punctuation\">{</span>\n  value<span class=\"token operator\">:</span> <span class=\"token builtin\">number</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">interface</span> <span class=\"token class-name\">D</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">A</span><span class=\"token punctuation\">,</span> <span class=\"token constant\">B</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span>\n<span class=\"token comment\">// value?: string</span>\n\n<span class=\"token keyword\">interface</span> <span class=\"token class-name\">E</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">B</span><span class=\"token punctuation\">,</span> <span class=\"token constant\">C</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span>\n<span class=\"token comment\">// value: string</span></code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n<h2><code class=\"gatsby-code-text\">obj[prop]</code> 无法访问怎么办</h2>\n<p>有时候我们会定义一些集合型的数据，例如对象、枚举等，但在调用的时候，我们未必会直接通过 <code class=\"gatsby-code-text\">obj.prop</code> 的形式去调用，可能会是以 <code class=\"gatsby-code-text\">obj[prop]</code> 这种动态索引的形式去访问，但通过动态索引的方式就无法确定最终访问的元素是否存在，因此在 TypeScript 中，默认是不允许这种操作的。</p>\n<p>但这又是个非常合理，而且非常常见的场景，怎么办呢？TypeScript 允许为类型添加索引，以实现这一点。</p>\n<div class=\"gatsby-highlight\" data-language=\"typescript\"><pre style=\"counter-reset: linenumber NaN\" class=\"gatsby-code-typescript line-numbers\"><code class=\"gatsby-code-typescript\"><span class=\"token keyword\">interface</span> <span class=\"token class-name\">Foo</span> <span class=\"token punctuation\">{</span>\n  x<span class=\"token operator\">:</span> <span class=\"token builtin\">string</span><span class=\"token punctuation\">,</span>\n  y<span class=\"token operator\">:</span> <span class=\"token builtin\">number</span>\n  <span class=\"token punctuation\">[</span>index<span class=\"token operator\">:</span> <span class=\"token builtin\">string</span><span class=\"token punctuation\">]</span><span class=\"token operator\">:</span> <span class=\"token builtin\">string</span> <span class=\"token operator\">|</span> <span class=\"token builtin\">number</span>\n<span class=\"token punctuation\">}</span></code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n<p>这个方法虽然有效，但每次都要手动为类型加索引，重复多了也挺心累的。包括在一些「配置对象」中，我们甚至无法确定有哪些类型，有没有一种更加通用、更加一劳永逸的方法。</p>\n<p>当然有。</p>\n<p>其实在 TypeScript 的官方文档中就有提到这个方案，官方管它叫 OptionBag，大概就是指 config、option 等用于提供配置信息的这么一类参数。我不是很确定这到底是个常规的英文单词，还是 TypeScript 中特定的术语（个人感觉是前者），反正就这么个意思吧。</p>\n<p>简单说来，我们可以定义下面这样一个类型：</p>\n<div class=\"gatsby-highlight\" data-language=\"typescript\"><pre style=\"counter-reset: linenumber NaN\" class=\"gatsby-code-typescript line-numbers\"><code class=\"gatsby-code-typescript\"><span class=\"token keyword\">interface</span> <span class=\"token class-name\">OptionBag</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token punctuation\">[</span>index<span class=\"token operator\">:</span> <span class=\"token builtin\">string</span><span class=\"token punctuation\">]</span><span class=\"token operator\">:</span> <span class=\"token builtin\">any</span>\n<span class=\"token punctuation\">}</span></code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span></span></pre></div>\n<p>这是一个非常通用的结构，以字符串为键，值可以是任何类型，并且支持索引 —— 这不就是 Object 么。</p>\n<p>之后所有需要动态索引的结构，或是作为配置对象的结构，都可以直接指定为，或是继承 <code class=\"gatsby-code-text\">OptionBag</code>。这个方案以牺牲一定的类型检查为代价，换取了操作上的便利。</p>\n<p>理论上讲，<code class=\"gatsby-code-text\">OptionBag</code> 可以适用于所有类似对象这样的结构，但不建议各位真就这么做。这个方案只能是用在一些对类型要求不那么严格，或是无法预知类型的场景中，能够确定的类型还是尽可能地写一下，否则就失去了使用 TypeScript 意义了。</p>\n<h2>小结</h2>\n<p>TypeScript 确实是个好东西，但世上没有绝对完美的东西，实践过程中总会有那么些阻碍完我们前进的坑。但是掉坑里并不可怕，只要有办法能爬出来，那就都不叫事儿。</p>\n<p>原创不易，坚持原创更是，希望这篇文章多少能给大家带来一些收获吧。</p>","frontmatter":{"title":"TypeScript 次日指南","description":"坑这种东西，是不会写在文档上的","cover":{"publicURL":"/static/8239307adc5ccdfc32320e1bcadb6300/typescript.jpg"},"tags":["typescript"],"series":"","draft":false},"fields":{"id":"typescript-the-second-day","date":"2019-07-28"},"headings":[{"value":"杂谈","depth":2},{"value":"为什么是次日？","depth":2},{"value":"你或许并不需要 TypeScript","depth":2},{"value":"别忘了 jsDoc","depth":2},{"value":"TSX 和 JSX","depth":2},{"value":"变量的 Type 怎么找","depth":2},{"value":"常见 Types 之 DOM","depth":3},{"value":"常见 Types 之 React","depth":3},{"value":"多重 extends","depth":2},{"value":"<code class=\"gatsby-code-text\">obj[prop]</code> 无法访问怎么办","depth":2},{"value":"小结","depth":2}],"tableOfContents":"<ul>\n<li><a href=\"/blog/2019/07/28/typescript-the-second-day/#%E6%9D%82%E8%B0%88\">杂谈</a></li>\n<li><a href=\"/blog/2019/07/28/typescript-the-second-day/#%E4%B8%BA%E4%BB%80%E4%B9%88%E6%98%AF%E6%AC%A1%E6%97%A5%EF%BC%9F\">为什么是次日？</a></li>\n<li><a href=\"/blog/2019/07/28/typescript-the-second-day/#%E4%BD%A0%E6%88%96%E8%AE%B8%E5%B9%B6%E4%B8%8D%E9%9C%80%E8%A6%81-typescript\">你或许并不需要 TypeScript</a></li>\n<li><a href=\"/blog/2019/07/28/typescript-the-second-day/#%E5%88%AB%E5%BF%98%E4%BA%86-jsdoc\">别忘了 jsDoc</a></li>\n<li><a href=\"/blog/2019/07/28/typescript-the-second-day/#tsx-%E5%92%8C-jsx\">TSX 和 JSX</a></li>\n<li>\n<p><a href=\"/blog/2019/07/28/typescript-the-second-day/#%E5%8F%98%E9%87%8F%E7%9A%84-type-%E6%80%8E%E4%B9%88%E6%89%BE\">变量的 Type 怎么找</a></p>\n<ul>\n<li><a href=\"/blog/2019/07/28/typescript-the-second-day/#%E5%B8%B8%E8%A7%81-types-%E4%B9%8B-dom\">常见 Types 之 DOM</a></li>\n<li><a href=\"/blog/2019/07/28/typescript-the-second-day/#%E5%B8%B8%E8%A7%81-types-%E4%B9%8B-react\">常见 Types 之 React</a></li>\n</ul>\n</li>\n<li><a href=\"/blog/2019/07/28/typescript-the-second-day/#%E5%A4%9A%E9%87%8D-extends\">多重 extends</a></li>\n<li><a href=\"/blog/2019/07/28/typescript-the-second-day/#code-classgatsby-code-textobjpropcode-%E6%97%A0%E6%B3%95%E8%AE%BF%E9%97%AE%E6%80%8E%E4%B9%88%E5%8A%9E\"><code class=\"gatsby-code-text\">obj[prop]</code> 无法访问怎么办</a></li>\n<li><a href=\"/blog/2019/07/28/typescript-the-second-day/#%E5%B0%8F%E7%BB%93\">小结</a></li>\n</ul>","timeToRead":12}},"pageContext":{"slug":"/blog/2019/07/28/typescript-the-second-day"}}}