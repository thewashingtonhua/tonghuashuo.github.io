{"componentChunkName":"component---src-templates-blog-post-tsx","path":"/blog/2019/08/20/understanding-rxjs","webpackCompilationHash":"","result":{"data":{"site":{"siteMetadata":{"title":"童话说","keywords":["tonghuashuo","github","front-end","javascript","typescript","react","node","washington","hua","童话","童话说","前端","博客","技术","计算机","互联网"]}},"markdownRemark":{"html":"<h2>起源</h2>\n<p>最早接触 RxJS 的概念是在当初用 Angular 的时候，本着够用就好的原则（毕竟 Angular 本身还有好多知识点），当时并没有去系统地学习 RxJS 这门技术，只知道它是「流式」的概念，数据像水一样流经各种管道，可以像数组一样链式调用一些方法，还有类似订阅者模式的 <code class=\"gatsby-code-text\">subscribe()</code> 函数。</p>\n<p>后来 Angular 英雄末路，React 和 Vue 异军突起，无论 Redux 还是 VueX 都跟 RxJS 没什么关系，我也就没再和 RxJS 有任何交集。直到现在，因为工作原因，团队的技术栈使用了 RxJS，终于再续前缘，正式开始了解这位熟悉的陌生人。</p>\n<h2>版本</h2>\n<p>本文基于 RxJS 6 进行叙述，RxJS 6 相比 RxJS 5 有较多的 Breaking Change，语法上也有较大差异，所以特别申明一下。</p>\n<p>新版本在核心概念上没有本质的变化，但是对语法进行了统一，新语法也更加符合语言本身的发展方向，导出的目录结构也更加简洁。推荐有条件的小伙伴尽早迁移至新版。</p>\n<h2>Reactive</h2>\n<h2>对比</h2>\n<h3>Observable vs. Function</h3>\n<p>拉取和推送，只能返回单个值 vs 可返回多个值</p>\n<h3>Observable vs. Iterator / Generator</h3>\n<p>同样可返回多个值，拉取和推送的区别</p>\n<h3>Observable vs. Promise</h3>\n<p>同样是推送，只能返回单个值 vs 可返回多个值，同步和异步的区别</p>\n<h3>汇总对比</h3>\n<table>\n<thead>\n<tr>\n<th></th>\n<th>Function</th>\n<th>Iterator / Generator</th>\n<th>Promise</th>\n<th>Observable</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>数据获取方式</td>\n<td>拉取</td>\n<td>拉取</td>\n<td>推送</td>\n<td>推送</td>\n</tr>\n<tr>\n<td>随时间返回值数量</td>\n<td>单个值</td>\n<td>多个值</td>\n<td>单个值</td>\n<td>多个值</td>\n</tr>\n<tr>\n<td>同步/异步</td>\n<td>同步</td>\n<td>同步</td>\n<td>异步</td>\n<td>同步</td>\n</tr>\n</tbody>\n</table>\n<h2>什么叫「可被观察」</h2>\n<h2>「观察者」又是谁</h2>\n<h2>没有观众，就没有演出 —— 订阅</h2>\n<h2>退票没戏，但退订可以</h2>\n<h2>Subject</h2>\n<p>多播</p>\n<h3>观察者模式</h3>\n<h3>订阅者模式</h3>\n<h2>Scheduler</h2>\n<p>用自己理解说明几种调度器的不同</p>\n<h2>Operators</h2>\n<p>更好的分类方式？</p>\n<p>Decision Tree ？</p>\n<h2>联想到 Hooks</h2>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre style=\"counter-reset: linenumber NaN\" class=\"gatsby-code-javascript line-numbers\"><code class=\"gatsby-code-javascript\"><span class=\"token keyword\">const</span> observable <span class=\"token operator\">=</span> Rx<span class=\"token punctuation\">.</span>Observable<span class=\"token punctuation\">.</span><span class=\"token function\">create</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">observer</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token comment\">// 追踪 interval 资源</span>\n  <span class=\"token keyword\">const</span> intervalID <span class=\"token operator\">=</span> <span class=\"token function\">setInterval</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n    observer<span class=\"token punctuation\">.</span><span class=\"token function\">next</span><span class=\"token punctuation\">(</span><span class=\"token string\">'hi'</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1000</span><span class=\"token punctuation\">)</span>\n\n  <span class=\"token comment\">// 提供取消和清理 interval 资源的方法</span>\n  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n    <span class=\"token function\">clearInterval</span><span class=\"token punctuation\">(</span>intervalID<span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span></code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n<p>看，像不像 <code class=\"gatsby-code-text\">React.useEffect()</code> 的写法。</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre style=\"counter-reset: linenumber NaN\" class=\"gatsby-code-javascript line-numbers\"><code class=\"gatsby-code-javascript\"><span class=\"token function\">useEffect</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token comment\">// 追踪 interval 资源</span>\n  <span class=\"token keyword\">const</span> intervalID <span class=\"token operator\">=</span> <span class=\"token function\">setInterval</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'hi'</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1000</span><span class=\"token punctuation\">)</span>\n\n  <span class=\"token comment\">// 提供取消和清理 interval 资源的方法</span>\n  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n    <span class=\"token function\">clearInterval</span><span class=\"token punctuation\">(</span>intervalID<span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span></code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n<h2>标准化</h2>\n<p>社区已经<a href=\"https://github.com/tc39/proposal-observable\" target=\"_blank\" rel=\"noopener noreferrer\">提案将 Observable 纳入 ECMAScript 标准</a>，但目前该提案仍处于 Stage 1，且已经有日子没动静了。或许是 RxJS 作为目前众多 Observable 实现中事实上的标准，已经做得太好了，大家也已经习惯用它了，觉得有的用就好了，进不进标准影响不大。</p>","frontmatter":{"title":"大白话学习 RxJS","description":"不用不知道——真香","cover":{"publicURL":"/static/rxjs-34df4ece6d5ae84dbdf2d6519097e6c7.jpg"},"tags":["rxjs"],"series":"","draft":true},"fields":{"id":"understanding-rxjs","date":"2019-08-19T16:00:00.000Z"}}},"pageContext":{"isCreatedByStatefulCreatePages":false,"slug":"/blog/2019/08/20/understanding-rxjs"}}}