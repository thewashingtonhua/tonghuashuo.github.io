{"componentChunkName":"component---src-templates-blog-post-tsx","path":"/blog/2019/02/15/how-to-think-in-hooks","result":{"data":{"site":{"siteMetadata":{"title":"童话说","keywords":["tonghuashuo","github","front-end","javascript","typescript","react","node","washington","hua","童话","童话说","前端","博客","技术","计算机","互联网"]}},"allMarkdownRemark":{"totalCount":77,"edges":[{"node":{"id":"eb774da5-3c5b-5dc1-bf6d-9f1ec040e222","frontmatter":{"title":"CSS Scan","description":"VSCode 扩展，自动补全 CSS 变量","tags":null,"cover":{"publicURL":"/static/72e94c39ebb670dd23625675c0a22ace/blank.jpg"},"series":null,"draft":true,"original":null},"fields":{"id":"css-scan","slug":"/project/css-scan","type":"project","date":null}}},{"node":{"id":"52c14666-2e1f-5d9d-8200-41713b54c39a","frontmatter":{"title":"FBC","description":"联合办公空间的会员服务","tags":null,"cover":{"publicURL":"/static/73b8b250e607c97c493edf1b542345fa/fbc.jpg"},"series":null,"draft":false,"original":null},"fields":{"id":"fbc","slug":"/project/fbc","type":"project","date":null}}},{"node":{"id":"1c347cf5-624a-553b-9ba1-5200bcbe404e","frontmatter":{"title":"Fridge","description":"Teambition 设计资产速查工具","tags":null,"cover":{"publicURL":"/static/97b869f04b74e763be87e4369e4690e3/fridge.jpg"},"series":null,"draft":true,"original":null},"fields":{"id":"fridge","slug":"/project/fridge","type":"project","date":null}}},{"node":{"id":"f6124abb-a556-558d-8053-b55bda280fc3","frontmatter":{"title":"Github-Flutter","description":"基于 Flutter 开发的 Github 客户端","tags":null,"cover":{"publicURL":"/static/72e94c39ebb670dd23625675c0a22ace/blank.jpg"},"series":null,"draft":true,"original":null},"fields":{"id":"github-flutter","slug":"/project/github-flutter","type":"project","date":null}}},{"node":{"id":"e66d25c0-b3d3-5be1-b1ce-8b3cc5796db0","frontmatter":{"title":"INEX 影力所","description":"泛娱乐领域的垂直数字货币交易所","tags":null,"cover":{"publicURL":"/static/40ff0dfa20bfd2e8e2b2ea8abb900b5b/inex.jpg"},"series":null,"draft":false,"original":null},"fields":{"id":"inex","slug":"/project/inex","type":"project","date":null}}},{"node":{"id":"deb4a6cb-73b2-5ef6-a124-4315ff0ea7a6","frontmatter":{"title":"Teamedia","description":"Teambition 出品的网盘应用","tags":null,"cover":{"publicURL":"/static/a5318825484a23816f7831bab7f12d82/teamedia.jpg"},"series":null,"draft":true,"original":null},"fields":{"id":"teamedia","slug":"/project/teamedia","type":"project","date":null}}},{"node":{"id":"49b65e31-f0a3-5d35-8eca-75779aea26b7","frontmatter":{"title":"小书签","description":"让 Chrome 的书签更好用","tags":null,"cover":{"publicURL":"/static/72e94c39ebb670dd23625675c0a22ace/blank.jpg"},"series":null,"draft":true,"original":null},"fields":{"id":"the-collector","slug":"/project/the-collector","type":"project","date":null}}},{"node":{"id":"55b24908-59a1-5e57-9e8b-179b74161064","frontmatter":{"title":"小图标","description":"一站式 Favicon 解决方案","tags":null,"cover":{"publicURL":"/static/72e94c39ebb670dd23625675c0a22ace/blank.jpg"},"series":null,"draft":true,"original":null},"fields":{"id":"the-favicon","slug":"/project/the-favicon","type":"project","date":null}}},{"node":{"id":"57655088-0ae6-54b7-aa97-c9df05e9a957","frontmatter":{"title":"小扫描","description":"磁盘占用一眼","tags":null,"cover":{"publicURL":"/static/72e94c39ebb670dd23625675c0a22ace/blank.jpg"},"series":null,"draft":true,"original":null},"fields":{"id":"the-scanner","slug":"/project/the-scanner","type":"project","date":null}}},{"node":{"id":"2fbcc3fe-6081-5ea1-a85b-af0ad5891342","frontmatter":{"title":"小剧透","description":"Web 版「剧情连拍」","tags":null,"cover":{"publicURL":"/static/72e94c39ebb670dd23625675c0a22ace/blank.jpg"},"series":null,"draft":true,"original":null},"fields":{"id":"the-spoiler","slug":"/project/the-spoiler","type":"project","date":null}}},{"node":{"id":"620f5a4f-5f68-5c8c-adb5-d9ce78e36ce7","frontmatter":{"title":"Thoughts 所思","description":"Teambition 出品的企业知识管理应用","tags":null,"cover":{"publicURL":"/static/faff3495c115cab9b6fd951f3c6b96f9/thoughts.jpg"},"series":null,"draft":false,"original":null},"fields":{"id":"thoughts","slug":"/project/thoughts","type":"project","date":null}}},{"node":{"id":"730b99c7-1786-5732-996d-7e988979e77a","frontmatter":{"title":"新阅","description":"在线视频协作平台","tags":null,"cover":{"publicURL":"/static/64b35564f5bc639232b66b6559065b31/xinyue.jpg"},"series":null,"draft":false,"original":null},"fields":{"id":"xinyue","slug":"/project/xinyue","type":"project","date":null}}},{"node":{"id":"6f125f9c-2618-512e-9a71-4df69bf960f8","frontmatter":{"title":"提效 50%，榨干 webpack","description":"我们的目标是：榨干 webpack","tags":["webpack"],"cover":{"publicURL":"/static/d221320d45d5d7ac530fe7af1ab4cd79/blank.jpg"},"series":"","draft":true,"original":true},"fields":{"id":"speed-up-your-build","slug":"/blog/2020/02/20/speed-up-your-build","type":"blog","date":"2020-02-20"}}},{"node":{"id":"ffd2167f-246b-54a5-8ac1-75e907753ef5","frontmatter":{"title":"Xshowroom 买手圈","description":"时尚业专业买手服务平台","tags":null,"cover":{"publicURL":"/static/72ea2ae7921cb5aa0b3b4f56578ed2b9/xshowroom.jpg"},"series":null,"draft":false,"original":null},"fields":{"id":"xshowroom","slug":"/project/xshowroom","type":"project","date":null}}},{"node":{"id":"4b88a8c7-531c-5d5a-88c2-0248abe7825c","frontmatter":{"title":"再来聊聊前端面试","description":"人嘛，总是在不断的试错中成长起来的","tags":["interview"],"cover":{"publicURL":"/static/c6ee2544d5e90e8349ec2b751c37e298/interview.jpg"},"series":"","draft":true,"original":true},"fields":{"id":"thoughts-about-fe-interview","slug":"/blog/2020/01/20/thoughts-about-fe-interview","type":"blog","date":"2020-01-20"}}},{"node":{"id":"e3e16ec9-50ee-5e7f-8b5a-3a58b94f5e26","frontmatter":{"title":"聊聊「深色模式」","description":"你说的黑不是黑，你说的暗是什么暗","tags":["design","dark"],"cover":{"publicURL":"/static/d221320d45d5d7ac530fe7af1ab4cd79/blank.jpg"},"series":"","draft":true,"original":true},"fields":{"id":"dark-mode","slug":"/blog/2020/03/15/dark-mode","type":"blog","date":"2020-03-15"}}},{"node":{"id":"9b1edfe0-1c9a-5870-a750-4d415456e0fd","frontmatter":{"title":"Flutter 扫雷记","description":"穿上新买的鞋，走上复古的小路","tags":["flutter"],"cover":{"publicURL":"/static/b6ce1e63c11d6fddd7a988bfb312deb5/flutter.jpg"},"series":"","draft":true,"original":true},"fields":{"id":"learning-flutter","slug":"/blog/2020/04/03/learning-flutter","type":"blog","date":"2020-04-03"}}},{"node":{"id":"b947a112-1719-5c1e-973b-2857833f2145","frontmatter":{"title":"我的数组返回了啥","description":"功夫再高，一针下去也得倒","tags":["javascript","array"],"cover":{"publicURL":"/static/805a58ee0da37d1812988339eb18df47/array.jpg"},"series":"","draft":true,"original":true},"fields":{"id":"what-does-my-array-return","slug":"/blog/2020/02/30/what-does-my-array-return","type":"blog","date":"2020-02-30"}}},{"node":{"id":"d4daf12f-fd60-5e74-b1ba-c346c84a8d92","frontmatter":{"title":"「童话说」又改版啦","description":"只为遇见更好的自己","tags":["blog","4.0","update"],"cover":{"publicURL":"/static/d221320d45d5d7ac530fe7af1ab4cd79/blank.jpg"},"series":"","draft":true,"original":true},"fields":{"id":"introducing-ths-v4","slug":"/blog/2020/03/15/introducing-ths-v4","type":"blog","date":"2020-03-15"}}},{"node":{"id":"6f7cc28d-7a7b-5a2d-b66b-428c0f78abc5","frontmatter":{"title":"为什么我们总是在不断地造轮子","description":"圆的圆的圆的东西","tags":["thinking"],"cover":{"publicURL":"/static/120fefa8e824de66889cf2e45b746ebe/wheel.jpg"},"series":"","draft":true,"original":true},"fields":{"id":"why-do-we-keep-building-wheels","slug":"/blog/2020/05/10/why-do-we-keep-building-wheels","type":"blog","date":"2020-05-10"}}},{"node":{"id":"7895e729-cfea-58a7-87b8-d720f3130851","frontmatter":{"title":"GraphQL：从起飞到落地","description":"你经手的下一个项目，很可能就有它","tags":["design"],"cover":{"publicURL":"/static/d221320d45d5d7ac530fe7af1ab4cd79/blank.jpg"},"series":"","draft":true,"original":true},"fields":{"id":"adopting-graphql","slug":"/blog/2020/08/10/adopting-graphql","type":"blog","date":"2020-08-10"}}},{"node":{"id":"711fcaa8-350a-581f-9182-83af7a066ef3","frontmatter":{"title":"设计一套乐观更新机制","description":"做人呐，最重要的就是乐观啦","tags":["design","optimistic","update"],"cover":{"publicURL":"/static/92603cdac7e5c420caea18ea2c459646/optimistic-update.jpg"},"series":"","draft":false,"original":true},"fields":{"id":"building-an-optimisic-update-mechanism","slug":"/blog/2020/07/13/building-an-optimisic-update-mechanism","type":"blog","date":"2020-07-13"}}},{"node":{"id":"d3336392-f32b-5510-a57b-101ed2d0d909","frontmatter":{"title":"基于 Sass 的主题定制方案","description":"本以为很简单的事情，然而……","tags":["css","sass","theme"],"cover":{"publicURL":"/static/d221320d45d5d7ac530fe7af1ab4cd79/blank.jpg"},"series":"","draft":true,"original":true},"fields":{"id":"custom-theme","slug":"/blog/2020/05/31/custom-theme","type":"blog","date":"2020-05-31"}}},{"node":{"id":"aad2bb3c-97c8-5c46-9510-206a702aef93","frontmatter":{"title":"Fridge 背后的故事","description":"能动手的，咱们尽量别吵吵","tags":["electron","iconfont","svg","fridge"],"cover":{"publicURL":"/static/d221320d45d5d7ac530fe7af1ab4cd79/blank.jpg"},"series":"","draft":true,"original":true},"fields":{"id":"story-behind-fridge","slug":"/blog/2020/08/11/story-behind-fridge","type":"blog","date":"2020-08-11"}}},{"node":{"id":"93194ae7-8949-5ba1-96f6-5935a746f504","frontmatter":{"title":"除了 SSR，就没有别的办法了吗","description":"当 MVVM 遇上 SEO，该如何是好","tags":["static","site","gatsby","pug"],"cover":{"publicURL":"/static/c2ac5cf49eafd77a1b2ce1fab7f53515/explore-static-site-generation.jpg"},"series":"","draft":false,"original":true},"fields":{"id":"explore-static-site-generation","slug":"/blog/2019/02/07/explore-static-site-generation","type":"blog","date":"2019-02-07"}}},{"node":{"id":"5438f8b3-6d57-508a-bfb4-668398c3fea0","frontmatter":{"title":"你可能已经知道的 ES 2018 和 2019","description":"好饭不怕晚","tags":["ecmascript","2018","2019"],"cover":{"publicURL":"/static/5646b4878e533cd7c725ce4c17984071/es2019.jpg"},"series":"","draft":false,"original":true},"fields":{"id":"es2018-and-es2019","slug":"/blog/2019/02/11/es2018-and-es2019","type":"blog","date":"2019-02-11"}}},{"node":{"id":"1c7d5f58-bf2f-52ca-88b0-c53c8e639257","frontmatter":{"title":"如何 Think in Hooks","description":"差不多是时候该换换脑子了","tags":["react","hooks"],"cover":{"publicURL":"/static/26d13ef2591ee05a3c4bba7fc34daa88/think-in-hooks.jpg"},"series":"","draft":false,"original":true},"fields":{"id":"how-to-think-in-hooks","slug":"/blog/2019/02/15/how-to-think-in-hooks","type":"blog","date":"2019-02-15"}}},{"node":{"id":"1380bd6b-1af2-5b4b-a1ba-b2306f104cca","frontmatter":{"title":"【译】我们为什么要写 super(props)?","description":"好像知道，又好像不知道","tags":["react"],"cover":{"publicURL":"/static/9fbf74366dc5b9e4aab57572a9f0470d/overreacted.jpg"},"series":"overreacted","draft":false,"original":false},"fields":{"id":"why-do-we-write-super-props","slug":"/blog/2019/02/22/why-do-we-write-super-props","type":"blog","date":"2019-02-22"}}},{"node":{"id":"7e2c164b-3855-5c39-9077-10a1c6d95461","frontmatter":{"title":"【译】React 如何区分 Class 和 Function？","description":"所谓的简单，只是因为有人帮你把复杂的问题给解决掉了","tags":["react"],"cover":{"publicURL":"/static/9fbf74366dc5b9e4aab57572a9f0470d/overreacted.jpg"},"series":"overreacted","draft":false,"original":false},"fields":{"id":"how-does-react-tell-a-class-from-a-function","slug":"/blog/2019/03/06/how-does-react-tell-a-class-from-a-function","type":"blog","date":"2019-03-06"}}},{"node":{"id":"273757fd-f6c0-5927-a4a5-8ad1d5a0fe08","frontmatter":{"title":"探索 React 组件之间的生命周期","description":"有时候，生活就是一团麻","tags":["react","lifecycle"],"cover":{"publicURL":"/static/0edf69056144aaf512a28d0670b53b57/react-lifecycle.jpg"},"series":"","draft":false,"original":true},"fields":{"id":"react-lifecycle","slug":"/blog/2019/05/02/react-lifecycle","type":"blog","date":"2019-05-02"}}},{"node":{"id":"aa911d0a-c6f8-5b75-a468-7b98fec25ce4","frontmatter":{"title":"重新 Think in Hooks","description":"忘记过去之所学，我们从头来过","tags":["react","hooks"],"cover":{"publicURL":"/static/f9fcd719dcab55af4a1ad3d3cfbe0585/rethink-in-hooks.jpg"},"series":"","draft":false,"original":true},"fields":{"id":"rethink-in-hooks","slug":"/blog/2019/05/27/rethink-in-hooks","type":"blog","date":"2019-05-27"}}},{"node":{"id":"da18a414-9b36-5dc7-92d5-792baf93a0ec","frontmatter":{"title":"TypeScript 次日指南","description":"坑这种东西，是不会写在文档上的","tags":["typescript"],"cover":{"publicURL":"/static/8239307adc5ccdfc32320e1bcadb6300/typescript.jpg"},"series":"","draft":false,"original":true},"fields":{"id":"typescript-the-second-day","slug":"/blog/2019/07/28/typescript-the-second-day","type":"blog","date":"2019-07-28"}}},{"node":{"id":"1689b67b-a5fc-5bd1-92ec-437e8651321b","frontmatter":{"title":"TypeScript：又一个终将逝去的青春","description":"你，轰轰烈烈地来；你，平平淡淡地走。","tags":["typescript"],"cover":{"publicURL":"/static/b7b7642447ca6a5b28abf9f90bf06ef8/typescript-another-fading-youth.jpg"},"series":"","draft":false,"original":true},"fields":{"id":"typescript-another-fading-youth","slug":"/blog/2019/10/10/typescript-another-fading-youth","type":"blog","date":"2019-10-10"}}},{"node":{"id":"a36d090f-1508-57bd-9957-902b4d03d960","frontmatter":{"title":"Homebrew 也有后悔药：回退一次小版本更新","description":"有了后悔药，可劲随便造","tags":["homebrew"],"cover":{"publicURL":"/static/2cd1cc709ca5d68b1a1fb9eb6283b820/homebrew.jpg"},"series":"","draft":false,"original":true},"fields":{"id":"how-to-downgrade-from-homebrew","slug":"/blog/2019/10/11/how-to-downgrade-from-homebrew","type":"blog","date":"2019-10-11"}}},{"node":{"id":"7cad0010-d083-5470-9782-5bf8effe4971","frontmatter":{"title":"一个非著名前端开发者的 2019","description":"感谢曾经努力的自己","tags":["summary","2019","2020"],"cover":{"publicURL":"/static/1011f23d2ed2635035a07878c03ed1da/summary-2019.jpg"},"series":"summary","draft":false,"original":true},"fields":{"id":"summary-2019","slug":"/blog/2019/12/31/summary-2019","type":"blog","date":"2019-12-31"}}},{"node":{"id":"d76a7f7d-008f-5bb2-a930-639213185d5c","frontmatter":{"title":"每天一点ES6(14)：Iterator","description":"遍历也能搞出花来，怎么遍历你说了算","tags":["ecmascript","2015","es6","javascript","iterator","generator"],"cover":{"publicURL":"/static/0950334fb8899f1006423341cbfeecb9/es6daily.jpg"},"series":"es6daily","draft":false,"original":true},"fields":{"id":"es6-daily-14-iterator","slug":"/blog/2018/02/28/es6-daily-14-iterator","type":"blog","date":"2018-02-28"}}},{"node":{"id":"e534c1a6-0c0c-5fea-a0b2-f1abb3d10d3f","frontmatter":{"title":"每天一点ES6(15)：Promise","description":"对你的承诺，永远不变","tags":["ecmascript","2015","es6","javascript","promise"],"cover":{"publicURL":"/static/0950334fb8899f1006423341cbfeecb9/es6daily.jpg"},"series":"es6daily","draft":false,"original":true},"fields":{"id":"es6-daily-15-promise","slug":"/blog/2018/03/04/es6-daily-15-promise","type":"blog","date":"2018-03-04"}}},{"node":{"id":"2f1ddce6-841e-55c2-a557-50b5ec3c3713","frontmatter":{"title":"每天一点ES6(16)：Generator","description":"一起来摩擦摩擦发电吧","tags":["ecmascript","2015","es6","javascript","promise"],"cover":{"publicURL":"/static/0950334fb8899f1006423341cbfeecb9/es6daily.jpg"},"series":"es6daily","draft":false,"original":true},"fields":{"id":"es6-daily-16-generator","slug":"/blog/2018/06/14/es6-daily-16-generator","type":"blog","date":"2018-06-14"}}},{"node":{"id":"2c5d0720-ba96-51b5-b9c5-09ee319ac666","frontmatter":{"title":"TradingView + WebSocket 脱坑指南","description":"让我来告诉你，K 线到底该怎么画","tags":["tradingview","chart","library","guide","websocket","webworker","ohlc","kchart"],"cover":{"publicURL":"/static/1ceaf53d99815784a18273970e741bfd/tradingview.jpg"},"series":"","draft":false,"original":true},"fields":{"id":"tradingview-charting-library-simple-guide","slug":"/blog/2018/09/22/tradingview-charting-library-simple-guide","type":"blog","date":"2018-09-22"}}},{"node":{"id":"fe9e19f8-efc1-5d7b-b35e-c2e504114e3a","frontmatter":{"title":"每天一点ES6(17)：Async / Await","description":"异步？先等等！","tags":["ecmascript","2015","es6","javascript","async","await","generator"],"cover":{"publicURL":"/static/0950334fb8899f1006423341cbfeecb9/es6daily.jpg"},"series":"es6daily","draft":false,"original":true},"fields":{"id":"es6-daily-17-async-await","slug":"/blog/2018/10/06/es6-daily-17-async-await","type":"blog","date":"2018-10-06"}}},{"node":{"id":"902bdc4e-f005-5757-8b6c-1a7b5a9bbfac","frontmatter":{"title":"每天一点ES6(18)：Class","description":"这回总没人质疑 JS 不是面向对象了吧？","tags":["ecmascript","2015","es6","javascript","class"],"cover":{"publicURL":"/static/0950334fb8899f1006423341cbfeecb9/es6daily.jpg"},"series":"es6daily","draft":false,"original":true},"fields":{"id":"es6-daily-18-class","slug":"/blog/2018/12/17/es6-daily-18-class","type":"blog","date":"2018-12-17"}}},{"node":{"id":"916ca434-4243-579e-bfc0-9619e1ec5e24","frontmatter":{"title":"一个非著名前端开发者的 2018","description":"资本寒冬大概是属燕子的吧，一到年末出现","tags":["summary","2018","2019"],"cover":{"publicURL":"/static/0e9c38c3d5d6b94d53a8dee2a7bdfbae/summary-2018.jpg"},"series":"summary","draft":false,"original":true},"fields":{"id":"summary-2018","slug":"/blog/2018/12/31/summary-2018","type":"blog","date":"2018-12-31"}}},{"node":{"id":"6bf194a4-a039-5e1f-b22c-d5d61bde30fb","frontmatter":{"title":"每天一点ES6(19)：Module","description":"可能是 ES6 中对未来影响最大的一项改变","tags":["ecmascript","2015","es6","javascript","module","import","export"],"cover":{"publicURL":"/static/0950334fb8899f1006423341cbfeecb9/es6daily.jpg"},"series":"es6daily","draft":false,"original":true},"fields":{"id":"es6-daily-19-module","slug":"/blog/2018/12/19/es6-daily-19-module","type":"blog","date":"2018-12-19"}}},{"node":{"id":"034170ee-35c3-5e70-97bd-1be86317f096","frontmatter":{"title":"解决 macOS 下 MySQL 2002 错误","description":"MySQL 真是个磨人的小妖精","tags":["mac","mysql","2002"],"cover":{"publicURL":"/static/6f1abf9c085f6538df6bced86e008157/mysql-error-2002.jpg"},"series":"","draft":false,"original":true},"fields":{"id":"mysql-error-2002","slug":"/blog/2017/02/07/mysql-error-2002","type":"blog","date":"2017-02-07"}}},{"node":{"id":"14303392-eb0b-52ed-bbdd-b99f7e55381c","frontmatter":{"title":"记 new Date().toString() 的一个坑","description":"万万没想到，竟在这里踩了个坑……","tags":["javascript","date","tostring"],"cover":{"publicURL":"/static/e192283893c7e97feb631571134bb805/date-tostring.jpg"},"series":"","draft":false,"original":true},"fields":{"id":"a-pit-in-date-tostring","slug":"/blog/2017/03/08/a-pit-in-date-tostring","type":"blog","date":"2017-03-08"}}},{"node":{"id":"14d7c2fb-7a6d-587c-8ef2-268e8dd08821","frontmatter":{"title":"PHP 处理多源 CORS 的解决办法","description":"一个老生常谈的话题，碰到了顺便记录一下","tags":["php","cors"],"cover":{"publicURL":"/static/77fc63594cf3a06c31921df671acd258/cors.jpg"},"series":"","draft":false,"original":true},"fields":{"id":"multi-origin-cors-with-php","slug":"/blog/2017/03/30/multi-origin-cors-with-php","type":"blog","date":"2017-03-30"}}},{"node":{"id":"d7c2c685-5279-5f45-a60e-ac1bedb7ad3b","frontmatter":{"title":"iOS 下 click() 无效的问题","description":"iOS这个傲娇的小公举","tags":["ios","click"],"cover":{"publicURL":"/static/f79051a5758b8a973902b2e5d190b714/ios-click.jpg"},"series":"","draft":false,"original":true},"fields":{"id":"unable-to-trigger-click-on-ios","slug":"/blog/2017/03/31/unable-to-trigger-click-on-ios","type":"blog","date":"2017-03-31"}}},{"node":{"id":"25b0a05a-f39a-5475-b2fb-6e890024a76f","frontmatter":{"title":"每天一点ES6(10)：对象的扩展","description":"迟来的更新……","tags":["ecmascript","2015","es6","javascript","object"],"cover":{"publicURL":"/static/0950334fb8899f1006423341cbfeecb9/es6daily.jpg"},"series":"es6daily","draft":false,"original":true},"fields":{"id":"es6-daily-10-object","slug":"/blog/2017/04/05/es6-daily-10-object","type":"blog","date":"2017-04-05"}}},{"node":{"id":"3c675b7a-e654-516b-a3e2-84f8428baf16","frontmatter":{"title":"Webpack \"Invalid Host Header\"","description":"更新有风险，更新需谨慎……","tags":["webpack","dev","server","invalid","host"],"cover":{"publicURL":"/static/977bc2ebe23a9b6b10fdac4b470847b8/webpack-dev-server.jpg"},"series":"","draft":false,"original":true},"fields":{"id":"webpack-dev-server-invalid-host-header","slug":"/blog/2017/05/04/webpack-dev-server-invalid-host-header","type":"blog","date":"2017-05-04"}}},{"node":{"id":"841173f9-3c99-5b6d-90b0-edc1bc03200d","frontmatter":{"title":"Leetcode 第一刷：Two Sum","description":"都闪开，我要开始装逼了","tags":["leetcode","two","sum"],"cover":{"publicURL":"/static/1aa86b8eea674fca29117e535cfba751/leetcode.jpg"},"series":"","draft":false,"original":true},"fields":{"id":"leetcode-01-two-sum","slug":"/blog/2017/04/11/leetcode-01-two-sum","type":"blog","date":"2017-04-11"}}},{"node":{"id":"28a799ed-61ac-5c52-ac1f-57be84d09783","frontmatter":{"title":"每天一点ES6(11)：Symbol","description":"原始类型家族的新成员","tags":["ecmascript","2015","es6","javascript","symbol"],"cover":{"publicURL":"/static/0950334fb8899f1006423341cbfeecb9/es6daily.jpg"},"series":"es6daily","draft":false,"original":true},"fields":{"id":"es6-daily-11-symbol","slug":"/blog/2017/07/02/es6-daily-11-symbol","type":"blog","date":"2017-07-02"}}},{"node":{"id":"6bcc4eb9-0018-5fd7-9319-75b1666de383","frontmatter":{"title":"每天一点ES6(12)：Set 和 Map","description":"多余的，一概不要","tags":["ecmascript","2015","es6","javascript","map","set"],"cover":{"publicURL":"/static/0950334fb8899f1006423341cbfeecb9/es6daily.jpg"},"series":"es6daily","draft":false,"original":true},"fields":{"id":"es6-daily-12-set-and-map","slug":"/blog/2017/07/03/es6-daily-12-set-and-map","type":"blog","date":"2017-07-03"}}},{"node":{"id":"03a55c90-b656-5fbe-9802-7bacfc9dfda6","frontmatter":{"title":"Electron 安装出坑指南","description":"世界本无坑，用的人多了，也就有了坑","tags":["electron"],"cover":{"publicURL":"/static/a9838665d68ab68d327e48d8720bac3f/electron.jpg"},"series":"","draft":false,"original":true},"fields":{"id":"electron-install-guide","slug":"/blog/2017/07/06/electron-install-guide","type":"blog","date":"2017-07-06"}}},{"node":{"id":"429d3de7-b673-59b4-9374-bd47be2d84e8","frontmatter":{"title":"ECMAScript 2017 正式到来","description":"ES 的世界开始日趋平静","tags":["ecmascript","2017","es8","javascript"],"cover":{"publicURL":"/static/77b7677386d27526bcb0b2687218f3f1/es2017.jpg"},"series":"","draft":false,"original":true},"fields":{"id":"ecmascript-2017-is-here","slug":"/blog/2017/07/12/ecmascript-2017-is-here","type":"blog","date":"2017-07-12"}}},{"node":{"id":"941cfa8a-fc4c-558a-81b8-6eaeedcd29c8","frontmatter":{"title":"童话说 V2.0 改版小结","description":"时隔多年，终于换新面貌了","tags":["blog","2.0","update"],"cover":{"publicURL":"/static/630ee6fc7ad1be564eebffb0e0dd447d/introducing-ths-v2.jpg"},"series":"","draft":false,"original":true},"fields":{"id":"introducing-ths-v2","slug":"/blog/2017/08/12/introducing-ths-v2","type":"blog","date":"2017-08-12"}}},{"node":{"id":"ad555a36-adb9-5bd6-b1f5-6f3c4640c27b","frontmatter":{"title":"TypeScript + Vue 踩坑纪实","description":"坑这种东西，多踩踩就平了","tags":["typescript","vue"],"cover":{"publicURL":"/static/fe6f5086d26293f21adf217a84141fd6/guide-for-vue-with-typescript.jpg"},"series":"","draft":false,"original":true},"fields":{"id":"guide-for-vue-with-typescript","slug":"/blog/2017/10/26/guide-for-vue-with-typescript","type":"blog","date":"2017-10-26"}}},{"node":{"id":"83d556ea-b054-54d2-8f01-0503872c8be2","frontmatter":{"title":"Node.js 9.0.0 发布","description":"一转眼，又半年过去了","tags":["nodejs","release"],"cover":{"publicURL":"/static/86f3115cebbb8dd82646ff1d231fa317/nodejs-9-release.jpg"},"series":"","draft":false,"original":true},"fields":{"id":"nodejs-9-release","slug":"/blog/2017/11/01/nodejs-9-release","type":"blog","date":"2017-11-01"}}},{"node":{"id":"7a5bf0b6-4306-57ea-8aa7-c25f84b2e3fd","frontmatter":{"title":"每天一点ES6(13)：Proxy 和 Reflect","description":"对不起，有代理真就是可以为所欲为","tags":["ecmascript","2015","es6","javascript","proxy","reflect"],"cover":{"publicURL":"/static/0950334fb8899f1006423341cbfeecb9/es6daily.jpg"},"series":"es6daily","draft":false,"original":true},"fields":{"id":"es6-daily-13-proxy-and-reflect","slug":"/blog/2017/12/20/es6-daily-13-proxy-and-reflect","type":"blog","date":"2017-12-20"}}},{"node":{"id":"937ef5fa-f090-5154-9e5a-07ac71c21abd","frontmatter":{"title":"一个非著名前端开发者的 2017","description":"哎 ~ 又一年过去了","tags":["summary","2017","2018"],"cover":{"publicURL":"/static/0d96380257d25f6b398d9bc8e47af5a1/summary-2017.jpg"},"series":"summary","draft":false,"original":true},"fields":{"id":"summary-2017","slug":"/blog/2017/12/29/summary-2017","type":"blog","date":"2017-12-29"}}},{"node":{"id":"8d61cd08-e710-556d-9e07-027c78d1f981","frontmatter":{"title":"每天一点ES6(1)：概述","description":"伊艾斯6大法好，每天一点不会老！","tags":["ecmascript","2015","es6","javascript"],"cover":{"publicURL":"/static/0950334fb8899f1006423341cbfeecb9/es6daily.jpg"},"series":"es6daily","draft":false,"original":true},"fields":{"id":"es6-daily-01-intro","slug":"/blog/2016/01/24/es6-daily-01-intro","type":"blog","date":"2016-01-24"}}},{"node":{"id":"b97439aa-2e04-574e-8a3c-f2ae98ab05dc","frontmatter":{"title":"每天一点ES6(2)：let 和 const","description":"终于，JavaScript 也能用上块级作用域和常量了","tags":["ecmascript","2015","es6","javascript","let","const"],"cover":{"publicURL":"/static/0950334fb8899f1006423341cbfeecb9/es6daily.jpg"},"series":"es6daily","draft":false,"original":true},"fields":{"id":"es6-daily-02-let-and-const","slug":"/blog/2016/01/25/es6-daily-02-let-and-const","type":"blog","date":"2016-01-25"}}},{"node":{"id":"748c4aaa-f157-5f73-b098-822449e3e5fd","frontmatter":{"title":"电梯调度算法","description":"上上下下的感受","tags":["elevator","algorithm","project"],"cover":{"publicURL":"/static/7b7f4cefe4c7bf293ff2cdb266af33d9/elevator.jpg"},"series":"","draft":false,"original":true},"fields":{"id":"elevator","slug":"/blog/2016/02/16/elevator","type":"blog","date":"2016-02-16"}}},{"node":{"id":"4c8921a6-6cf1-55ce-92ff-2db25424d835","frontmatter":{"title":"每天一点ES6(3)：解构赋值","description":"让你一次赋个够","tags":["ecmascript","2015","es6","javascript","destructuring"],"cover":{"publicURL":"/static/0950334fb8899f1006423341cbfeecb9/es6daily.jpg"},"series":"es6daily","draft":false,"original":true},"fields":{"id":"es6-daily-03-destructuring","slug":"/blog/2016/02/02/es6-daily-03-destructuring","type":"blog","date":"2016-02-02"}}},{"node":{"id":"23292539-577c-5367-a046-dcd590f4dd9e","frontmatter":{"title":"每天一点ES6(4)：Babel","description":"《圣经》的光辉，永恒！","tags":["ecmascript","2015","es6","javascript","babel","npm"],"cover":{"publicURL":"/static/0950334fb8899f1006423341cbfeecb9/es6daily.jpg"},"series":"es6daily","draft":false,"original":true},"fields":{"id":"es6-daily-04-babel","slug":"/blog/2016/02/19/es6-daily-04-babel","type":"blog","date":"2016-02-19"}}},{"node":{"id":"741e8e7b-be5c-5e76-8b7e-de57174d490e","frontmatter":{"title":"每天一点ES6(5)：字符串的扩展","description":"不变的字符串现在更加多变了","tags":["ecmascript","2015","es6","javascript","string"],"cover":{"publicURL":"/static/0950334fb8899f1006423341cbfeecb9/es6daily.jpg"},"series":"es6daily","draft":false,"original":true},"fields":{"id":"es6-daily-05-string","slug":"/blog/2016/04/05/es6-daily-05-string","type":"blog","date":"2016-04-05"}}},{"node":{"id":"64eae26e-fc44-5e11-b686-c51cde2dea6a","frontmatter":{"title":"每天一点ES6(6)：正则的扩展","description":"四字节 Unicode 的春天","tags":["ecmascript","2015","es6","javascript","regular","expression","regexp"],"cover":{"publicURL":"/static/0950334fb8899f1006423341cbfeecb9/es6daily.jpg"},"series":"es6daily","draft":false,"original":true},"fields":{"id":"es6-daily-06-regexp","slug":"/blog/2016/04/06/es6-daily-06-regexp","type":"blog","date":"2016-04-06"}}},{"node":{"id":"6572f129-a62e-5cc5-8f87-be06f67a0bda","frontmatter":{"title":"每天一点ES6(7)：数值的扩展","description":"每一个数字都不能放过","tags":["ecmascript","2015","es6","javascript","number"],"cover":{"publicURL":"/static/0950334fb8899f1006423341cbfeecb9/es6daily.jpg"},"series":"es6daily","draft":false,"original":true},"fields":{"id":"es6-daily-07-number","slug":"/blog/2016/04/12/es6-daily-07-number","type":"blog","date":"2016-04-12"}}},{"node":{"id":"7ee25fb2-ea5c-58c2-a8ac-6b42f8693a6d","frontmatter":{"title":"每天一点ES6(8)：数组的扩展","description":"别拿语法糖不当干粮","tags":["ecmascript","2015","es6","javascript","array"],"cover":{"publicURL":"/static/0950334fb8899f1006423341cbfeecb9/es6daily.jpg"},"series":"es6daily","draft":false,"original":true},"fields":{"id":"es6-daily-08-array","slug":"/blog/2016/07/26/es6-daily-08-array","type":"blog","date":"2016-07-26"}}},{"node":{"id":"4ad27401-b0f3-5269-ae01-3a2ad2dcfbfc","frontmatter":{"title":"每天一点ES6(9)：函数的扩展","description":"博采众长的实用语法糖","tags":["ecmascript","2015","es6","javascript","function"],"cover":{"publicURL":"/static/0950334fb8899f1006423341cbfeecb9/es6daily.jpg"},"series":"es6daily","draft":false,"original":true},"fields":{"id":"es6-daily-09-function","slug":"/blog/2016/12/20/es6-daily-09-function","type":"blog","date":"2016-12-20"}}},{"node":{"id":"ac9d5bb7-c4df-5f1a-a3da-5fbdeae86177","frontmatter":{"title":"5 分钟彻底明白 JSONP","description":"说穿了，其实没那么难","tags":["javascript","jsonp"],"cover":{"publicURL":"/static/f8f2d118b15646398f7d00e19eb17ff9/jsonp.jpg"},"series":"","draft":false,"original":true},"fields":{"id":"jsonp","slug":"/blog/2016/08/17/jsonp","type":"blog","date":"2016-08-17"}}},{"node":{"id":"5e1e4ab1-d9cd-5c67-bd5d-69efb1c8dfaa","frontmatter":{"title":"一个非著名前端开发者的 2016","description":"回顾 2016，是充实的一年，不负青春。2017 加油继续！","tags":["summary","2016","2017"],"cover":{"publicURL":"/static/d4bc85d6ff1aa8985e03c3875f90ea51/summary-2016.jpg"},"series":"summary","draft":false,"original":true},"fields":{"id":"summary-2016","slug":"/blog/2016/12/31/summary-2016","type":"blog","date":"2016-12-31"}}},{"node":{"id":"7499c4c1-4f63-5811-a96a-86630b44e5b9","frontmatter":{"title":"使用 Sublime Text 编写 LaTeX","description":"用你最熟悉的工具来写 LaTeX 吧","tags":["sublime","latex"],"cover":{"publicURL":"/static/e7689b7e9fe6160a6ed614a10125ca29/latex-with-sublime-text.jpg"},"series":"","draft":false,"original":true},"fields":{"id":"latex-with-sublime-text","slug":"/blog/2015/04/01/latex-with-sublime-text","type":"blog","date":"2015-04-01"}}},{"node":{"id":"d896acb5-2868-5534-a355-63e02b49a0ae","frontmatter":{"title":"栈计算器","description":"通过“栈”实现的方程式计算器","tags":["stack","calculator","algorithm","project"],"cover":{"publicURL":"/static/256bbf9439e7f58974c946bc16f54832/stack-calculator.jpg"},"series":"","draft":false,"original":true},"fields":{"id":"stack-calculator","slug":"/blog/2015/02/10/stack-calculator","type":"blog","date":"2015-02-10"}}},{"node":{"id":"eb3ee752-691c-5a06-a50b-6a96899697ce","frontmatter":{"title":"时间是什么颜色的","description":"如果时间有颜色……","tags":["color","time","project"],"cover":{"publicURL":"/static/03c874556dd31d9db5f30b7609751b92/tik-tok-color.jpg"},"series":"","draft":false,"original":true},"fields":{"id":"tik-tok-color","slug":"/blog/2015/02/11/tik-tok-color","type":"blog","date":"2015-02-11"}}},{"node":{"id":"ffc4262c-5033-521b-b3d3-025203bb12eb","frontmatter":{"title":"MIUI 图标缓存问题","description":"离奇失踪的图标","tags":["android","miui","icon","cache"],"cover":{"publicURL":"/static/2e66c31a61d5319c1849ea082e8c80ee/miui-icon-cache.jpg"},"series":"","draft":false,"original":true},"fields":{"id":"miui-icon-cache","slug":"/blog/2015/04/18/miui-icon-cache","type":"blog","date":"2015-04-18"}}},{"node":{"id":"e984ad39-2991-5a05-aa84-1dffb097c4c0","frontmatter":{"title":"substr() 和 substring() 的区别","description":"两个函数，傻傻分不清楚","tags":["javascript","substr","substring","slice"],"cover":{"publicURL":"/static/289ad52fc38963e15549cd1dc24678e4/substring.jpg"},"series":"","draft":false,"original":true},"fields":{"id":"substr-and-substring","slug":"/blog/2015/05/15/substr-and-substring","type":"blog","date":"2015-05-15"}}},{"node":{"id":"f8806a62-d0b4-55b9-8d0e-cf83410ec466","frontmatter":{"title":"纯 CSS3 绘制月饼","description":"中秋佳节，用CSS3来画个月饼吧","tags":["css","mooncake","project"],"cover":{"publicURL":"/static/9aaefaae86216c79623893c080f1ccc2/css3-mooncake.jpg"},"series":"","draft":false,"original":true},"fields":{"id":"css3-mooncake","slug":"/blog/2015/09/27/css3-mooncake","type":"blog","date":"2015-09-27"}}}]},"markdownRemark":{"html":"<h2>喜迎 Hooks</h2>\n<p>正当中国人民还沉浸在过年的忙碌中，在世界的另一头，React 团队的小伙伴们一点也没闲着，他们写了 <a href=\"https://reactjs.org/blog/2019/02/06/react-v16.8.0.html\" target=\"_blank\" rel=\"noopener noreferrer\">一篇博客</a> ，并借此正式发布了 Hooks —— 一个官方宣传了好久、开发者们也期待了好久的新特性。</p>\n<p>Hooks 正式发布于 v16.8.0，但由于官方团队的 <a href=\"https://reactjs.org/blog/2018/12/19/react-v-16-7.html\" target=\"_blank\" rel=\"noopener noreferrer\">一点点小失误</a>，在 v16.7.0-alpha.1 中就已经包含了 Hooks 的部分代码。好在 Dan Abramov 之前在 React Conf 上一再强调这还只是实验特性，API 随时有可能会改，欢迎早期反馈，但不建议用于生产环境；官方在事后也及时发文说明了原委，并表示“以后注意”。算是一个小插曲吧，无伤大雅。</p>\n<h2>稳住，别急</h2>\n<p>最近把 Hooks 部分的文档通读了一遍，加上去年 React Conf 上几个关于 Hooks 的演讲，对 Hooks 的概念及用法有了基本的了解。</p>\n<p>作为可能是 React 继 Fiber 之后最大的改变，官方团队真的是慎之又慎。下面这些话摘自 React 官方文档中关于 Hooks 的部分：</p>\n<blockquote>\n<p>You don’t have to learn Hooks right now.</p>\n<p>你不必现在就学习 Hooks。</p>\n</blockquote>\n<blockquote>\n<p>There is no rush to migrate to Hooks. It takes a bit of a mindshift to start “thinking in Hooks”.</p>\n<p>不用着急马上迁移到 Hooks，开始“以 Hooks 的方式思考”需要一点点思维上的转变。</p>\n</blockquote>\n<blockquote>\n<p>It is an early time for Hooks, and some third-party libraries might not be compatible with Hooks at the moment.</p>\n<p>Hooks 目前尚处于早期阶段，一些第三方库目前可能还不兼容 Hooks。</p>\n</blockquote>\n<blockquote>\n<p>We intend for Hooks to cover all existing use cases for classes, but we will keep supporting class components for the foreseeable future.</p>\n<p>我们计划让 Hooks 覆盖 class 的所有现有使用场景，但在可见的未来里我们还是会继续支持 class 组件。</p>\n</blockquote>\n<blockquote>\n<p>There are no plans to remove classes from React.</p>\n<p>我们不打算把 class 从 React 中移除。</p>\n</blockquote>\n<blockquote>\n<p>Conceptually, React components have always been closer to functions.</p>\n<p>从概念上讲，React 组件一直以来都更接近函数。</p>\n</blockquote>\n<p>类似的表述在官方文档中随处可见。可以看出，官方对 Hooks 的态度非常明确：<strong><em>未来是属于 Hooks 的</em></strong>。</p>\n<p>但路得一步一步走，官方对开发者也是一再表示：</p>\n<ol>\n<li>Hooks 是可选的，老代码不用改。</li>\n<li>Hooks 的概念很新，别着急用。</li>\n<li>放心，Class 还在。（至少短期内）</li>\n</ol>\n<h2>迁移到 Hooks</h2>\n<p>相信大部分人在学习 Hooks 时都想过：我已经有一个函数组件 / class 组件了，要怎么把它改造成用 Hooks 实现呢？这个弯要是转不过来，后面的事情就很难办了。</p>\n<p>Hooks 的方案，可以简单理解为把 class 独有的东西全都整合到函数组件中去，最终让所有组件变成函数，主要涉及几个方面：</p>\n<h3>1. state</h3>\n<p>定义一个组件时，到底应该用函数还是用 Class，这是过去大家一直非常关心的问题，最核心的一点就是：组件是否包含 state。</p>\n<p>Hooks 通过 <code class=\"gatsby-code-text\">useState()</code> 把 state 引进了函数，并且相比在 Class 中的语法还更加简洁。</p>\n<h3>2. 生命周期</h3>\n<p>使用 Class 的另一个原因就是生命周期函数，Hooks 去掉了生命周期函数，改为用 <code class=\"gatsby-code-text\">useEffect()</code> 等方法实现。因此如果我们能够给每个生命周期函数都找到对应的解决办法，问题不就解决了嘛。让我们按照这个思路来试一下：</p>\n<blockquote>\n<p>这里我们只讨论 React 16 开始的新的生命周期方法，<code class=\"gatsby-code-text\">UNSAFE_</code> 开头的方法由于要被废除了，就不再讨论了。</p>\n</blockquote>\n<h4>2.1. <code class=\"gatsby-code-text\">componentDidUpdate()</code></h4>\n<p>Hooks 使用 <code class=\"gatsby-code-text\">useEffect(callback[, depends])</code> 替代 <code class=\"gatsby-code-text\">componentDidUpdate()</code> 来处理“副作用（Side Effect，简称 Effect）”。</p>\n<p>Effect 会在每次 render 完成之后被执行，刚好就是 <code class=\"gatsby-code-text\">componentDidUpdate()</code> 触发的时机。可以在 callback 中通过条件判断来决定具体要执行哪些逻辑，也可以通过 <code class=\"gatsby-code-text\">useEffect()</code> 的第二个参数，传入一个数组，数组中放入需要检查的属性，只有当数组里的属性和上一次不同时，callback 才会被执行。</p>\n<p>Hooks 的设计目的之一，就是让相关的逻辑靠得更近，让不相关的逻辑独立开来，因此如果组件中包含有多种不同的副作用，最好交给不同的 <code class=\"gatsby-code-text\">useEffect()</code> 去处理。</p>\n<h4>2.2. <code class=\"gatsby-code-text\">componentDidMount()</code></h4>\n<p><code class=\"gatsby-code-text\">componentDidMount()</code> 同样也用于处理副作用，因此也是通过 <code class=\"gatsby-code-text\">useEffect()</code> 实现。</p>\n<p><code class=\"gatsby-code-text\">componentDidMount()</code> 和 <code class=\"gatsby-code-text\">componentDidUpdate()</code> 都是在 render 之后被触发，最大的不同在于前者仅在第一次触发，后者从第二次开始往后都会触发。因此只要能够区分触发的时机，就能够用同样的函数来完成两个阶段的任务。</p>\n<blockquote>\n<p>Instead of thinking in terms of “mounting” and “updating”, you might find it easier to think that effects happen “after render”.</p>\n<p>不用纠结“挂载”还是“更新”，你只需要简单认为“副作用发生在 render 之后”就好了。</p>\n</blockquote>\n<p>只需要在第二个参数位置传入一个空数组，告知该 Effect 不依赖任何属性的变化，即可将其和 <code class=\"gatsby-code-text\">componentDidUpdate()</code> 区分开来。</p>\n<p>同样的，不同的副作用应该交给不同的 <code class=\"gatsby-code-text\">useEffect()</code> 去处理。</p>\n<h4>2.3. <code class=\"gatsby-code-text\">componentWillUnmount()</code></h4>\n<p><code class=\"gatsby-code-text\">useEffect()</code> 默认不需要返回任何东西，但如果你希望某个副作用在下一次执行之前先做点什么（比如清理一些旧数据），可以在 <code class=\"gatsby-code-text\">useEffect()</code> 的 callback 中返回一个 cleanup 函数，在这个函数中定义的内容会在 Effect 下一次被调用之前执行。</p>\n<p>如果此时 <code class=\"gatsby-code-text\">useEffect()</code> 的第二个参数刚好是个空数组，那么就只会在组件销毁时被触发，起到 <code class=\"gatsby-code-text\">componentWillUnMount()</code> 的作用，否则就相当于是 <code class=\"gatsby-code-text\">componentDidUpdate()</code> 的一部分。</p>\n<h4>2.4. <code class=\"gatsby-code-text\">getDerivedStateFromProps()</code></h4>\n<p>在 Hooks 的设计中，是没有这个环节的，相关逻辑全部通过用 <code class=\"gatsby-code-text\">useEffect()</code> 触发 update 来实现。</p>\n<h4>2.5. <code class=\"gatsby-code-text\">shouldComponentUpdate()</code></h4>\n<p>函数式组件可以使用 <code class=\"gatsby-code-text\">React.memo(renderFn, areEqualFn)</code> 来进行性能优化。</p>\n<p><code class=\"gatsby-code-text\">React.memo()</code> 默认相当于 <code class=\"gatsby-code-text\">React.PureComponent</code>，通过对 props 进行浅比较来决定是否要更新。但我们可以通过其中的 <code class=\"gatsby-code-text\">areEqualFn</code> 来自定义判断的方式，起到 <code class=\"gatsby-code-text\">shouldComponentUpdate()</code> 的作用。</p>\n<p>需要注意的是， <code class=\"gatsby-code-text\">areEqualFn</code> 如果返回 true 表示两次的 props 相同，不更新，这一点和 <code class=\"gatsby-code-text\">shouldComponentUpdate()</code> 刚好相反。从函数命名上也能看出来。</p>\n<p>另外，由于 <code class=\"gatsby-code-text\">React.memo()</code> 仅适用于函数式组件，因此只比较 props，不比较 state。</p>\n<h4>2.6. <code class=\"gatsby-code-text\">getSnapshotBeforeUpdate()</code>、<code class=\"gatsby-code-text\">componentDidCatch()</code></h4>\n<p>目前还没有针对这两个生命周期函数的替代方案，但官方表示未来会有的。</p>\n<p>前者用的比较少，影响不大；后者意味着 Error Boundary 在 Hooks 中暂时还用不了，不过如果组件设计的合理的话，不用也没问题。</p>\n<h4>2.7. <code class=\"gatsby-code-text\">forceUpdate()</code></h4>\n<p>严格说来，这个函数不属于生命周期，但是因为和生命周期息息相关，所以放了进来。</p>\n<p>React 保留了这个函数，用于在实在没办法的情况下强制触发一次 update。注意使用时候前面不用加 <code class=\"gatsby-code-text\">this.</code>，直接调用即可。</p>\n<h2>Thinking in Hooks</h2>\n<p>除了语法上的变化，Hooks 在代码设计思想上也有不小的变化。如果你已经决定要开始使用 Hooks，那么有些观念需要转变一下：</p>\n<h3>1. 用自定义 Hook 代替 Render Props 和 HOC</h3>\n<p>在 Hooks 出现之前，想要在组件之间复用一段逻辑通常会使用 Render Props 和 High-Order Component 来解决。</p>\n<p>在 React “一切皆组件”的思想下，我们早已习惯了这样的思维模式。与此同时，我们也习惯了另一件事：包裹器地狱（wrapper hell），组件层层嵌套，子子孙孙无穷无尽。</p>\n<p>Hooks 通过自定义 Hook 把可复用的逻辑抽取出来，成为一个普通函数。组件间复用逻辑就像复用一个工具函数一样。</p>\n<h3>2. 按业务逻辑拆分代码，而不是生命周期</h3>\n<p>在 Class 中，我们按生命周期来拆分代码，这就导致一些紧密相关的业务被拆分到不同函数中，同一函数中可能包含了多个不相关的业务。</p>\n<p>从计算机的角度，生命周期固然非常重要，必须熟练掌握；但从写代码的目的来看，业务逻辑才是我们关心的重点。</p>\n<p>Hooks 把代码按照业务逻辑的相关性进行拆分，把同一业务的代码集中在一起，不同的业务的代码独立开来，维护起来就清楚很多。</p>\n<h2>最后</h2>\n<p>Hooks 从设计思路上讲，确实会比 Class 更符合直觉一点。具体在使用上还会不会有别的坑，等大家再使用一段时间看看吧。</p>\n<p>Happy Hooking !</p>","frontmatter":{"title":"如何 Think in Hooks","description":"差不多是时候该换换脑子了","cover":{"publicURL":"/static/26d13ef2591ee05a3c4bba7fc34daa88/think-in-hooks.jpg"},"tags":["react","hooks"],"series":"","draft":false},"fields":{"id":"how-to-think-in-hooks","date":"2019-02-15"},"headings":[{"value":"喜迎 Hooks","depth":2},{"value":"稳住，别急","depth":2},{"value":"迁移到 Hooks","depth":2},{"value":"1. state","depth":3},{"value":"2. 生命周期","depth":3},{"value":"2.1. <code class=\"gatsby-code-text\">componentDidUpdate()</code>","depth":4},{"value":"2.2. <code class=\"gatsby-code-text\">componentDidMount()</code>","depth":4},{"value":"2.3. <code class=\"gatsby-code-text\">componentWillUnmount()</code>","depth":4},{"value":"2.4. <code class=\"gatsby-code-text\">getDerivedStateFromProps()</code>","depth":4},{"value":"2.5. <code class=\"gatsby-code-text\">shouldComponentUpdate()</code>","depth":4},{"value":"2.6. <code class=\"gatsby-code-text\">getSnapshotBeforeUpdate()</code>、<code class=\"gatsby-code-text\">componentDidCatch()</code>","depth":4},{"value":"2.7. <code class=\"gatsby-code-text\">forceUpdate()</code>","depth":4},{"value":"Thinking in Hooks","depth":2},{"value":"1. 用自定义 Hook 代替 Render Props 和 HOC","depth":3},{"value":"2. 按业务逻辑拆分代码，而不是生命周期","depth":3},{"value":"最后","depth":2}],"tableOfContents":"<ul>\n<li><a href=\"/blog/2019/02/15/how-to-think-in-hooks/#%E5%96%9C%E8%BF%8E-hooks\">喜迎 Hooks</a></li>\n<li><a href=\"/blog/2019/02/15/how-to-think-in-hooks/#%E7%A8%B3%E4%BD%8F%EF%BC%8C%E5%88%AB%E6%80%A5\">稳住，别急</a></li>\n<li>\n<p><a href=\"/blog/2019/02/15/how-to-think-in-hooks/#%E8%BF%81%E7%A7%BB%E5%88%B0-hooks\">迁移到 Hooks</a></p>\n<ul>\n<li><a href=\"/blog/2019/02/15/how-to-think-in-hooks/#1-state\">1. state</a></li>\n<li>\n<p><a href=\"/blog/2019/02/15/how-to-think-in-hooks/#2-%E7%94%9F%E5%91%BD%E5%91%A8%E6%9C%9F\">2. 生命周期</a></p>\n<ul>\n<li><a href=\"/blog/2019/02/15/how-to-think-in-hooks/#21-code-classgatsby-code-textcomponentdidupdatecode\">2.1. <code class=\"gatsby-code-text\">componentDidUpdate()</code></a></li>\n<li><a href=\"/blog/2019/02/15/how-to-think-in-hooks/#22-code-classgatsby-code-textcomponentdidmountcode\">2.2. <code class=\"gatsby-code-text\">componentDidMount()</code></a></li>\n<li><a href=\"/blog/2019/02/15/how-to-think-in-hooks/#23-code-classgatsby-code-textcomponentwillunmountcode\">2.3. <code class=\"gatsby-code-text\">componentWillUnmount()</code></a></li>\n<li><a href=\"/blog/2019/02/15/how-to-think-in-hooks/#24-code-classgatsby-code-textgetderivedstatefrompropscode\">2.4. <code class=\"gatsby-code-text\">getDerivedStateFromProps()</code></a></li>\n<li><a href=\"/blog/2019/02/15/how-to-think-in-hooks/#25-code-classgatsby-code-textshouldcomponentupdatecode\">2.5. <code class=\"gatsby-code-text\">shouldComponentUpdate()</code></a></li>\n<li><a href=\"/blog/2019/02/15/how-to-think-in-hooks/#26-code-classgatsby-code-textgetsnapshotbeforeupdatecode%E3%80%81code-classgatsby-code-textcomponentdidcatchcode\">2.6. <code class=\"gatsby-code-text\">getSnapshotBeforeUpdate()</code>、<code class=\"gatsby-code-text\">componentDidCatch()</code></a></li>\n<li><a href=\"/blog/2019/02/15/how-to-think-in-hooks/#27-code-classgatsby-code-textforceupdatecode\">2.7. <code class=\"gatsby-code-text\">forceUpdate()</code></a></li>\n</ul>\n</li>\n</ul>\n</li>\n<li>\n<p><a href=\"/blog/2019/02/15/how-to-think-in-hooks/#thinking-in-hooks\">Thinking in Hooks</a></p>\n<ul>\n<li><a href=\"/blog/2019/02/15/how-to-think-in-hooks/#1-%E7%94%A8%E8%87%AA%E5%AE%9A%E4%B9%89-hook-%E4%BB%A3%E6%9B%BF-render-props-%E5%92%8C-hoc\">1. 用自定义 Hook 代替 Render Props 和 HOC</a></li>\n<li><a href=\"/blog/2019/02/15/how-to-think-in-hooks/#2-%E6%8C%89%E4%B8%9A%E5%8A%A1%E9%80%BB%E8%BE%91%E6%8B%86%E5%88%86%E4%BB%A3%E7%A0%81%EF%BC%8C%E8%80%8C%E4%B8%8D%E6%98%AF%E7%94%9F%E5%91%BD%E5%91%A8%E6%9C%9F\">2. 按业务逻辑拆分代码，而不是生命周期</a></li>\n</ul>\n</li>\n<li><a href=\"/blog/2019/02/15/how-to-think-in-hooks/#%E6%9C%80%E5%90%8E\">最后</a></li>\n</ul>","timeToRead":7}},"pageContext":{"slug":"/blog/2019/02/15/how-to-think-in-hooks"}}}