{"componentChunkName":"component---src-templates-blog-post-tsx","path":"/blog/2019/02/11/es2018-and-es2019","result":{"data":{"site":{"siteMetadata":{"title":"童话说","keywords":["tonghuashuo","github","front-end","javascript","typescript","react","node","washington","hua","童话","童话说","前端","博客","技术","计算机","互联网"]}},"allMarkdownRemark":{"totalCount":85,"edges":[{"node":{"id":"6a3bf076-bd85-5f11-8eb1-16e95286adaf","frontmatter":{"title":"FBC","description":"联合办公空间的会员服务","tags":null,"cover":{"publicURL":"/static/73b8b250e607c97c493edf1b542345fa/fbc.jpg"},"series":null,"draft":false,"original":null},"fields":{"id":"fbc","slug":"/project/fbc","type":"project","date":null}}},{"node":{"id":"c205d1bc-0577-5639-90aa-37b6f09d3547","frontmatter":{"title":"CSS Scan","description":"VSCode 扩展，自动补全 CSS 变量","tags":null,"cover":{"publicURL":"/static/72e94c39ebb670dd23625675c0a22ace/blank.jpg"},"series":null,"draft":true,"original":null},"fields":{"id":"css-scan","slug":"/project/css-scan","type":"project","date":null}}},{"node":{"id":"eebfa8f3-a1a0-5049-98ac-6a1fb792d9a1","frontmatter":{"title":"Teamedia","description":"Teambition 出品的网盘应用","tags":null,"cover":{"publicURL":"/static/a5318825484a23816f7831bab7f12d82/teamedia.jpg"},"series":null,"draft":true,"original":null},"fields":{"id":"teamedia","slug":"/project/teamedia","type":"project","date":null}}},{"node":{"id":"096c5d70-0164-57e4-91c0-1aafddde7880","frontmatter":{"title":"INEX 影力所","description":"泛娱乐领域的垂直数字货币交易所","tags":null,"cover":{"publicURL":"/static/40ff0dfa20bfd2e8e2b2ea8abb900b5b/inex.jpg"},"series":null,"draft":false,"original":null},"fields":{"id":"inex","slug":"/project/inex","type":"project","date":null}}},{"node":{"id":"450957d8-90c2-5456-a2e3-6f60bd8f2ce4","frontmatter":{"title":"Fridge","description":"Teambition 设计资产速查工具","tags":null,"cover":{"publicURL":"/static/97b869f04b74e763be87e4369e4690e3/fridge.jpg"},"series":null,"draft":true,"original":null},"fields":{"id":"fridge","slug":"/project/fridge","type":"project","date":null}}},{"node":{"id":"290932e4-635f-592d-be69-7d9c3b5d7ba0","frontmatter":{"title":"小书签","description":"让 Chrome 的书签更好用","tags":null,"cover":{"publicURL":"/static/72e94c39ebb670dd23625675c0a22ace/blank.jpg"},"series":null,"draft":true,"original":null},"fields":{"id":"the-collector","slug":"/project/the-collector","type":"project","date":null}}},{"node":{"id":"d3fe6409-636c-5419-97f1-f15c8dca1056","frontmatter":{"title":"小图标","description":"一站式 Favicon 解决方案","tags":null,"cover":{"publicURL":"/static/956c5d68ba30b313078082a832a80573/the-favicon.jpg"},"series":null,"draft":false,"original":null},"fields":{"id":"the-favicon","slug":"/project/the-favicon","type":"project","date":null}}},{"node":{"id":"71ffc9c2-24f4-5a91-a9fc-4694778e43c7","frontmatter":{"title":"Github-Flutter","description":"基于 Flutter 开发的 Github 客户端","tags":null,"cover":{"publicURL":"/static/72e94c39ebb670dd23625675c0a22ace/blank.jpg"},"series":null,"draft":true,"original":null},"fields":{"id":"github-flutter","slug":"/project/github-flutter","type":"project","date":null}}},{"node":{"id":"7b74e9c9-8dc8-59b9-86d9-ad7f13a67df6","frontmatter":{"title":"小剧透","description":"Web 版「剧情连拍」","tags":null,"cover":{"publicURL":"/static/72e94c39ebb670dd23625675c0a22ace/blank.jpg"},"series":null,"draft":true,"original":null},"fields":{"id":"the-spoiler","slug":"/project/the-spoiler","type":"project","date":null}}},{"node":{"id":"4f46ae77-847c-5508-acae-7c8d89c42804","frontmatter":{"title":"Thoughts 所思","description":"Teambition 出品的企业知识管理应用","tags":null,"cover":{"publicURL":"/static/faff3495c115cab9b6fd951f3c6b96f9/thoughts.jpg"},"series":null,"draft":false,"original":null},"fields":{"id":"thoughts","slug":"/project/thoughts","type":"project","date":null}}},{"node":{"id":"7a64b536-2246-5627-93d5-c19fa4db4d5d","frontmatter":{"title":"Xshowroom 买手圈","description":"时尚业专业买手服务平台","tags":null,"cover":{"publicURL":"/static/72ea2ae7921cb5aa0b3b4f56578ed2b9/xshowroom.jpg"},"series":null,"draft":false,"original":null},"fields":{"id":"xshowroom","slug":"/project/xshowroom","type":"project","date":null}}},{"node":{"id":"a2ea7f53-9ec5-5042-b8ca-5be79e9c6785","frontmatter":{"title":"小扫描","description":"磁盘占用一眼","tags":null,"cover":{"publicURL":"/static/72e94c39ebb670dd23625675c0a22ace/blank.jpg"},"series":null,"draft":true,"original":null},"fields":{"id":"the-scanner","slug":"/project/the-scanner","type":"project","date":null}}},{"node":{"id":"24f860b7-781d-5fca-a7d2-dc224a10bd4c","frontmatter":{"title":"新阅","description":"在线视频协作平台","tags":null,"cover":{"publicURL":"/static/64b35564f5bc639232b66b6559065b31/xinyue.jpg"},"series":null,"draft":false,"original":null},"fields":{"id":"xinyue","slug":"/project/xinyue","type":"project","date":null}}},{"node":{"id":"fb733387-9845-5e72-a071-be5f8a756c4d","frontmatter":{"title":"年底了，聊聊前端面试","description":"人嘛，总是在不断的试错中成长起来的","tags":["interview"],"cover":{"publicURL":"/static/d221320d45d5d7ac530fe7af1ab4cd79/blank.jpg"},"series":"","draft":true,"original":true},"fields":{"id":"thoughts-about-fe-interview","slug":"/blog/2021/01/21/thoughts-about-fe-interview","type":"blog","date":"2021-01-21"}}},{"node":{"id":"3ebb3e13-b9a6-5ef5-a252-55ca6d504dce","frontmatter":{"title":"闲聊 | 一个非典型程序员的 EDC","description":"去掉各种复杂，简单才是真理","tags":["chat","life"],"cover":{"publicURL":"/static/d221320d45d5d7ac530fe7af1ab4cd79/blank.jpg"},"series":"","draft":true,"original":true},"fields":{"id":"my-edc","slug":"/blog/2021/01/18/my-edc","type":"blog","date":"2021-01-18"}}},{"node":{"id":"5847ea10-a706-5ac9-915f-85b2f5ef68d2","frontmatter":{"title":"Fridge 背后的故事","description":"能动手的，咱们尽量别吵吵","tags":["electron","iconfont","svg","fridge"],"cover":{"publicURL":"/static/d221320d45d5d7ac530fe7af1ab4cd79/blank.jpg"},"series":"","draft":true,"original":true},"fields":{"id":"story-behind-fridge","slug":"/blog/2021/02/11/story-behind-fridge","type":"blog","date":"2021-02-11"}}},{"node":{"id":"8ab9f5c8-ad26-5c56-af3b-ec084067dee7","frontmatter":{"title":"提效 50%，榨干 webpack","description":"我们的目标是：榨干 webpack","tags":["webpack"],"cover":{"publicURL":"/static/d221320d45d5d7ac530fe7af1ab4cd79/blank.jpg"},"series":"","draft":true,"original":true},"fields":{"id":"speed-up-your-build","slug":"/blog/2021/03/20/speed-up-your-build","type":"blog","date":"2021-03-20"}}},{"node":{"id":"c521b183-1bae-532e-8945-de3b1c36d4c5","frontmatter":{"title":"基于 Sass 的主题定制方案","description":"本以为很简单的事情，然而……","tags":["css","sass","theme"],"cover":{"publicURL":"/static/d221320d45d5d7ac530fe7af1ab4cd79/blank.jpg"},"series":"","draft":true,"original":true},"fields":{"id":"custom-theme","slug":"/blog/2021/04/20/custom-theme","type":"blog","date":"2021-04-20"}}},{"node":{"id":"562eddd4-95cb-5d60-a7c5-945d59b8c09a","frontmatter":{"title":"聊聊「深色模式」","description":"你说的黑不是黑，你说的暗是什么暗","tags":["design","dark"],"cover":{"publicURL":"/static/d221320d45d5d7ac530fe7af1ab4cd79/blank.jpg"},"series":"","draft":true,"original":true},"fields":{"id":"dark-mode","slug":"/blog/2021/05/15/dark-mode","type":"blog","date":"2021-05-15"}}},{"node":{"id":"a7901198-846c-51d8-a642-d65043ac39cc","frontmatter":{"title":"为什么我们总是在不断地造轮子","description":"圆的圆的圆的东西","tags":["thinking"],"cover":{"publicURL":"/static/120fefa8e824de66889cf2e45b746ebe/wheel.jpg"},"series":"","draft":true,"original":true},"fields":{"id":"why-do-we-keep-building-wheels","slug":"/blog/2021/06/10/why-do-we-keep-building-wheels","type":"blog","date":"2021-06-10"}}},{"node":{"id":"c656cf72-a356-54a5-815f-822a793f974d","frontmatter":{"title":"聊聊前端架构","description":"前端如果只是写写页面的话，路就走窄了","tags":["architecture","架构"],"cover":{"publicURL":"/static/d221320d45d5d7ac530fe7af1ab4cd79/blank.jpg"},"series":"","draft":true,"original":true},"fields":{"id":"frontend-architecture","slug":"/blog/2021/07/15/frontend-architecture","type":"blog","date":"2021-07-15"}}},{"node":{"id":"2acb1ff4-952a-5385-93d9-b8cf641a7056","frontmatter":{"title":"多端 Web 应用实践","description":"去往梦想的路，总是坑坑洼洼的","tags":["cross-platform"],"cover":{"publicURL":"/static/d221320d45d5d7ac530fe7af1ab4cd79/blank.jpg"},"series":"","draft":true,"original":true},"fields":{"id":"web-cross-platform-in-action","slug":"/blog/2021/05/10/web-cross-platform-in-action","type":"blog","date":"2021-05-10"}}},{"node":{"id":"24a1fcac-33bb-541f-8b8a-1100af03085a","frontmatter":{"title":"Flutter 扫雷记","description":"穿上新买的鞋，走上复古的小路","tags":["flutter"],"cover":{"publicURL":"/static/b6ce1e63c11d6fddd7a988bfb312deb5/flutter.jpg"},"series":"","draft":true,"original":true},"fields":{"id":"learning-flutter","slug":"/blog/2021/08/03/learning-flutter","type":"blog","date":"2021-08-03"}}},{"node":{"id":"6b794aa1-bed2-53af-a8af-7b995f20236e","frontmatter":{"title":"「童话说」又改版啦","description":"只为遇见更好的自己","tags":["blog","4.0","update"],"cover":{"publicURL":"/static/d221320d45d5d7ac530fe7af1ab4cd79/blank.jpg"},"series":"","draft":true,"original":true},"fields":{"id":"introducing-ths-v4","slug":"/blog/2021/12/15/introducing-ths-v4","type":"blog","date":"2021-12-15"}}},{"node":{"id":"a03c38bd-7cf4-5017-a488-1ab0e4df7358","frontmatter":{"title":"GraphQL：从起飞到落地","description":"你经手的下一个项目，很可能就有它","tags":["design"],"cover":{"publicURL":"/static/d221320d45d5d7ac530fe7af1ab4cd79/blank.jpg"},"series":"","draft":true,"original":true},"fields":{"id":"learning-graphql","slug":"/blog/2021/09/10/learning-graphql","type":"blog","date":"2021-09-10"}}},{"node":{"id":"00425197-525b-5ca0-92bf-d83460391100","frontmatter":{"title":"关于 P7 的思考","description":"对「硬通货」的一点浅见","tags":["career"],"cover":{"publicURL":"/static/d221320d45d5d7ac530fe7af1ab4cd79/blank.jpg"},"series":"","draft":true,"original":true},"fields":{"id":"thinkings-about-p7","slug":"/blog/2021/11/31/thinkings-about-p7","type":"blog","date":"2021-11-31"}}},{"node":{"id":"6f48fb1e-8bd1-52af-898e-03a118de4b36","frontmatter":{"title":"设计一套乐观更新机制","description":"做人呐，最重要的就是乐观啦","tags":["design","optimistic","update"],"cover":{"publicURL":"/static/92603cdac7e5c420caea18ea2c459646/optimistic-update.jpg"},"series":"","draft":false,"original":true},"fields":{"id":"building-an-optimisic-update-mechanism","slug":"/blog/2020/07/13/building-an-optimisic-update-mechanism","type":"blog","date":"2020-07-13"}}},{"node":{"id":"de00674b-5c36-544d-9bd6-c860f677b2f1","frontmatter":{"title":"关于 Semver 的迷思","description":"做人呐，最重要的就是乐观啦","tags":["design","optimistic","update"],"cover":{"publicURL":"/static/d221320d45d5d7ac530fe7af1ab4cd79/blank.jpg"},"series":"","draft":true,"original":true},"fields":{"id":"thinkings-about-semver","slug":"/blog/2021/10/31/thinkings-about-semver","type":"blog","date":"2021-10-31"}}},{"node":{"id":"73b26631-8c2e-5f12-8e8d-f417e263d448","frontmatter":{"title":"我的数组返回了啥","description":"功夫再高，一针下去也得倒","tags":["javascript","array"],"cover":{"publicURL":"/static/2cc085eb3cdf21f44644810589c3bd8a/array.jpg"},"series":"","draft":false,"original":true},"fields":{"id":"what-does-my-array-return","slug":"/blog/2020/12/07/what-does-my-array-return","type":"blog","date":"2020-12-07"}}},{"node":{"id":"4a508543-30f6-5796-b242-61ff3edf8dc7","frontmatter":{"title":"一个非著名前端开发者的 2021","description":"只为遇见更好的自己","tags":["summary","2021","2022"],"cover":{"publicURL":"/static/d221320d45d5d7ac530fe7af1ab4cd79/blank.jpg"},"series":"summary","draft":true,"original":true},"fields":{"id":"summary-2021","slug":"/blog/2021/12/31/summary-2021","type":"blog","date":"2021-12-31"}}},{"node":{"id":"d66a351c-5c82-5b53-85ba-d46840f71f87","frontmatter":{"title":"你铁定已经知道的 ES 2020","description":"继续，让进步发生","tags":["ecmascript","2020"],"cover":{"publicURL":"/static/5bbe9cbd4d341256fe533f89aa242cb6/es2020.jpg"},"series":"ecmascript","draft":true,"original":true},"fields":{"id":"es-2020","slug":"/blog/2020/12/28/es-2020","type":"blog","date":"2020-12-28"}}},{"node":{"id":"191091e7-5478-53ee-99f6-8faa30c141d2","frontmatter":{"title":"一个非著名前端开发者的 2020","description":"继续，让进步发生","tags":["summary","2020","2021"],"cover":{"publicURL":"/static/40556f5636111e701f3949914488b854/summary-2020.jpg"},"series":"summary","draft":true,"original":true},"fields":{"id":"summary-2020","slug":"/blog/2020/12/31/summary-2020","type":"blog","date":"2020-12-31"}}},{"node":{"id":"10413b69-d495-5634-a0ed-20f9e2b5d22d","frontmatter":{"title":"除了 SSR，就没有别的办法了吗","description":"当 MVVM 遇上 SEO，该如何是好","tags":["static","site","gatsby","pug"],"cover":{"publicURL":"/static/c2ac5cf49eafd77a1b2ce1fab7f53515/explore-static-site-generation.jpg"},"series":"","draft":false,"original":true},"fields":{"id":"explore-static-site-generation","slug":"/blog/2019/02/07/explore-static-site-generation","type":"blog","date":"2019-02-07"}}},{"node":{"id":"9399b22c-110e-538a-9111-cef715eccc94","frontmatter":{"title":"你可能已经知道的 ES 2018 和 2019","description":"好饭不怕晚","tags":["ecmascript","2018","2019"],"cover":{"publicURL":"/static/5646b4878e533cd7c725ce4c17984071/es2019.jpg"},"series":"ecmascript","draft":false,"original":true},"fields":{"id":"es2018-and-es2019","slug":"/blog/2019/02/11/es2018-and-es2019","type":"blog","date":"2019-02-11"}}},{"node":{"id":"91dc7b72-f6a0-5363-98b4-34bd3ee018e0","frontmatter":{"title":"如何 Think in Hooks","description":"差不多是时候该换换脑子了","tags":["react","hooks"],"cover":{"publicURL":"/static/26d13ef2591ee05a3c4bba7fc34daa88/think-in-hooks.jpg"},"series":"","draft":false,"original":true},"fields":{"id":"how-to-think-in-hooks","slug":"/blog/2019/02/15/how-to-think-in-hooks","type":"blog","date":"2019-02-15"}}},{"node":{"id":"123e0512-24c5-5fab-8658-28ca773d9301","frontmatter":{"title":"【译】React 如何区分 Class 和 Function？","description":"所谓的简单，只是因为有人帮你把复杂的问题给解决掉了","tags":["react"],"cover":{"publicURL":"/static/9fbf74366dc5b9e4aab57572a9f0470d/overreacted.jpg"},"series":"overreacted","draft":false,"original":false},"fields":{"id":"how-does-react-tell-a-class-from-a-function","slug":"/blog/2019/03/06/how-does-react-tell-a-class-from-a-function","type":"blog","date":"2019-03-06"}}},{"node":{"id":"bfbd5e1d-0801-5145-907c-532a5b5295b7","frontmatter":{"title":"【译】我们为什么要写 super(props)?","description":"好像知道，又好像不知道","tags":["react"],"cover":{"publicURL":"/static/9fbf74366dc5b9e4aab57572a9f0470d/overreacted.jpg"},"series":"overreacted","draft":false,"original":false},"fields":{"id":"why-do-we-write-super-props","slug":"/blog/2019/02/22/why-do-we-write-super-props","type":"blog","date":"2019-02-22"}}},{"node":{"id":"119810c8-6b66-5af5-bc64-ba57e4d6e0ca","frontmatter":{"title":"TypeScript 次日指南","description":"坑这种东西，是不会写在文档上的","tags":["typescript"],"cover":{"publicURL":"/static/8239307adc5ccdfc32320e1bcadb6300/typescript.jpg"},"series":"","draft":false,"original":true},"fields":{"id":"typescript-the-second-day","slug":"/blog/2019/07/28/typescript-the-second-day","type":"blog","date":"2019-07-28"}}},{"node":{"id":"3e2d98b6-6f15-5dd1-9509-5b6992f6de35","frontmatter":{"title":"TypeScript：又一个终将逝去的青春","description":"你，轰轰烈烈地来；你，平平淡淡地走。","tags":["typescript"],"cover":{"publicURL":"/static/b7b7642447ca6a5b28abf9f90bf06ef8/typescript-another-fading-youth.jpg"},"series":"","draft":false,"original":true},"fields":{"id":"typescript-another-fading-youth","slug":"/blog/2019/10/10/typescript-another-fading-youth","type":"blog","date":"2019-10-10"}}},{"node":{"id":"2e4af78a-f010-524d-b227-7ed7f84ba2ef","frontmatter":{"title":"探索 React 组件之间的生命周期","description":"有时候，生活就是一团麻","tags":["react","lifecycle"],"cover":{"publicURL":"/static/0edf69056144aaf512a28d0670b53b57/react-lifecycle.jpg"},"series":"","draft":false,"original":true},"fields":{"id":"react-lifecycle","slug":"/blog/2019/05/02/react-lifecycle","type":"blog","date":"2019-05-02"}}},{"node":{"id":"41cfe78e-2fe7-51d7-89fe-77ec89823496","frontmatter":{"title":"重新 Think in Hooks","description":"忘记过去之所学，我们从头来过","tags":["react","hooks"],"cover":{"publicURL":"/static/f9fcd719dcab55af4a1ad3d3cfbe0585/rethink-in-hooks.jpg"},"series":"","draft":false,"original":true},"fields":{"id":"rethink-in-hooks","slug":"/blog/2019/05/27/rethink-in-hooks","type":"blog","date":"2019-05-27"}}},{"node":{"id":"c16b75cf-1a3c-53dc-ad8b-9745a01d0288","frontmatter":{"title":"Homebrew 也有后悔药：回退一次小版本更新","description":"有了后悔药，可劲随便造","tags":["homebrew"],"cover":{"publicURL":"/static/2cd1cc709ca5d68b1a1fb9eb6283b820/homebrew.jpg"},"series":"","draft":false,"original":true},"fields":{"id":"how-to-downgrade-from-homebrew","slug":"/blog/2019/10/11/how-to-downgrade-from-homebrew","type":"blog","date":"2019-10-11"}}},{"node":{"id":"ca25cf33-2c0f-50a7-beac-6fe2833c4582","frontmatter":{"title":"一个非著名前端开发者的 2019","description":"感谢曾经努力的自己","tags":["summary","2019","2020"],"cover":{"publicURL":"/static/1011f23d2ed2635035a07878c03ed1da/summary-2019.jpg"},"series":"summary","draft":false,"original":true},"fields":{"id":"summary-2019","slug":"/blog/2019/12/31/summary-2019","type":"blog","date":"2019-12-31"}}},{"node":{"id":"0c389436-d27a-538e-b03d-8b4e7f9902a9","frontmatter":{"title":"每天一点ES6(14)：Iterator","description":"遍历也能搞出花来，怎么遍历你说了算","tags":["ecmascript","2015","es6","javascript","iterator","generator"],"cover":{"publicURL":"/static/0950334fb8899f1006423341cbfeecb9/es6daily.jpg"},"series":"es6daily","draft":false,"original":true},"fields":{"id":"es6-daily-14-iterator","slug":"/blog/2018/02/28/es6-daily-14-iterator","type":"blog","date":"2018-02-28"}}},{"node":{"id":"89fec0ed-c56b-5eaa-a3a6-403c30c0dda3","frontmatter":{"title":"每天一点ES6(16)：Generator","description":"一起来摩擦摩擦发电吧","tags":["ecmascript","2015","es6","javascript","promise"],"cover":{"publicURL":"/static/0950334fb8899f1006423341cbfeecb9/es6daily.jpg"},"series":"es6daily","draft":false,"original":true},"fields":{"id":"es6-daily-16-generator","slug":"/blog/2018/06/14/es6-daily-16-generator","type":"blog","date":"2018-06-14"}}},{"node":{"id":"093cc794-9227-5d21-bf6c-c60704ee2e9e","frontmatter":{"title":"TradingView + WebSocket 脱坑指南","description":"让我来告诉你，K 线到底该怎么画","tags":["tradingview","chart","library","guide","websocket","webworker","ohlc","kchart"],"cover":{"publicURL":"/static/1ceaf53d99815784a18273970e741bfd/tradingview.jpg"},"series":"","draft":false,"original":true},"fields":{"id":"tradingview-charting-library-simple-guide","slug":"/blog/2018/09/22/tradingview-charting-library-simple-guide","type":"blog","date":"2018-09-22"}}},{"node":{"id":"3aa48aa9-7f16-5426-9811-60b9e5cadfb0","frontmatter":{"title":"每天一点ES6(17)：Async / Await","description":"异步？先等等！","tags":["ecmascript","2015","es6","javascript","async","await","generator"],"cover":{"publicURL":"/static/0950334fb8899f1006423341cbfeecb9/es6daily.jpg"},"series":"es6daily","draft":false,"original":true},"fields":{"id":"es6-daily-17-async-await","slug":"/blog/2018/10/06/es6-daily-17-async-await","type":"blog","date":"2018-10-06"}}},{"node":{"id":"1e3454ba-7cc2-5634-a22c-119de3b1f128","frontmatter":{"title":"一个非著名前端开发者的 2018","description":"资本寒冬大概是属燕子的吧，一到年末出现","tags":["summary","2018","2019"],"cover":{"publicURL":"/static/0e9c38c3d5d6b94d53a8dee2a7bdfbae/summary-2018.jpg"},"series":"summary","draft":false,"original":true},"fields":{"id":"summary-2018","slug":"/blog/2018/12/31/summary-2018","type":"blog","date":"2018-12-31"}}},{"node":{"id":"5da03431-c5b3-5a75-85ea-11eb913c680b","frontmatter":{"title":"每天一点ES6(19)：Module","description":"可能是 ES6 中对未来影响最大的一项改变","tags":["ecmascript","2015","es6","javascript","module","import","export"],"cover":{"publicURL":"/static/0950334fb8899f1006423341cbfeecb9/es6daily.jpg"},"series":"es6daily","draft":false,"original":true},"fields":{"id":"es6-daily-19-module","slug":"/blog/2018/12/19/es6-daily-19-module","type":"blog","date":"2018-12-19"}}},{"node":{"id":"7a389490-54d6-5222-a9d8-6d940a7042c7","frontmatter":{"title":"每天一点ES6(15)：Promise","description":"对你的承诺，永远不变","tags":["ecmascript","2015","es6","javascript","promise"],"cover":{"publicURL":"/static/0950334fb8899f1006423341cbfeecb9/es6daily.jpg"},"series":"es6daily","draft":false,"original":true},"fields":{"id":"es6-daily-15-promise","slug":"/blog/2018/03/04/es6-daily-15-promise","type":"blog","date":"2018-03-04"}}},{"node":{"id":"060f6efb-7f62-5c82-9c9c-a7b637cc39a8","frontmatter":{"title":"每天一点ES6(18)：Class","description":"这回总没人质疑 JS 不是面向对象了吧？","tags":["ecmascript","2015","es6","javascript","class"],"cover":{"publicURL":"/static/0950334fb8899f1006423341cbfeecb9/es6daily.jpg"},"series":"es6daily","draft":false,"original":true},"fields":{"id":"es6-daily-18-class","slug":"/blog/2018/12/17/es6-daily-18-class","type":"blog","date":"2018-12-17"}}},{"node":{"id":"b3dd7ba2-e9e5-537a-882c-d0df4f176c3d","frontmatter":{"title":"解决 macOS 下 MySQL 2002 错误","description":"MySQL 真是个磨人的小妖精","tags":["mac","mysql","2002"],"cover":{"publicURL":"/static/6f1abf9c085f6538df6bced86e008157/mysql-error-2002.jpg"},"series":"","draft":false,"original":true},"fields":{"id":"mysql-error-2002","slug":"/blog/2017/02/07/mysql-error-2002","type":"blog","date":"2017-02-07"}}},{"node":{"id":"a4f0e1c3-c9be-5aa6-96f6-2fbcc42c06a0","frontmatter":{"title":"iOS 下 click() 无效的问题","description":"iOS这个傲娇的小公举","tags":["ios","click"],"cover":{"publicURL":"/static/f79051a5758b8a973902b2e5d190b714/ios-click.jpg"},"series":"","draft":false,"original":true},"fields":{"id":"unable-to-trigger-click-on-ios","slug":"/blog/2017/03/31/unable-to-trigger-click-on-ios","type":"blog","date":"2017-03-31"}}},{"node":{"id":"365f7b61-b82f-5c85-8a00-2bb2b3727a29","frontmatter":{"title":"PHP 处理多源 CORS 的解决办法","description":"一个老生常谈的话题，碰到了顺便记录一下","tags":["php","cors"],"cover":{"publicURL":"/static/77fc63594cf3a06c31921df671acd258/cors.jpg"},"series":"","draft":false,"original":true},"fields":{"id":"multi-origin-cors-with-php","slug":"/blog/2017/03/30/multi-origin-cors-with-php","type":"blog","date":"2017-03-30"}}},{"node":{"id":"e8900516-96a3-5afc-ba47-56be137e9802","frontmatter":{"title":"每天一点ES6(10)：对象的扩展","description":"迟来的更新……","tags":["ecmascript","2015","es6","javascript","object"],"cover":{"publicURL":"/static/0950334fb8899f1006423341cbfeecb9/es6daily.jpg"},"series":"es6daily","draft":false,"original":true},"fields":{"id":"es6-daily-10-object","slug":"/blog/2017/04/05/es6-daily-10-object","type":"blog","date":"2017-04-05"}}},{"node":{"id":"c269a601-55c5-5074-b2a4-94c8a36143cd","frontmatter":{"title":"记 new Date().toString() 的一个坑","description":"万万没想到，竟在这里踩了个坑……","tags":["javascript","date","tostring"],"cover":{"publicURL":"/static/e192283893c7e97feb631571134bb805/date-tostring.jpg"},"series":"","draft":false,"original":true},"fields":{"id":"a-pit-in-date-tostring","slug":"/blog/2017/03/08/a-pit-in-date-tostring","type":"blog","date":"2017-03-08"}}},{"node":{"id":"1fabb41d-0d56-5e0e-ad33-14c4f5d0dacd","frontmatter":{"title":"每天一点ES6(11)：Symbol","description":"原始类型家族的新成员","tags":["ecmascript","2015","es6","javascript","symbol"],"cover":{"publicURL":"/static/0950334fb8899f1006423341cbfeecb9/es6daily.jpg"},"series":"es6daily","draft":false,"original":true},"fields":{"id":"es6-daily-11-symbol","slug":"/blog/2017/07/02/es6-daily-11-symbol","type":"blog","date":"2017-07-02"}}},{"node":{"id":"73d8f599-3f9e-5ab8-8285-f7cc15693bb3","frontmatter":{"title":"Electron 安装出坑指南","description":"世界本无坑，用的人多了，也就有了坑","tags":["electron"],"cover":{"publicURL":"/static/a9838665d68ab68d327e48d8720bac3f/electron.jpg"},"series":"","draft":false,"original":true},"fields":{"id":"electron-install-guide","slug":"/blog/2017/07/06/electron-install-guide","type":"blog","date":"2017-07-06"}}},{"node":{"id":"63b88481-8f9c-5763-a7c9-909f73caa826","frontmatter":{"title":"Leetcode 第一刷：Two Sum","description":"都闪开，我要开始装逼了","tags":["leetcode","two","sum"],"cover":{"publicURL":"/static/1aa86b8eea674fca29117e535cfba751/leetcode.jpg"},"series":"","draft":false,"original":true},"fields":{"id":"leetcode-01-two-sum","slug":"/blog/2017/04/11/leetcode-01-two-sum","type":"blog","date":"2017-04-11"}}},{"node":{"id":"0208345d-0316-5c87-9158-174790345da6","frontmatter":{"title":"每天一点ES6(12)：Set 和 Map","description":"多余的，一概不要","tags":["ecmascript","2015","es6","javascript","map","set"],"cover":{"publicURL":"/static/0950334fb8899f1006423341cbfeecb9/es6daily.jpg"},"series":"es6daily","draft":false,"original":true},"fields":{"id":"es6-daily-12-set-and-map","slug":"/blog/2017/07/03/es6-daily-12-set-and-map","type":"blog","date":"2017-07-03"}}},{"node":{"id":"f5795f58-cfdd-53fd-8ecc-dac397dafc99","frontmatter":{"title":"TypeScript + Vue 踩坑纪实","description":"坑这种东西，多踩踩就平了","tags":["typescript","vue"],"cover":{"publicURL":"/static/fe6f5086d26293f21adf217a84141fd6/guide-for-vue-with-typescript.jpg"},"series":"","draft":false,"original":true},"fields":{"id":"guide-for-vue-with-typescript","slug":"/blog/2017/10/26/guide-for-vue-with-typescript","type":"blog","date":"2017-10-26"}}},{"node":{"id":"598854e9-096f-5356-a1ee-50b4c7283058","frontmatter":{"title":"ECMAScript 2017 正式到来","description":"ES 的世界开始日趋平静","tags":["ecmascript","2017","es8","javascript"],"cover":{"publicURL":"/static/77b7677386d27526bcb0b2687218f3f1/es2017.jpg"},"series":"ecmascript","draft":false,"original":true},"fields":{"id":"ecmascript-2017-is-here","slug":"/blog/2017/07/12/ecmascript-2017-is-here","type":"blog","date":"2017-07-12"}}},{"node":{"id":"0cd86905-fb73-50d5-8f46-1a5167553882","frontmatter":{"title":"童话说 V2.0 改版小结","description":"时隔多年，终于换新面貌了","tags":["blog","2.0","update"],"cover":{"publicURL":"/static/630ee6fc7ad1be564eebffb0e0dd447d/introducing-ths-v2.jpg"},"series":"","draft":false,"original":true},"fields":{"id":"introducing-ths-v2","slug":"/blog/2017/08/12/introducing-ths-v2","type":"blog","date":"2017-08-12"}}},{"node":{"id":"391a7def-24c1-5557-97d3-60963b282da5","frontmatter":{"title":"Node.js 9.0.0 发布","description":"一转眼，又半年过去了","tags":["nodejs","release"],"cover":{"publicURL":"/static/86f3115cebbb8dd82646ff1d231fa317/nodejs-9-release.jpg"},"series":"","draft":false,"original":true},"fields":{"id":"nodejs-9-release","slug":"/blog/2017/11/01/nodejs-9-release","type":"blog","date":"2017-11-01"}}},{"node":{"id":"6a23b961-96d3-5e53-a734-c0a0810ef667","frontmatter":{"title":"一个非著名前端开发者的 2017","description":"哎 ~ 又一年过去了","tags":["summary","2017","2018"],"cover":{"publicURL":"/static/0d96380257d25f6b398d9bc8e47af5a1/summary-2017.jpg"},"series":"summary","draft":false,"original":true},"fields":{"id":"summary-2017","slug":"/blog/2017/12/29/summary-2017","type":"blog","date":"2017-12-29"}}},{"node":{"id":"64247806-26f2-5252-ab98-62801520568b","frontmatter":{"title":"每天一点ES6(1)：概述","description":"伊艾斯6大法好，每天一点不会老！","tags":["ecmascript","2015","es6","javascript"],"cover":{"publicURL":"/static/0950334fb8899f1006423341cbfeecb9/es6daily.jpg"},"series":"es6daily","draft":false,"original":true},"fields":{"id":"es6-daily-01-intro","slug":"/blog/2016/01/24/es6-daily-01-intro","type":"blog","date":"2016-01-24"}}},{"node":{"id":"90f390a6-9da3-5ee0-b978-15f5e12edfdd","frontmatter":{"title":"每天一点ES6(13)：Proxy 和 Reflect","description":"对不起，有代理真就是可以为所欲为","tags":["ecmascript","2015","es6","javascript","proxy","reflect"],"cover":{"publicURL":"/static/0950334fb8899f1006423341cbfeecb9/es6daily.jpg"},"series":"es6daily","draft":false,"original":true},"fields":{"id":"es6-daily-13-proxy-and-reflect","slug":"/blog/2017/12/20/es6-daily-13-proxy-and-reflect","type":"blog","date":"2017-12-20"}}},{"node":{"id":"eb3a8f9d-9091-541e-aaa7-f316543981a2","frontmatter":{"title":"每天一点ES6(2)：let 和 const","description":"终于，JavaScript 也能用上块级作用域和常量了","tags":["ecmascript","2015","es6","javascript","let","const"],"cover":{"publicURL":"/static/0950334fb8899f1006423341cbfeecb9/es6daily.jpg"},"series":"es6daily","draft":false,"original":true},"fields":{"id":"es6-daily-02-let-and-const","slug":"/blog/2016/01/25/es6-daily-02-let-and-const","type":"blog","date":"2016-01-25"}}},{"node":{"id":"84b7c3cf-4d2d-5dcd-9990-4d3b389814f0","frontmatter":{"title":"每天一点ES6(3)：解构赋值","description":"让你一次赋个够","tags":["ecmascript","2015","es6","javascript","destructuring"],"cover":{"publicURL":"/static/0950334fb8899f1006423341cbfeecb9/es6daily.jpg"},"series":"es6daily","draft":false,"original":true},"fields":{"id":"es6-daily-03-destructuring","slug":"/blog/2016/02/02/es6-daily-03-destructuring","type":"blog","date":"2016-02-02"}}},{"node":{"id":"74ab144b-9216-540a-a5b6-e4f706fc219b","frontmatter":{"title":"每天一点ES6(4)：Babel","description":"《圣经》的光辉，永恒！","tags":["ecmascript","2015","es6","javascript","babel","npm"],"cover":{"publicURL":"/static/0950334fb8899f1006423341cbfeecb9/es6daily.jpg"},"series":"es6daily","draft":false,"original":true},"fields":{"id":"es6-daily-04-babel","slug":"/blog/2016/02/19/es6-daily-04-babel","type":"blog","date":"2016-02-19"}}},{"node":{"id":"5877d054-fb30-5e95-8b28-17d690660184","frontmatter":{"title":"电梯调度算法","description":"上上下下的感受","tags":["elevator","algorithm","project"],"cover":{"publicURL":"/static/7b7f4cefe4c7bf293ff2cdb266af33d9/elevator.jpg"},"series":"","draft":false,"original":true},"fields":{"id":"elevator","slug":"/blog/2016/02/16/elevator","type":"blog","date":"2016-02-16"}}},{"node":{"id":"55898dbe-23b7-556a-af60-02ccc40c7a2a","frontmatter":{"title":"每天一点ES6(5)：字符串的扩展","description":"不变的字符串现在更加多变了","tags":["ecmascript","2015","es6","javascript","string"],"cover":{"publicURL":"/static/0950334fb8899f1006423341cbfeecb9/es6daily.jpg"},"series":"es6daily","draft":false,"original":true},"fields":{"id":"es6-daily-05-string","slug":"/blog/2016/04/05/es6-daily-05-string","type":"blog","date":"2016-04-05"}}},{"node":{"id":"9cf0b0ff-919c-5d4b-bcd3-9330508608cc","frontmatter":{"title":"每天一点ES6(6)：正则的扩展","description":"四字节 Unicode 的春天","tags":["ecmascript","2015","es6","javascript","regular","expression","regexp"],"cover":{"publicURL":"/static/0950334fb8899f1006423341cbfeecb9/es6daily.jpg"},"series":"es6daily","draft":false,"original":true},"fields":{"id":"es6-daily-06-regexp","slug":"/blog/2016/04/06/es6-daily-06-regexp","type":"blog","date":"2016-04-06"}}},{"node":{"id":"c6168388-b0a3-59e1-bd2a-2ee728c71a87","frontmatter":{"title":"每天一点ES6(7)：数值的扩展","description":"每一个数字都不能放过","tags":["ecmascript","2015","es6","javascript","number"],"cover":{"publicURL":"/static/0950334fb8899f1006423341cbfeecb9/es6daily.jpg"},"series":"es6daily","draft":false,"original":true},"fields":{"id":"es6-daily-07-number","slug":"/blog/2016/04/12/es6-daily-07-number","type":"blog","date":"2016-04-12"}}},{"node":{"id":"a6a47b16-74c7-5d9c-a530-78ce7c5fc9c2","frontmatter":{"title":"5 分钟彻底明白 JSONP","description":"说穿了，其实没那么难","tags":["javascript","jsonp"],"cover":{"publicURL":"/static/f8f2d118b15646398f7d00e19eb17ff9/jsonp.jpg"},"series":"","draft":false,"original":true},"fields":{"id":"jsonp","slug":"/blog/2016/08/17/jsonp","type":"blog","date":"2016-08-17"}}},{"node":{"id":"54aab46c-595d-5e16-b5ee-9b8c471a57db","frontmatter":{"title":"每天一点ES6(8)：数组的扩展","description":"别拿语法糖不当干粮","tags":["ecmascript","2015","es6","javascript","array"],"cover":{"publicURL":"/static/0950334fb8899f1006423341cbfeecb9/es6daily.jpg"},"series":"es6daily","draft":false,"original":true},"fields":{"id":"es6-daily-08-array","slug":"/blog/2016/07/26/es6-daily-08-array","type":"blog","date":"2016-07-26"}}},{"node":{"id":"d2b40478-e158-5448-99ac-51de602d98b6","frontmatter":{"title":"每天一点ES6(9)：函数的扩展","description":"博采众长的实用语法糖","tags":["ecmascript","2015","es6","javascript","function"],"cover":{"publicURL":"/static/0950334fb8899f1006423341cbfeecb9/es6daily.jpg"},"series":"es6daily","draft":false,"original":true},"fields":{"id":"es6-daily-09-function","slug":"/blog/2016/12/20/es6-daily-09-function","type":"blog","date":"2016-12-20"}}},{"node":{"id":"16d261c5-a0ce-5f9e-81e2-f1034254846b","frontmatter":{"title":"使用 Sublime Text 编写 LaTeX","description":"用你最熟悉的工具来写 LaTeX 吧","tags":["sublime","latex"],"cover":{"publicURL":"/static/e7689b7e9fe6160a6ed614a10125ca29/latex-with-sublime-text.jpg"},"series":"","draft":false,"original":true},"fields":{"id":"latex-with-sublime-text","slug":"/blog/2015/04/01/latex-with-sublime-text","type":"blog","date":"2015-04-01"}}},{"node":{"id":"34603905-f3b9-5d64-aea2-22e4763ceb27","frontmatter":{"title":"时间是什么颜色的","description":"如果时间有颜色……","tags":["color","time","project"],"cover":{"publicURL":"/static/03c874556dd31d9db5f30b7609751b92/tik-tok-color.jpg"},"series":"","draft":false,"original":true},"fields":{"id":"tik-tok-color","slug":"/blog/2015/02/11/tik-tok-color","type":"blog","date":"2015-02-11"}}},{"node":{"id":"eed17ff1-3597-5706-91c0-25f26af1c8ad","frontmatter":{"title":"MIUI 图标缓存问题","description":"离奇失踪的图标","tags":["android","miui","icon","cache"],"cover":{"publicURL":"/static/2e66c31a61d5319c1849ea082e8c80ee/miui-icon-cache.jpg"},"series":"","draft":false,"original":true},"fields":{"id":"miui-icon-cache","slug":"/blog/2015/04/18/miui-icon-cache","type":"blog","date":"2015-04-18"}}},{"node":{"id":"1dd94850-d54c-5dee-958a-56dd1fdcd2a4","frontmatter":{"title":"Webpack \"Invalid Host Header\"","description":"更新有风险，更新需谨慎……","tags":["webpack","dev","server","invalid","host"],"cover":{"publicURL":"/static/977bc2ebe23a9b6b10fdac4b470847b8/webpack-dev-server.jpg"},"series":"","draft":false,"original":true},"fields":{"id":"webpack-dev-server-invalid-host-header","slug":"/blog/2017/05/04/webpack-dev-server-invalid-host-header","type":"blog","date":"2017-05-04"}}},{"node":{"id":"5b5a084b-eeb2-57ab-b981-4c8b9d82ce9e","frontmatter":{"title":"一个非著名前端开发者的 2016","description":"回顾 2016，是充实的一年，不负青春。2017 加油继续！","tags":["summary","2016","2017"],"cover":{"publicURL":"/static/d4bc85d6ff1aa8985e03c3875f90ea51/summary-2016.jpg"},"series":"summary","draft":false,"original":true},"fields":{"id":"summary-2016","slug":"/blog/2016/12/31/summary-2016","type":"blog","date":"2016-12-31"}}},{"node":{"id":"0563bb73-7712-51a4-809b-0649e646184f","frontmatter":{"title":"substr() 和 substring() 的区别","description":"两个函数，傻傻分不清楚","tags":["javascript","substr","substring","slice"],"cover":{"publicURL":"/static/289ad52fc38963e15549cd1dc24678e4/substring.jpg"},"series":"","draft":false,"original":true},"fields":{"id":"substr-and-substring","slug":"/blog/2015/05/15/substr-and-substring","type":"blog","date":"2015-05-15"}}},{"node":{"id":"1711cb2b-a1df-521e-a2ad-2baac24ddd99","frontmatter":{"title":"纯 CSS3 绘制月饼","description":"中秋佳节，用CSS3来画个月饼吧","tags":["css","mooncake","project"],"cover":{"publicURL":"/static/9aaefaae86216c79623893c080f1ccc2/css3-mooncake.jpg"},"series":"","draft":false,"original":true},"fields":{"id":"css3-mooncake","slug":"/blog/2015/09/27/css3-mooncake","type":"blog","date":"2015-09-27"}}},{"node":{"id":"b3edad58-2d88-58b7-a4cd-56f1a91bb49d","frontmatter":{"title":"栈计算器","description":"通过“栈”实现的方程式计算器","tags":["stack","calculator","algorithm","project"],"cover":{"publicURL":"/static/256bbf9439e7f58974c946bc16f54832/stack-calculator.jpg"},"series":"","draft":false,"original":true},"fields":{"id":"stack-calculator","slug":"/blog/2015/02/10/stack-calculator","type":"blog","date":"2015-02-10"}}}]},"markdownRemark":{"html":"<h2>标准这事儿吧……</h2>\n<p>ES 2019（ES 10）标准于年前正式发布，借此机会，我们来看看都有哪些特性有幸转正吧。顺带把 ES 2018 的内容也补一下。</p>\n<p>ECMAScript 标准的制定过程，自 2015 年大改，至今已经是第 5 个年头了，想必大家都心里有数了。与 Java 等语言不同，JS 并非先制定标准再开始使用，恰恰相反，是大家先用着，觉得合适的，才收录进标准。标准的存在更像是一个“年度优秀特性合集”。对绝大部分开发者来说，一项特性进没进标准不重要，Babel 支不支持才重要。标准你随便写，不用 Babel 算我输。</p>\n<p>那么接下来，我们就来看看 2018 和 2019 两个年度的大合集都有些啥吧。</p>\n<h2>ES2018（ES9）</h2>\n<h3>1）异步迭代器（Asynchronous Iteration）</h3>\n<p>总有那么些时候，我们会想要同步执行一些异步的操作，比如下面这样的：</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre style=\"counter-reset: linenumber NaN\" class=\"gatsby-code-js line-numbers\"><code class=\"gatsby-code-js\"><span class=\"token keyword\">const</span> actions <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span>\n  Promise<span class=\"token punctuation\">.</span><span class=\"token function\">resolve</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n  Promise<span class=\"token punctuation\">.</span><span class=\"token function\">resolve</span><span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n  Promise<span class=\"token punctuation\">.</span><span class=\"token function\">resolve</span><span class=\"token punctuation\">(</span><span class=\"token number\">3</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">]</span></code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n<p>利用 <code class=\"gatsby-code-text\">async / await</code> 语法，我们可以很轻松的做到这点。</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre style=\"counter-reset: linenumber NaN\" class=\"gatsby-code-js line-numbers\"><code class=\"gatsby-code-js\"><span class=\"token keyword\">async</span> <span class=\"token keyword\">function</span> <span class=\"token function\">process</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">actions</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> action <span class=\"token keyword\">of</span> actions<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">await</span> <span class=\"token function\">asyncFunc</span><span class=\"token punctuation\">(</span>action<span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n<p>上面的写法，会按顺序执行 <code class=\"gatsby-code-text\">asyncFunc</code>，上一个结束之后才会开始下一个，每次得到的 <code class=\"gatsby-code-text\">action</code> 都是一个异步操作本身（比如这里是一个 Promise 对象）。</p>\n<p>ES 2018 为我们提供了一种新的方式，在前面代码的基础之上，让每次得到的 <code class=\"gatsby-code-text\">action</code> 直接是异步操作完成之后的结果（比如这里是 Promise 被 resolve 之后的结果）。</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre style=\"counter-reset: linenumber NaN\" class=\"gatsby-code-js line-numbers\"><code class=\"gatsby-code-js\"><span class=\"token keyword\">async</span> <span class=\"token keyword\">function</span> <span class=\"token function\">process</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">actions</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">for</span> <span class=\"token keyword\">await</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> action <span class=\"token keyword\">of</span> actions<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token function\">asyncFunc</span><span class=\"token punctuation\">(</span>action<span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n<h3>2）Rest/Spread Properties 开始适用于对象</h3>\n<p>这是一个从 ES 2015 开始就被广泛使用的特性，只不过 ES 2015 的标准只支持用于数组，从 ES 2018 开始也支持对象了。</p>\n<p>事实上 Map、Set、String 同样支持 <code class=\"gatsby-code-text\">...</code>，但具体是哪个版本引入的我还真没数。（反正我已经用了很久了，不管了）</p>\n<h3>3）Promise.finally</h3>\n<p>正如它的名字，finally。这也是个用了好久终于进标准的特性。</p>\n<p>在处理 Promise 的返回时，我们经常会遇到这样的情况：无论结果状态是 resolved 还是 rejected，都执行一样的逻辑。</p>\n<p>早先遇到这种情况，我们不得不在 <code class=\"gatsby-code-text\">then()</code> 和 <code class=\"gatsby-code-text\">catch()</code> 里都写一遍，现在可以一次性写在 <code class=\"gatsby-code-text\">finally()</code> 里。一个 <code class=\"gatsby-code-text\">finally()</code> 就等价于一组回调函数相同的 <code class=\"gatsby-code-text\">then()</code> 和 <code class=\"gatsby-code-text\">catch()</code>。</p>\n<p>虽然名字叫“最终”，但并不代表这是 Promise 执行的终点。<code class=\"gatsby-code-text\">finally()</code> 后面还可以继续跟 <code class=\"gatsby-code-text\">then()</code> 和 <code class=\"gatsby-code-text\">catch()</code>，无限跟。</p>\n<h3>4）移除对“在‘带标签的模版字面量’中使用非法转义序列”的限制</h3>\n<p>从这里开始的内容比较高阶，一般用不到，赶时间的话你可以跳过，直接去看 ES 2019。</p>\n<p>这一节的标题有点绕，我们拆开来讲。首先是“带标签的模版字面量”。</p>\n<p>ES 2015 引入了“模板字面量”的特性，相信大家都很熟悉了，长这样：</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre style=\"counter-reset: linenumber NaN\" class=\"gatsby-code-js line-numbers\"><code class=\"gatsby-code-js\"><span class=\"token keyword\">const</span> name <span class=\"token operator\">=</span> <span class=\"token string\">'John'</span>\n<span class=\"token keyword\">const</span> greetings <span class=\"token operator\">=</span> <span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">Hi, </span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>name<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token template-punctuation string\">`</span></span> <span class=\"token comment\">// 'Hi, John'</span></code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span></span></pre></div>\n<p>这个特性有一个生僻用法，它允许我们自定义一个字符串模板函数，比如下面这样：</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre style=\"counter-reset: linenumber NaN\" class=\"gatsby-code-js line-numbers\"><code class=\"gatsby-code-js\"><span class=\"token keyword\">function</span> <span class=\"token function\">myTag</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">strings<span class=\"token punctuation\">,</span> <span class=\"token operator\">...</span>params</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token comment\">// strings: ['that ', ' is a ', '']</span>\n\n  <span class=\"token keyword\">const</span> name <span class=\"token operator\">=</span> params<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span>\n  <span class=\"token keyword\">const</span> age <span class=\"token operator\">=</span> params<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span>\n  <span class=\"token keyword\">const</span> title <span class=\"token operator\">=</span> age <span class=\"token operator\">></span> <span class=\"token number\">99</span> <span class=\"token operator\">?</span> <span class=\"token string\">'centenarian'</span> <span class=\"token operator\">:</span> <span class=\"token string\">'youngster'</span>\n\n  <span class=\"token keyword\">return</span> strings<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">+</span> name <span class=\"token operator\">+</span> strings<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">+</span> title\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">const</span> person <span class=\"token operator\">=</span> <span class=\"token string\">'Mike'</span>\n<span class=\"token keyword\">const</span> age <span class=\"token operator\">=</span> <span class=\"token number\">28</span>\n<span class=\"token keyword\">const</span> output <span class=\"token operator\">=</span> myTag<span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">that </span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span> person <span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\"> is a </span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span> age <span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token template-punctuation string\">`</span></span>\n<span class=\"token comment\">// that Mike is a youngster</span></code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n<p>这就是“带标签的模版字面量”。尽管我严重怀疑这个用法的实用性（或许是觉得这样更加语义化？普通函数语义也不差啊？），但 ES 2018 还是选择了对这个特性进行完善。</p>\n<p>ES 2016 为这个特性加入了对转义序列的支持，比如八进制（\\ 开头）、十六进制（\\x 开头）、Unicode 字符（\\u 开头），但前提必须是一个有效的转义序列。如果是无效的序列，会报错。</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre style=\"counter-reset: linenumber NaN\" class=\"gatsby-code-js line-numbers\"><code class=\"gatsby-code-js\">latex<span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">\\u00A9</span><span class=\"token template-punctuation string\">`</span></span>   <span class=\"token comment\">// 合法，表示“版权符号”</span>\nlatex<span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">\\unicode</span><span class=\"token template-punctuation string\">`</span></span> <span class=\"token comment\">// 不合法，报错</span></code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span></span></pre></div>\n<p>ES 2018 去掉了这个限制，主要是考虑到对一些领域特定语言的支持，比如 <a href=\"https://www.latex-project.org\" target=\"_blank\" rel=\"noopener noreferrer\">LaTeX</a>。（学术界一种常用的标记型语言，类似 HTML，其语法会用到大量形如转义序列的指令，如<code class=\"gatsby-code-text\">\\section</code>、<code class=\"gatsby-code-text\">\\frac</code>、<code class=\"gatsby-code-text\">\\sum</code> 等）</p>\n<p>但去掉限制只是说不报错了，模板中的无效转义序列会被替换为 undefined。比如下面这样：</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre style=\"counter-reset: linenumber NaN\" class=\"gatsby-code-js line-numbers\"><code class=\"gatsby-code-js\"><span class=\"token keyword\">function</span> <span class=\"token function\">myTag</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">template<span class=\"token punctuation\">,</span> <span class=\"token operator\">...</span>params</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span> template<span class=\"token punctuation\">,</span> params <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">const</span> foo <span class=\"token operator\">=</span> <span class=\"token string\">'foo'</span>\n<span class=\"token keyword\">const</span> bar <span class=\"token operator\">=</span> <span class=\"token string\">'bar'</span>\nmyTag<span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">aaa</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>foo<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\">\\unicode</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>bar<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\">bbb</span><span class=\"token template-punctuation string\">`</span></span>\n<span class=\"token comment\">/* {\n  template: ['aaa', undefined, 'bbb', raw: ['aaa', '\\unicode', 'bbb]],\n  params: ['foo', 'bar']\n} */</span></code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n<p>上面的代码里，<code class=\"gatsby-code-text\">template</code> 是模板部分被 <code class=\"gatsby-code-text\">${foo}</code> 等变量分割形成的数组；<code class=\"gatsby-code-text\">params</code> 就是 <code class=\"gatsby-code-text\">${foo}</code> 等变量组成的数组。可以看到，<code class=\"gatsby-code-text\">\\unicode</code> 由于是无效的转义序列，被替换为 <code class=\"gatsby-code-text\">undefined</code>，但在 <code class=\"gatsby-code-text\">template.raw</code> 里得以保留。</p>\n<p><code class=\"gatsby-code-text\">template.raw</code> 是“带标签的模版字面量”中 <code class=\"gatsby-code-text\">template</code> 参数特有的一个属性，保存了未被替换的原始字符串。</p>\n<p>这样一来，既避免了报错，又保留了开发者自行处理这些转义序列的能力。</p>\n<h3>5）关于正则表达式的一些改进</h3>\n<h4>5.1）<code class=\"gatsby-code-text\">s</code> 标志（dotAll 模式）</h4>\n<p>在正则表达式中，点号 <code class=\"gatsby-code-text\">.</code> 表示匹配任一单个字符，但这不包含换行符（如：<code class=\"gatsby-code-text\">\\n</code>、<code class=\"gatsby-code-text\">\\r</code>、<code class=\"gatsby-code-text\">\\f</code> 等）。</p>\n<p>现在可以通过在尾部增加 <code class=\"gatsby-code-text\">s</code> 标志的方式，让它匹配了。</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre style=\"counter-reset: linenumber NaN\" class=\"gatsby-code-js line-numbers\"><code class=\"gatsby-code-js\"><span class=\"token regex\">/hello.world/</span><span class=\"token punctuation\">.</span><span class=\"token function\">test</span><span class=\"token punctuation\">(</span><span class=\"token string\">'hello\\nworld'</span><span class=\"token punctuation\">)</span>  <span class=\"token comment\">// false</span>\n<span class=\"token operator\">/</span>hello<span class=\"token punctuation\">.</span>world<span class=\"token operator\">/</span>s<span class=\"token punctuation\">.</span><span class=\"token function\">test</span><span class=\"token punctuation\">(</span><span class=\"token string\">'hello\\nworld'</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// true</span></code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span></span></pre></div>\n<h4>5.2）扩展 Unicode 匹配范围</h4>\n<p>一直以来，要编写正则表达式来匹配各种 Unicode 字符并不容易，像 <code class=\"gatsby-code-text\">\\w</code>、<code class=\"gatsby-code-text\">\\W</code>、<code class=\"gatsby-code-text\">\\d</code> 等都只能匹配英文字符和数字，对于除此之外的字符就很难匹配了，例如非英语的文字。</p>\n<p>幸运的是，Unicode 为每个符号添加了元数据属性，并使用它来对各种符号进行分组和描述。例如，Unicode 数据库给所有印地语字符（हिन्दी）设置了 Script 属性，取值为 Devanagari（梵文），还设置了一个 Script_Extensions 属性，同样取值为 Devanagari。我们可以通过搜索 Script=Devanagari 来得到所有印地文字符。</p>\n<p>ES 2018 允许正则表达式通过 <code class=\"gatsby-code-text\">\\p{...}</code> 来扩展 Unicode 符号的匹配范围。例如：</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre style=\"counter-reset: linenumber NaN\" class=\"gatsby-code-js line-numbers\"><code class=\"gatsby-code-js\"><span class=\"token comment\">// 扩展匹配范围，允许匹配希腊字符</span>\n<span class=\"token keyword\">const</span> reGreekSymbol <span class=\"token operator\">=</span> <span class=\"token regex\">/\\p{Script=Greek}/u</span>\nreGreekSymbol<span class=\"token punctuation\">.</span><span class=\"token function\">test</span><span class=\"token punctuation\">(</span><span class=\"token string\">'π'</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// true</span>\n\n<span class=\"token comment\">// 扩展匹配范围，允许匹配 Emoji</span>\n<span class=\"token keyword\">const</span> reEmoji <span class=\"token operator\">=</span> <span class=\"token regex\">/\\p{Emoji}\\p{Emoji_Modifier}/u</span>\nreEmoji<span class=\"token punctuation\">.</span><span class=\"token function\">test</span><span class=\"token punctuation\">(</span><span class=\"token string\">'✌🏽'</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">//true</span></code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n<p>我们还可以通过 <code class=\"gatsby-code-text\">\\P{...}</code>（注意，大写 P）来去反，缩小匹配范围。</p>\n<h4>5.3）正则表达式命名捕获组</h4>\n<p>正则表达式支持通过括号在一个表达式中指定多个捕获组，就像下面这样：</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre style=\"counter-reset: linenumber NaN\" class=\"gatsby-code-js line-numbers\"><code class=\"gatsby-code-js\"><span class=\"token keyword\">const</span>\n  reDate <span class=\"token operator\">=</span> <span class=\"token regex\">/([0-9]{4})-([0-9]{2})-([0-9]{2})/</span><span class=\"token punctuation\">,</span>\n  match  <span class=\"token operator\">=</span> reDate<span class=\"token punctuation\">.</span><span class=\"token function\">exec</span><span class=\"token punctuation\">(</span><span class=\"token string\">'2019-02-11'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n  year   <span class=\"token operator\">=</span> match<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> <span class=\"token comment\">// 2019</span>\n  month  <span class=\"token operator\">=</span> match<span class=\"token punctuation\">[</span><span class=\"token number\">2</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> <span class=\"token comment\">// 02</span>\n  day    <span class=\"token operator\">=</span> match<span class=\"token punctuation\">[</span><span class=\"token number\">3</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 11</span></code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n<p>这样的代码虽然可以跑通，但阅读起来比较难懂，而且修改正则有可能会影响到匹配内容的索引。</p>\n<p>ES 2018 允许在 <code class=\"gatsby-code-text\">(</code> 后立即使用符号 <code class=\"gatsby-code-text\">?&lt;name&gt;</code> 对捕获组进行命名，匹配失败的会返回 <code class=\"gatsby-code-text\">undefined</code>，就像下面这样：</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre style=\"counter-reset: linenumber NaN\" class=\"gatsby-code-js line-numbers\"><code class=\"gatsby-code-js\"><span class=\"token keyword\">const</span>\n  reDate <span class=\"token operator\">=</span> <span class=\"token regex\">/(?&lt;year>[0-9]{4})-(?&lt;month>[0-9]{2})-(?&lt;day>[0-9]{2})/</span><span class=\"token punctuation\">,</span>\n  match  <span class=\"token operator\">=</span> reDate<span class=\"token punctuation\">.</span><span class=\"token function\">exec</span><span class=\"token punctuation\">(</span><span class=\"token string\">'2019-02-11'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n  year   <span class=\"token operator\">=</span> match<span class=\"token punctuation\">.</span>groups<span class=\"token punctuation\">.</span>year<span class=\"token punctuation\">,</span>  <span class=\"token comment\">// 2019</span>\n  month  <span class=\"token operator\">=</span> match<span class=\"token punctuation\">.</span>groups<span class=\"token punctuation\">.</span>month<span class=\"token punctuation\">,</span> <span class=\"token comment\">// 02</span>\n  day    <span class=\"token operator\">=</span> match<span class=\"token punctuation\">.</span>groups<span class=\"token punctuation\">.</span>day   <span class=\"token comment\">// 11</span></code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n<p>命名捕获组也可以用在 <code class=\"gatsby-code-text\">replace()</code> 中，用 <code class=\"gatsby-code-text\">$&lt;name&gt;</code> 进行引用（注意，虽然这里的语法和模板字面量很像，但并不是）。例如改变日期格式的顺序：</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre style=\"counter-reset: linenumber NaN\" class=\"gatsby-code-js line-numbers\"><code class=\"gatsby-code-js\"><span class=\"token keyword\">const</span>\n  reDate <span class=\"token operator\">=</span> <span class=\"token regex\">/(?&lt;year>[0-9]{4})-(?&lt;month>[0-9]{2})-(?&lt;day>[0-9]{2})/</span><span class=\"token punctuation\">,</span>\n  d      <span class=\"token operator\">=</span> <span class=\"token string\">'2019-02-11'</span><span class=\"token punctuation\">,</span>\n  usDate <span class=\"token operator\">=</span> d<span class=\"token punctuation\">.</span><span class=\"token function\">replace</span><span class=\"token punctuation\">(</span>reDate<span class=\"token punctuation\">,</span> <span class=\"token string\">'$&lt;month>-$&lt;day>-$&lt;year>'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 02-11-2019</span></code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span><span></span></span></pre></div>\n<h4>5.4）正则表达式的反向断言（lookbehind）</h4>\n<p>正则表达式支持正向断言（lookahead），例如：</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre style=\"counter-reset: linenumber NaN\" class=\"gatsby-code-js line-numbers\"><code class=\"gatsby-code-js\"><span class=\"token comment\">// 正向肯定查找</span>\n<span class=\"token operator\">/</span><span class=\"token function\">x</span><span class=\"token punctuation\">(</span><span class=\"token operator\">?</span><span class=\"token operator\">=</span>y<span class=\"token punctuation\">)</span><span class=\"token operator\">/</span> <span class=\"token comment\">// 匹配 x，但仅当 x 后面紧跟着 y 时</span>\n<span class=\"token operator\">/</span><span class=\"token function\">Jack</span><span class=\"token punctuation\">(</span><span class=\"token operator\">?</span><span class=\"token operator\">=</span>Sprat<span class=\"token punctuation\">)</span><span class=\"token operator\">/</span><span class=\"token punctuation\">.</span><span class=\"token function\">exec</span><span class=\"token punctuation\">(</span><span class=\"token string\">'JackSprat'</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// 'Jack'</span>\n<span class=\"token operator\">/</span><span class=\"token function\">Jack</span><span class=\"token punctuation\">(</span><span class=\"token operator\">?</span><span class=\"token operator\">=</span>Sprat<span class=\"token punctuation\">)</span><span class=\"token operator\">/</span><span class=\"token punctuation\">.</span><span class=\"token function\">exec</span><span class=\"token punctuation\">(</span><span class=\"token string\">'JackFrost'</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// null</span>\n<span class=\"token operator\">/</span><span class=\"token function\">Jack</span><span class=\"token punctuation\">(</span><span class=\"token operator\">?</span><span class=\"token operator\">=</span>Sprat<span class=\"token operator\">|</span>Frost<span class=\"token punctuation\">)</span><span class=\"token operator\">/</span><span class=\"token punctuation\">.</span><span class=\"token function\">exec</span><span class=\"token punctuation\">(</span><span class=\"token string\">'JackFrost'</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// 'Jack'</span>\n\n<span class=\"token comment\">// 正向否定查找</span>\n<span class=\"token operator\">/</span><span class=\"token function\">x</span><span class=\"token punctuation\">(</span><span class=\"token operator\">?</span><span class=\"token operator\">!</span>y<span class=\"token punctuation\">)</span><span class=\"token operator\">/</span> <span class=\"token comment\">// 匹配 x，但仅当 x 后面不紧跟着 y 时</span>\n<span class=\"token operator\">/</span><span class=\"token function\">Jack</span><span class=\"token punctuation\">(</span><span class=\"token operator\">?</span><span class=\"token operator\">!</span>Sprat<span class=\"token punctuation\">)</span><span class=\"token operator\">/</span><span class=\"token punctuation\">.</span><span class=\"token function\">exec</span><span class=\"token punctuation\">(</span><span class=\"token string\">'JackSprat'</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// null</span>\n<span class=\"token operator\">/</span><span class=\"token function\">Jack</span><span class=\"token punctuation\">(</span><span class=\"token operator\">?</span><span class=\"token operator\">!</span>Sprat<span class=\"token punctuation\">)</span><span class=\"token operator\">/</span><span class=\"token punctuation\">.</span><span class=\"token function\">exec</span><span class=\"token punctuation\">(</span><span class=\"token string\">'Jack Sprat'</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// 'Jack'</span></code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n<p>ES 2018 引入了工作方式相同，但是方向相反的反向断言（lookbehind），语法上的差别就在于 <code class=\"gatsby-code-text\">?</code> 变成了 <code class=\"gatsby-code-text\">?&lt;</code>，例如：</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre style=\"counter-reset: linenumber NaN\" class=\"gatsby-code-js line-numbers\"><code class=\"gatsby-code-js\"><span class=\"token comment\">// 反向肯定断言</span>\n<span class=\"token operator\">/</span><span class=\"token punctuation\">(</span><span class=\"token operator\">?</span><span class=\"token operator\">&lt;</span>x<span class=\"token punctuation\">)</span>y<span class=\"token operator\">/</span> <span class=\"token comment\">// 匹配 y，但仅当它紧跟在 x 后面时</span>\n<span class=\"token operator\">/</span><span class=\"token punctuation\">(</span><span class=\"token operator\">?</span><span class=\"token operator\">&lt;=</span>\\<span class=\"token constant\">D</span><span class=\"token punctuation\">)</span>\\d<span class=\"token operator\">+</span><span class=\"token operator\">/</span><span class=\"token punctuation\">.</span><span class=\"token function\">exec</span><span class=\"token punctuation\">(</span><span class=\"token string\">'$123.89'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span> <span class=\"token comment\">// 123.89</span>\n\n<span class=\"token comment\">// 反向否定断言</span>\n<span class=\"token operator\">/</span><span class=\"token punctuation\">(</span><span class=\"token operator\">?</span><span class=\"token operator\">&lt;</span><span class=\"token operator\">!</span>x<span class=\"token punctuation\">)</span>y<span class=\"token operator\">/</span> <span class=\"token comment\">// 匹配 y，但仅当它紧跟在 x 后面时</span>\n<span class=\"token operator\">/</span><span class=\"token punctuation\">(</span><span class=\"token operator\">?</span><span class=\"token operator\">&lt;</span><span class=\"token operator\">!</span>\\<span class=\"token constant\">D</span><span class=\"token punctuation\">)</span>\\d<span class=\"token operator\">+</span><span class=\"token operator\">/</span><span class=\"token punctuation\">.</span><span class=\"token function\">exec</span><span class=\"token punctuation\">(</span><span class=\"token string\">'$123.89'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span> <span class=\"token comment\">// null</span></code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n<h2>ES 2019（ES 10）</h2>\n<h3>1）JSON 成为 ECMAScript 的完全子集</h3>\n<p>从学习 JSON 的第一课起，我们就被告知 JSON 应该是专为 JavaScript 而存在的，因此 JSON 是 JavaScript 的子集这一点应该毫无争议啊，这算什么新特性！？</p>\n<p>然而细心的开发者却发现，有两个符号是例外：行分隔符（U + 2028）和段分隔符（U + 2029）。在 <code class=\"gatsby-code-text\">JSON.parse()</code> 中使用这两个会报语法错误。</p>\n<p>ES 2019 把这两个也收入囊中，从今往后，JSON 真正成为 ECMAScript 的完全子集，一个都不少。</p>\n<h3>2）更友好的 <code class=\"gatsby-code-text\">JSON.stringify()</code></h3>\n<p>过去，对于一些超出 Unicode 范围的转义序列，<code class=\"gatsby-code-text\">JSON.stringify()</code> 会输出未知字符。</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre style=\"counter-reset: linenumber NaN\" class=\"gatsby-code-js line-numbers\"><code class=\"gatsby-code-js\"><span class=\"token constant\">JSON</span><span class=\"token punctuation\">.</span><span class=\"token function\">stringify</span><span class=\"token punctuation\">(</span><span class=\"token string\">'\\uDF06\\uD834'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// '\"��\"'</span>\n<span class=\"token constant\">JSON</span><span class=\"token punctuation\">.</span><span class=\"token function\">stringify</span><span class=\"token punctuation\">(</span><span class=\"token string\">'\\uDEAD'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// '\"�\"'</span></code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span></span></pre></div>\n<p>现在，<code class=\"gatsby-code-text\">JSON.stringify()</code> 会为其重新转义，显示为有效的 Unicode 序列。</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre style=\"counter-reset: linenumber NaN\" class=\"gatsby-code-js line-numbers\"><code class=\"gatsby-code-js\"><span class=\"token constant\">JSON</span><span class=\"token punctuation\">.</span><span class=\"token function\">stringify</span><span class=\"token punctuation\">(</span><span class=\"token string\">'\\uDF06\\uD834'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// '\"\\\\udf06\\\\ud834\"'</span>\n<span class=\"token constant\">JSON</span><span class=\"token punctuation\">.</span><span class=\"token function\">stringify</span><span class=\"token punctuation\">(</span><span class=\"token string\">'\\uDEAD'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// '\"\\\\udead\"'</span></code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span></span></pre></div>\n<p>这和 ES 2018 中对“带标签的模板字面量”的修正，似乎有些许联系。结合历代 ECMAScript 标准，ECMAScript 在处理 Unicode 的问题上着实下了不少功夫。</p>\n<h3>3）<code class=\"gatsby-code-text\">Function.prototpye.toString()</code> 显示更加完善</h3>\n<p>对一个函数使用 <code class=\"gatsby-code-text\">toString()</code> 会返回函数定义的内容。</p>\n<p>过去，返回的内容中 <code class=\"gatsby-code-text\">function</code> 关键字和函数名之间的注释，以及函数名和参数列表左括号之间的空格，是不会被打出来的。ES 2019 现在回精确返回这些内容，函数怎么定义的，这就就怎么显示。</p>\n<h3>4）<code class=\"gatsby-code-text\">Array.prorptype.flat()</code> 和 <code class=\"gatsby-code-text\">Array.prorptype.flatMap()</code></h3>\n<p>ES 2019 为数组新增两个函数。</p>\n<p><code class=\"gatsby-code-text\">flat()</code> 用于对数组进行降维，它可以接收一个参数，用于指定降多少维，默认为 1。降维最多降到一维。</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre style=\"counter-reset: linenumber NaN\" class=\"gatsby-code-js line-numbers\"><code class=\"gatsby-code-js\"><span class=\"token keyword\">const</span> array <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span><span class=\"token number\">3</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">]</span>\narray<span class=\"token punctuation\">.</span><span class=\"token function\">flat</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// [1, 2, [3]]</span>\narray<span class=\"token punctuation\">.</span><span class=\"token function\">flat</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// [1, 2, [3]]，默认降 1 维</span>\narray<span class=\"token punctuation\">.</span><span class=\"token function\">flat</span><span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// [1, 2, 3]</span>\narray<span class=\"token punctuation\">.</span><span class=\"token function\">flat</span><span class=\"token punctuation\">(</span><span class=\"token number\">3</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// [1, 2, 3]，最多降到一维</span></code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n<p><code class=\"gatsby-code-text\">flatMap()</code> 允许在对数组进行降维之前，先进行一轮映射，用法和 <code class=\"gatsby-code-text\">map()</code> 一样。然后再将映射的结果降低一个维度。可以说 <code class=\"gatsby-code-text\">arr.flatMap(fn)</code> 等效于 <code class=\"gatsby-code-text\">arr.map(fn).flat(1)</code>。（但是根据 <a href=\"https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Array/flatMap\" target=\"_blank\" rel=\"noopener noreferrer\">MDN</a>，<code class=\"gatsby-code-text\">flatMap()</code> 在效率上略胜一筹）</p>\n<p><code class=\"gatsby-code-text\">flatMap()</code> 也可以等效为 <code class=\"gatsby-code-text\">reduce()</code> 和 <code class=\"gatsby-code-text\">concat()</code> 的组合，下面这个案例来自 <a href=\"https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Array/flatMap#%E7%AD%89%E4%BB%B7%E6%93%8D%E4%BD%9C\" target=\"_blank\" rel=\"noopener noreferrer\">MDN</a>，但是……这不是一个 <code class=\"gatsby-code-text\">map</code> 就能搞定的事么？</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre style=\"counter-reset: linenumber NaN\" class=\"gatsby-code-js line-numbers\"><code class=\"gatsby-code-js\"><span class=\"token keyword\">var</span> arr1 <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n\narr1<span class=\"token punctuation\">.</span><span class=\"token function\">flatMap</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">x</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">[</span>x <span class=\"token operator\">*</span> <span class=\"token number\">2</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// 等价于</span>\narr1<span class=\"token punctuation\">.</span><span class=\"token function\">reduce</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">acc<span class=\"token punctuation\">,</span> x</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> acc<span class=\"token punctuation\">.</span><span class=\"token function\">concat</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span>x <span class=\"token operator\">*</span> <span class=\"token number\">2</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// [2, 4, 6, 8]</span></code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n<p><code class=\"gatsby-code-text\">flat()</code> 和 <code class=\"gatsby-code-text\">flatMap()</code> 都是返回新的数组，原数组不变。</p>\n<h3>5）<code class=\"gatsby-code-text\">String.prototype.trimStart()</code> 和 <code class=\"gatsby-code-text\">String.prototype.trimEnd()</code></h3>\n<p>ES 2019 为字符串也新增了两个函数：<code class=\"gatsby-code-text\">trimStart()</code> 和 <code class=\"gatsby-code-text\">trimEnd()</code>。用过 <code class=\"gatsby-code-text\">trim()</code> 的朋友都知道了，这两个函数各自负责只去掉单边的多余空格。<code class=\"gatsby-code-text\">trim()</code> 是两边都去。</p>\n<h3>6）<code class=\"gatsby-code-text\">Object.fromEntries()</code></h3>\n<p>从名字就能看出来，这是 <code class=\"gatsby-code-text\">Object.entries()</code> 的逆过程。</p>\n<h3>7）<code class=\"gatsby-code-text\">Symbol.prototype.description</code></h3>\n<p>Symbol 是 ES 2015 引入的新的原始类型，通常在创建 Symbol 时我们会附加一段描述。过去，只有把这个 Symbol 转成 String 才能看到这段描述，而且外层还套了个 'Symbol()' 字样。ES 2019 为 Symbol 新增了 <code class=\"gatsby-code-text\">description</code> 属性，专门用于查看这段描述。</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre style=\"counter-reset: linenumber NaN\" class=\"gatsby-code-js line-numbers\"><code class=\"gatsby-code-js\"><span class=\"token keyword\">const</span> sym <span class=\"token operator\">=</span> <span class=\"token function\">Symbol</span><span class=\"token punctuation\">(</span><span class=\"token string\">'The description'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token function\">String</span><span class=\"token punctuation\">(</span>sym<span class=\"token punctuation\">)</span> <span class=\"token comment\">// 'Symbol(The description)'</span>\nsym<span class=\"token punctuation\">.</span>description <span class=\"token comment\">// 'The description'</span></code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span></span></pre></div>\n<h3>8）可选的 <code class=\"gatsby-code-text\">catch</code> 绑定</h3>\n<p><code class=\"gatsby-code-text\">try...catch</code> 的语法大家都很熟悉了，过去，<code class=\"gatsby-code-text\">catch</code> 后面必须有一组括号，里面用一个变量（通常叫 <code class=\"gatsby-code-text\">e</code> 或者 <code class=\"gatsby-code-text\">err</code>）代表错误信息对象。现在这部分是可选的了，如果异常处理部分不需要错误信息，我们可以把它省略，像写 <code class=\"gatsby-code-text\">if...else</code> 一样写 <code class=\"gatsby-code-text\">try...catch</code>。</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre style=\"counter-reset: linenumber NaN\" class=\"gatsby-code-js line-numbers\"><code class=\"gatsby-code-js\"><span class=\"token keyword\">try</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">throw</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Error</span><span class=\"token punctuation\">(</span><span class=\"token string\">'Some Error'</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span> <span class=\"token keyword\">catch</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token function\">handleError</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// 这里没有用到错误信息，可以省略 catch 后面的 (e)。</span>\n<span class=\"token punctuation\">}</span></code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n<h2>遗憾</h2>\n<p>ES 2019 收录了非常多好用的特性，但还是有很多我们非常熟悉，甚至已经用了好久的特性没能进入标准，比如：</p>\n<ul>\n<li>\n<p>Stage 3（明年见？）</p>\n<ul>\n<li>Dynamic Import</li>\n<li>私有属性</li>\n</ul>\n</li>\n<li>\n<p>Stage 2（加油？）</p>\n<ul>\n<li>装饰器</li>\n</ul>\n</li>\n<li>\n<p>Stage 1（你们慢慢讨论，我们先用为敬）</p>\n<ul>\n<li>Observable</li>\n<li>Promise.try</li>\n<li>String.prototype.replaceAll</li>\n<li>do</li>\n</ul>\n</li>\n</ul>\n<p>不过这不重要，标准只是官宣，只要 Babel 支持就好，哈哈哈哈哈哈。</p>","frontmatter":{"title":"你可能已经知道的 ES 2018 和 2019","description":"好饭不怕晚","cover":{"publicURL":"/static/5646b4878e533cd7c725ce4c17984071/es2019.jpg"},"tags":["ecmascript","2018","2019"],"series":"ecmascript","draft":false},"fields":{"id":"es2018-and-es2019","date":"2019-02-11"},"headings":[{"value":"标准这事儿吧……","depth":2},{"value":"ES2018（ES9）","depth":2},{"value":"1）异步迭代器（Asynchronous Iteration）","depth":3},{"value":"2）Rest/Spread Properties 开始适用于对象","depth":3},{"value":"3）Promise.finally","depth":3},{"value":"4）移除对“在‘带标签的模版字面量’中使用非法转义序列”的限制","depth":3},{"value":"5）关于正则表达式的一些改进","depth":3},{"value":"5.1）<code class=\"gatsby-code-text\">s</code> 标志（dotAll 模式）","depth":4},{"value":"5.2）扩展 Unicode 匹配范围","depth":4},{"value":"5.3）正则表达式命名捕获组","depth":4},{"value":"5.4）正则表达式的反向断言（lookbehind）","depth":4},{"value":"ES 2019（ES 10）","depth":2},{"value":"1）JSON 成为 ECMAScript 的完全子集","depth":3},{"value":"2）更友好的 <code class=\"gatsby-code-text\">JSON.stringify()</code>","depth":3},{"value":"3）<code class=\"gatsby-code-text\">Function.prototpye.toString()</code> 显示更加完善","depth":3},{"value":"4）<code class=\"gatsby-code-text\">Array.prorptype.flat()</code> 和 <code class=\"gatsby-code-text\">Array.prorptype.flatMap()</code>","depth":3},{"value":"5）<code class=\"gatsby-code-text\">String.prototype.trimStart()</code> 和 <code class=\"gatsby-code-text\">String.prototype.trimEnd()</code>","depth":3},{"value":"6）<code class=\"gatsby-code-text\">Object.fromEntries()</code>","depth":3},{"value":"7）<code class=\"gatsby-code-text\">Symbol.prototype.description</code>","depth":3},{"value":"8）可选的 <code class=\"gatsby-code-text\">catch</code> 绑定","depth":3},{"value":"遗憾","depth":2}],"tableOfContents":"<ul>\n<li><a href=\"/blog/2019/02/11/es2018-and-es2019/#%E6%A0%87%E5%87%86%E8%BF%99%E4%BA%8B%E5%84%BF%E5%90%A7\">标准这事儿吧……</a></li>\n<li>\n<p><a href=\"/blog/2019/02/11/es2018-and-es2019/#es2018%EF%BC%88es9%EF%BC%89\">ES2018（ES9）</a></p>\n<ul>\n<li><a href=\"/blog/2019/02/11/es2018-and-es2019/#1%EF%BC%89%E5%BC%82%E6%AD%A5%E8%BF%AD%E4%BB%A3%E5%99%A8%EF%BC%88asynchronous-iteration%EF%BC%89\">1）异步迭代器（Asynchronous Iteration）</a></li>\n<li><a href=\"/blog/2019/02/11/es2018-and-es2019/#2%EF%BC%89restspread-properties-%E5%BC%80%E5%A7%8B%E9%80%82%E7%94%A8%E4%BA%8E%E5%AF%B9%E8%B1%A1\">2）Rest/Spread Properties 开始适用于对象</a></li>\n<li><a href=\"/blog/2019/02/11/es2018-and-es2019/#3%EF%BC%89promisefinally\">3）Promise.finally</a></li>\n<li><a href=\"/blog/2019/02/11/es2018-and-es2019/#4%EF%BC%89%E7%A7%BB%E9%99%A4%E5%AF%B9%E5%9C%A8%E5%B8%A6%E6%A0%87%E7%AD%BE%E7%9A%84%E6%A8%A1%E7%89%88%E5%AD%97%E9%9D%A2%E9%87%8F%E4%B8%AD%E4%BD%BF%E7%94%A8%E9%9D%9E%E6%B3%95%E8%BD%AC%E4%B9%89%E5%BA%8F%E5%88%97%E7%9A%84%E9%99%90%E5%88%B6\">4）移除对“在‘带标签的模版字面量’中使用非法转义序列”的限制</a></li>\n<li>\n<p><a href=\"/blog/2019/02/11/es2018-and-es2019/#5%EF%BC%89%E5%85%B3%E4%BA%8E%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F%E7%9A%84%E4%B8%80%E4%BA%9B%E6%94%B9%E8%BF%9B\">5）关于正则表达式的一些改进</a></p>\n<ul>\n<li><a href=\"/blog/2019/02/11/es2018-and-es2019/#51%EF%BC%89code-classgatsby-code-textscode-%E6%A0%87%E5%BF%97%EF%BC%88dotall-%E6%A8%A1%E5%BC%8F%EF%BC%89\">5.1）<code class=\"gatsby-code-text\">s</code> 标志（dotAll 模式）</a></li>\n<li><a href=\"/blog/2019/02/11/es2018-and-es2019/#52%EF%BC%89%E6%89%A9%E5%B1%95-unicode-%E5%8C%B9%E9%85%8D%E8%8C%83%E5%9B%B4\">5.2）扩展 Unicode 匹配范围</a></li>\n<li><a href=\"/blog/2019/02/11/es2018-and-es2019/#53%EF%BC%89%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F%E5%91%BD%E5%90%8D%E6%8D%95%E8%8E%B7%E7%BB%84\">5.3）正则表达式命名捕获组</a></li>\n<li><a href=\"/blog/2019/02/11/es2018-and-es2019/#54%EF%BC%89%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F%E7%9A%84%E5%8F%8D%E5%90%91%E6%96%AD%E8%A8%80%EF%BC%88lookbehind%EF%BC%89\">5.4）正则表达式的反向断言（lookbehind）</a></li>\n</ul>\n</li>\n</ul>\n</li>\n<li>\n<p><a href=\"/blog/2019/02/11/es2018-and-es2019/#es-2019%EF%BC%88es-10%EF%BC%89\">ES 2019（ES 10）</a></p>\n<ul>\n<li><a href=\"/blog/2019/02/11/es2018-and-es2019/#1%EF%BC%89json-%E6%88%90%E4%B8%BA-ecmascript-%E7%9A%84%E5%AE%8C%E5%85%A8%E5%AD%90%E9%9B%86\">1）JSON 成为 ECMAScript 的完全子集</a></li>\n<li><a href=\"/blog/2019/02/11/es2018-and-es2019/#2%EF%BC%89%E6%9B%B4%E5%8F%8B%E5%A5%BD%E7%9A%84-code-classgatsby-code-textjsonstringifycode\">2）更友好的 <code class=\"gatsby-code-text\">JSON.stringify()</code></a></li>\n<li><a href=\"/blog/2019/02/11/es2018-and-es2019/#3%EF%BC%89code-classgatsby-code-textfunctionprototpyetostringcode-%E6%98%BE%E7%A4%BA%E6%9B%B4%E5%8A%A0%E5%AE%8C%E5%96%84\">3）<code class=\"gatsby-code-text\">Function.prototpye.toString()</code> 显示更加完善</a></li>\n<li><a href=\"/blog/2019/02/11/es2018-and-es2019/#4%EF%BC%89code-classgatsby-code-textarrayprorptypeflatcode-%E5%92%8C-code-classgatsby-code-textarrayprorptypeflatmapcode\">4）<code class=\"gatsby-code-text\">Array.prorptype.flat()</code> 和 <code class=\"gatsby-code-text\">Array.prorptype.flatMap()</code></a></li>\n<li><a href=\"/blog/2019/02/11/es2018-and-es2019/#5%EF%BC%89code-classgatsby-code-textstringprototypetrimstartcode-%E5%92%8C-code-classgatsby-code-textstringprototypetrimendcode\">5）<code class=\"gatsby-code-text\">String.prototype.trimStart()</code> 和 <code class=\"gatsby-code-text\">String.prototype.trimEnd()</code></a></li>\n<li><a href=\"/blog/2019/02/11/es2018-and-es2019/#6%EF%BC%89code-classgatsby-code-textobjectfromentriescode\">6）<code class=\"gatsby-code-text\">Object.fromEntries()</code></a></li>\n<li><a href=\"/blog/2019/02/11/es2018-and-es2019/#7%EF%BC%89code-classgatsby-code-textsymbolprototypedescriptioncode\">7）<code class=\"gatsby-code-text\">Symbol.prototype.description</code></a></li>\n<li><a href=\"/blog/2019/02/11/es2018-and-es2019/#8%EF%BC%89%E5%8F%AF%E9%80%89%E7%9A%84-code-classgatsby-code-textcatchcode-%E7%BB%91%E5%AE%9A\">8）可选的 <code class=\"gatsby-code-text\">catch</code> 绑定</a></li>\n</ul>\n</li>\n<li><a href=\"/blog/2019/02/11/es2018-and-es2019/#%E9%81%97%E6%86%BE\">遗憾</a></li>\n</ul>","timeToRead":11}},"pageContext":{"slug":"/blog/2019/02/11/es2018-and-es2019"}}}