{"componentChunkName":"component---src-templates-blog-post-tsx","path":"/blog/2019/10/20/understanding-rxjs","webpackCompilationHash":"","result":{"data":{"site":{"siteMetadata":{"title":"童话说","keywords":["tonghuashuo","github","front-end","javascript","typescript","react","node","washington","hua","童话","童话说","前端","博客","技术","计算机","互联网"]}},"markdownRemark":{"html":"<h2>起源</h2>\n<p>久闻 Observable 的大名，但一直也没有特别强烈的意愿去深入了解它。直到最近，因为工作的关系正式接触到了这项技术。不用不知道，用过都说香。</p>\n<h2>说明</h2>\n<ol>\n<li>本文并不是 Observable 的教程，想系统学习 Observable 的同学还请移步各大官网。</li>\n<li>本文基于 RxJS 的 API 讨论 Observable 在 JavaScript 中的应用，其他语言的实现在细节上可能有所不同，但不属于本文的讨论范围。</li>\n</ol>\n<h2>关于 RxJS 的版本</h2>\n<p>截止发稿时，RxJS 的最新稳定版是 6.5.3，其相比上个版本引入了不少的 Breaking Change，语法上也有较大差异，这里特别申明一下。</p>\n<p>新版本在核心概念上没有本质的变化，但是对语法进行了统一，新语法也更加符合 ECMAScript 本身的发展方向，导出的目录结构也更加简洁。推荐有条件的小伙伴尽早迁移至新版。</p>\n<h2>ReactiveX</h2>\n<p>Observable 源自一个叫做 <a href=\"http://reactivex.io/\" target=\"_blank\" rel=\"noopener noreferrer\">ReactiveX</a> 的项目，「RxJS」中的「Rx」就是它的缩写。</p>\n<p>ReactiveX 提出了一种使用观察者模式进行异步编程的方法，按照其官网的描述：ReactiveX 是观察者模式、遍历器模式和函数式编程的集大成者。</p>\n<blockquote>\n<p>ReactiveX is a combination of the best ideas from the Observer pattern, the Iterator pattern, and functional programming</p>\n</blockquote>\n<p>ReactiveX 本身只负责定义核心概念和语法标准，具体实现上，不同的编程语言可以有自己的语法规则。RxJS 就是 ReactiveX 的 JS 实现，同理还有 RxJava、RxGo、RxPY 等众多其他语言的实现，时下热门的 Dart 也有相应的 RxDart。</p>\n<h2>「观察」与「被观察」</h2>\n<p>「观察」这件事，需要观察者与被观察者两个方面的参与。被观察者主动产生变化，观察者被动的接收变化。</p>\n<p>Observer 和 Observable 分别就「观察者」和「被观察者」</p>\n<h2>对比</h2>\n<p>在 JS 异步编程中，Observable 并不是唯一的选择，</p>\n<h3>Observable vs. Function</h3>\n<p>拉取和推送，只能返回单个值 vs 可返回多个值</p>\n<h3>Observable vs. Iterator / Generator</h3>\n<p>同样可返回多个值，拉取和推送的区别</p>\n<h3>Observable vs. Promise</h3>\n<p>同样是推送，只能返回单个值 vs 可返回多个值，同步和异步的区别</p>\n<h3>汇总</h3>\n<table>\n<thead>\n<tr>\n<th></th>\n<th>Function</th>\n<th>Iterator / Generator</th>\n<th>Promise</th>\n<th>Observable</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>数据获取方式</td>\n<td>拉取</td>\n<td>拉取</td>\n<td>推送</td>\n<td>推送</td>\n</tr>\n<tr>\n<td>随时间返回值数量</td>\n<td>单个值</td>\n<td>多个值</td>\n<td>单个值</td>\n<td>多个值</td>\n</tr>\n<tr>\n<td>同步/异步</td>\n<td>同步</td>\n<td>同步</td>\n<td>异步</td>\n<td>同步</td>\n</tr>\n</tbody>\n</table>\n<h2>没有观众，就没有演出</h2>\n<p><code class=\"gatsby-code-text\">subscribe()</code></p>\n<h2>退票没戏，但退订可以</h2>\n<p><code class=\"gatsby-code-text\">unsubscribe()</code></p>\n<h2>主题（Subject）</h2>\n<p>多播</p>\n<h3>观察者模式</h3>\n<h3>订阅者模式</h3>\n<h2>Scheduler</h2>\n<p>用自己理解说明几种调度器的不同</p>\n<h2>Operators</h2>\n<p>更好的分类方式？</p>\n<p>Decision Tree ？</p>\n<h2>联想到 Hooks</h2>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre style=\"counter-reset: linenumber NaN\" class=\"gatsby-code-javascript line-numbers\"><code class=\"gatsby-code-javascript\"><span class=\"token keyword\">const</span> observable <span class=\"token operator\">=</span> Rx<span class=\"token punctuation\">.</span>Observable<span class=\"token punctuation\">.</span><span class=\"token function\">create</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">observer</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token comment\">// 追踪 interval 资源</span>\n  <span class=\"token keyword\">const</span> intervalID <span class=\"token operator\">=</span> <span class=\"token function\">setInterval</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n    observer<span class=\"token punctuation\">.</span><span class=\"token function\">next</span><span class=\"token punctuation\">(</span><span class=\"token string\">'hi'</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1000</span><span class=\"token punctuation\">)</span>\n\n  <span class=\"token comment\">// 提供取消和清理 interval 资源的方法</span>\n  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n    <span class=\"token function\">clearInterval</span><span class=\"token punctuation\">(</span>intervalID<span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span></code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n<p>看，像不像 <code class=\"gatsby-code-text\">React.useEffect()</code> 的写法。</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre style=\"counter-reset: linenumber NaN\" class=\"gatsby-code-javascript line-numbers\"><code class=\"gatsby-code-javascript\"><span class=\"token function\">useEffect</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token comment\">// 追踪 interval 资源</span>\n  <span class=\"token keyword\">const</span> intervalID <span class=\"token operator\">=</span> <span class=\"token function\">setInterval</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'hi'</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1000</span><span class=\"token punctuation\">)</span>\n\n  <span class=\"token comment\">// 提供取消和清理 interval 资源的方法</span>\n  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n    <span class=\"token function\">clearInterval</span><span class=\"token punctuation\">(</span>intervalID<span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span></code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n<h2>标准化</h2>\n<p>社区已经<a href=\"https://github.com/tc39/proposal-observable\" target=\"_blank\" rel=\"noopener noreferrer\">提案将 Observable 纳入 ECMAScript 标准</a>，但目前该提案仍处于 Stage 1，且已经有日子没动静了。或许是 RxJS 作为目前众多 Observable 实现中事实上的标准，已经做得太好了，大家也已经习惯用它了，觉得有的用就好了，进不进标准影响不大。</p>\n<p>就像我曾经所说的 —— ECMAScript 标准的存在更像是一个“年度优秀特性合集”</p>","frontmatter":{"title":"Observable？真香！","description":"不用不知道，一用是真香","cover":{"publicURL":"/static/rxjs-34df4ece6d5ae84dbdf2d6519097e6c7.jpg"},"tags":["rxjs"],"series":"","draft":true},"fields":{"id":"understanding-rxjs","date":"2019-10-19T16:00:00.000Z"}}},"pageContext":{"isCreatedByStatefulCreatePages":false,"slug":"/blog/2019/10/20/understanding-rxjs"}}}