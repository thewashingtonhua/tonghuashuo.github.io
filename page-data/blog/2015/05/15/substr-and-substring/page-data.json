{"componentChunkName":"component---src-templates-blog-post-tsx","path":"/blog/2015/05/15/substr-and-substring","webpackCompilationHash":"1aa560eaee4f2c5c9b1c","result":{"data":{"site":{"siteMetadata":{"title":"童话说","keywords":["tonghuashuo","github","front-end","javascript","typescript","react","node","washington","hua","童话","童话说","前端","博客","技术","计算机","互联网"]}},"markdownRemark":{"html":"<p>JavaScript 中有两个非常常用但又非常容易混淆的函数： <code class=\"gatsby-code-text\">substr()</code> 和 <code class=\"gatsby-code-text\">substring()</code> ，两者都是 String 类型的方法，作用都是返回目标字符串的一个子串。</p>\n<p>关于两者的详细文档可以参考：<a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/substr\" target=\"_blank\" rel=\"noopener noreferrer\">[MDN] String.prototype.substr</a> 和 <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/substring\" target=\"_blank\" rel=\"noopener noreferrer\">[MDN] String.prototype.substring</a></p>\n<p>两者都接收两个参数以控制子串的起止位置。第一个参数作用相同，都表示子串的起点位置，主要区别在于第二个参数： <code class=\"gatsby-code-text\">substr()</code> 要求获取一个长度len，通过子串的长度来计算截止点，而 <code class=\"gatsby-code-text\">substring()</code> 则是直接定义终点的位置，从终点开始往后的字符串不被截取。换句话说，前者是“起点+长度”，后者是“起点+终点”。</p>\n<h2>substr( start [ , length ] )</h2>\n<ul>\n<li>\n<p><strong>start</strong></p>\n<ol>\n<li>介于0（包含）和字符串长度之间的整数，表示从这个字符串开始截取子串；</li>\n<li>若 ≥ 字符串长度，则返回空字符串；</li>\n<li>若 &#x3C; 0，则从右起计数；</li>\n<li>若 &#x3C; 0且绝对值超过字符串长度的，视为0；</li>\n</ol>\n</li>\n<li>\n<p><strong>length（可选）</strong></p>\n<ol>\n<li>介于0（包含）和剩余字符串长度之间的整数，表示最大截取该长度的字符串作为子串；</li>\n<li>若超过剩余字符串长度，则截取到字符串结束，超出部分不计；</li>\n<li>若 ≤ 0，返回空字符串；</li>\n<li>若不指定，则默认从start截取到字符串末尾；</li>\n</ol>\n</li>\n</ul>\n<p>举几个例子：</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre style=\"counter-reset: linenumber NaN\" class=\"gatsby-code-js line-numbers\"><code class=\"gatsby-code-js\"><span class=\"token keyword\">var</span> str <span class=\"token operator\">=</span> <span class=\"token string\">\"abcgefghij\"</span><span class=\"token punctuation\">;</span>\n\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'(1, 2): '</span>   <span class=\"token operator\">+</span> str<span class=\"token punctuation\">.</span><span class=\"token function\">substr</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>   <span class=\"token comment\">// '(1, 2): bc'</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'(-3, 2): '</span>  <span class=\"token operator\">+</span> str<span class=\"token punctuation\">.</span><span class=\"token function\">substr</span><span class=\"token punctuation\">(</span><span class=\"token operator\">-</span><span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  <span class=\"token comment\">// '(-3, 2): hi'</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'(-3): '</span>     <span class=\"token operator\">+</span> str<span class=\"token punctuation\">.</span><span class=\"token function\">substr</span><span class=\"token punctuation\">(</span><span class=\"token operator\">-</span><span class=\"token number\">3</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>     <span class=\"token comment\">// '(-3): hij'</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'(1): '</span>      <span class=\"token operator\">+</span> str<span class=\"token punctuation\">.</span><span class=\"token function\">substr</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>      <span class=\"token comment\">// '(1): bcdefghij'</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'(-20, 2): '</span> <span class=\"token operator\">+</span> str<span class=\"token punctuation\">.</span><span class=\"token function\">substr</span><span class=\"token punctuation\">(</span><span class=\"token operator\">-</span><span class=\"token number\">20</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// '(-20, 2): ab'</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'(20, 2): '</span>  <span class=\"token operator\">+</span> str<span class=\"token punctuation\">.</span><span class=\"token function\">substr</span><span class=\"token punctuation\">(</span><span class=\"token number\">20</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  <span class=\"token comment\">// '(20, 2): '</span></code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n<h2>substring( start [ , end ] )</h2>\n<ul>\n<li>\n<p><strong>start</strong></p>\n<ol>\n<li>介于0（包含）和字符串长度之间的整数，表示从该字符串开始截取子串；</li>\n<li>若 ≥ 字符串长度，则返回空字符串；</li>\n</ol>\n</li>\n<li>\n<p><strong>end（可选）</strong></p>\n<ol>\n<li>介于0（包含）和字符串长度之间的整数，表示从该字符开始不再被截取；</li>\n<li>若 > 字符串长度，则自动指定为字符串末尾；</li>\n<li>若不指定，则自动指定为字符串末尾；</li>\n</ol>\n</li>\n<li>\n<p><strong>特殊情况</strong></p>\n<ol>\n<li>任一参数 &#x3C; 0，或为 NaN，则将其视为 0；</li>\n<li>若 start == end，则返回空字符串；</li>\n<li>若 start > end，则两者交换数值；</li>\n</ol>\n</li>\n</ul>\n<p>举几个例子：</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre style=\"counter-reset: linenumber NaN\" class=\"gatsby-code-js line-numbers\"><code class=\"gatsby-code-js\"><span class=\"token keyword\">var</span> str <span class=\"token operator\">=</span> <span class=\"token string\">'abcdefg'</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// Displays 'abc'</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>str<span class=\"token punctuation\">.</span><span class=\"token function\">substring</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>str<span class=\"token punctuation\">.</span><span class=\"token function\">substring</span><span class=\"token punctuation\">(</span><span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// Displays 'efg'</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>str<span class=\"token punctuation\">.</span><span class=\"token function\">substring</span><span class=\"token punctuation\">(</span><span class=\"token number\">4</span><span class=\"token punctuation\">,</span> <span class=\"token number\">7</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>str<span class=\"token punctuation\">.</span><span class=\"token function\">substring</span><span class=\"token punctuation\">(</span><span class=\"token number\">7</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// Displays 'abcdef'</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>str<span class=\"token punctuation\">.</span><span class=\"token function\">substring</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">6</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// Displays 'abcdefg'</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>str<span class=\"token punctuation\">.</span><span class=\"token function\">substring</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">7</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>str<span class=\"token punctuation\">.</span><span class=\"token function\">substring</span><span class=\"token punctuation\">(</span><span class=\"token operator\">-</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">7</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>str<span class=\"token punctuation\">.</span><span class=\"token function\">substring</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">10</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n<h2>永恒的字符串</h2>\n<p>和许多其他编程语言一样，JavaScript 中的字符串也是不可改变的， <code class=\"gatsby-code-text\">substr()</code> 和 <code class=\"gatsby-code-text\">substring()</code> 都只是返回子串，要想保存结果还需要单独定义变量，否则就能即时输出一下。</p>\n<h2>跨界好基友 slice( start [ , end ] )</h2>\n<p>除了本文的两个主角，JavaScript中还有一个函数也可用于获取子串，那就是主角们的好基友 <code class=\"gatsby-code-text\">slice()</code> ，而之所以说它“跨界”，是因为 <code class=\"gatsby-code-text\">slice()</code> 函数在 String 和 Array 类中都有定义。</p>\n<p> <code class=\"gatsby-code-text\">slice()</code> 函数有点像是 <code class=\"gatsby-code-text\">substr()</code> 和 <code class=\"gatsby-code-text\">substring()</code> 的杂合体：它的标记方式和 <code class=\"gatsby-code-text\">substring()</code> 一样，通过标记起点和终点来进行子串的截取，但当任意参数为负数时，并不视其为 0，而是从字符串末尾往前倒推，这一点却和 <code class=\"gatsby-code-text\">substr()</code> 很像。（注意： <code class=\"gatsby-code-text\">slice()</code> 的两个参数都是这样，而 <code class=\"gatsby-code-text\">substr()</code> 只有第一个参数可以这样，）。同样的，第二个参数是可选的，不指定、或超出字符串长度时，默认截取到字符串末尾。并且，因为两个参数都是介于 0（包含）和字符串长度之间的，所以当第一个参数大于第二个参数时，并不会发生交换，而是返回空字符串。</p>\n<p> <code class=\"gatsby-code-text\">slice()</code> 在数组中的表现也是一样的，只不过操作对象变成了数组元素，不过JavaScript中字符串和数组本来就傻傻分不清楚，因此这里也不难理解其原理。</p>\n<h2>为什么要有 3 个</h2>\n<p> <code class=\"gatsby-code-text\">substr()</code> 、 <code class=\"gatsby-code-text\">substring()</code> 、 <code class=\"gatsby-code-text\">slice()</code> 分别提供了3中不同的截取字符串的思路，分别是：根据长度、从正向确定起止位置、从两端确定起止位置，开发人员可以根据需要灵活地选择最方便的用法。</p>","frontmatter":{"title":"substr() 和 substring() 的区别","description":"两个函数，傻傻分不清楚","cover":{"publicURL":"/static/substring-289ad52fc38963e15549cd1dc24678e4.jpg"},"tags":["javascript","substr","substring","slice"],"series":"","draft":false},"fields":{"id":"substr-and-substring","date":"2015-05-14T16:00:00.000Z"}}},"pageContext":{"isCreatedByStatefulCreatePages":false,"slug":"/blog/2015/05/15/substr-and-substring"}}}