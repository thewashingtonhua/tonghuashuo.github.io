{"version":3,"sources":["webpack:///./src/templates/blog-post.tsx"],"names":["TOC","props","className","style","dangerouslySetInnerHTML","__html","blog","tableOfContents","Series","blogs","thisSeries","frontmatter","series","seriesBlogs","filter","node","IS_PROD","draft","length","map","post","key","id","to","fields","slug","title","BlogPostContent","cover","publicURL","date","dayjs","format","useState","tocStyle","setTOCStyle","contentRef","createRef","handleScroll","elem","current","top","getBoundingClientRect","offset","Math","max","transform","useEffect","document","addEventListener","removeEventListener","articleClassName","Boolean","join","dateTime","src","alt","ref","html","BlogPostPage","data","allMarkdownRemark","edges","n","type","NodeType","sort","x","y","Date","getTime","markdownRemark","keywords","site","siteMetadata","tags","query"],"mappings":"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","file":"component---src-templates-blog-post-tsx-00c45cdd32b404e3b23b.js","sourcesContent":["import React, { useState, FC, CSSProperties, createRef, useEffect } from 'react'\nimport { Link, graphql } from 'gatsby'\nimport dayjs from 'dayjs'\nimport { Layout, SEO } from '../components'\nimport 'prismjs/plugins/line-numbers/prism-line-numbers.css'\nimport '../styles/prism-styles.scss'\nimport './blog-post.scss'\nimport { GatsbyDataProps, BlogNode, NodeType } from '../utils/interface'\nimport { IS_PROD } from 'config'\n\ninterface BlogPostProps {\n  blog: BlogNode\n  blogs: BlogNode[]\n}\n\ninterface TOCProps {\n  blog: BlogNode\n  style: CSSProperties\n}\n\nconst TOC: FC<TOCProps> = (props) => {\n  return (\n    <aside\n      className='toc'\n      style={props.style}\n      dangerouslySetInnerHTML={{\n        __html: props.blog.tableOfContents\n      }}\n    />\n  )\n}\n\ninterface SeriesProps {\n  blog: BlogNode\n  blogs: BlogNode[]\n}\n\nconst Series: FC<SeriesProps> = (props) => {\n  const { blog, blogs } = props\n  const thisSeries = blog.frontmatter.series\n\n  // 不属于任何系列\n  if (!thisSeries) return null\n\n  const seriesBlogs = blogs\n    .filter(node => node.frontmatter.series === thisSeries)\n\n  // 草稿不对外发布\n  const visibleBlogs = IS_PROD\n    ? seriesBlogs.filter(blog => !blog.frontmatter.draft)\n    : seriesBlogs\n\n  // 无可见博客则不显示\n  if (!visibleBlogs.length) {\n    return null\n  }\n\n  return (\n    <section className='series'>\n      <header className='header'>\n        <p className='title'>该系列的其他文章</p>\n      </header>\n      <ul className='posts'>\n        { seriesBlogs.map(post => (\n          <li className='post' key={post.id}>\n            <Link\n              className={(post.frontmatter.draft ? 'draft' : '')}\n              to={post.fields.slug}\n            >\n              { post.frontmatter.title }\n            </Link>\n          </li>\n        ))}\n      </ul>\n    </section>\n  )\n}\n\nconst BlogPostContent: FC<BlogPostProps> = (props) => {\n  const { blog, blogs } = props\n\n  const cover = blog.frontmatter.cover?.publicURL\n  const date = dayjs(blog.fields.date).format('MMM DD, YYYY')\n\n  const [tocStyle, setTOCStyle] = useState<CSSProperties>({})\n\n  const contentRef = createRef<HTMLDivElement>()\n\n  const handleScroll = () => {\n    const elem = contentRef.current\n    if (!elem) return\n\n    const top = elem.getBoundingClientRect().top\n    const offset = Math.max(60 - top, 0)\n    setTOCStyle({ transform: `translateY(${offset}px)` })\n  }\n\n  useEffect(() => {\n    document.addEventListener('scroll', handleScroll)\n\n    return () => {\n      document.removeEventListener('scroll', handleScroll)\n    }\n  })\n\n  const articleClassName = [\n    blog.frontmatter.draft && 'draft',\n  ].filter(Boolean).join(' ')\n\n  return (\n    <article className={articleClassName} id={`blog__${blog.fields.id}`}>\n      <h1 className='post-title'>{blog.frontmatter.title}</h1>\n      <div className='metas'>\n        <p className='publish-date'>\n          <time dateTime={blog.fields.date}>{date}</time>\n        </p>\n      </div>\n      { cover &&\n        <div className='banner'>\n          <img src={cover} alt='' />\n        </div>\n      }\n      <div className='content-wrapper' ref={contentRef}>\n        <div className='content' dangerouslySetInnerHTML={{ __html: blog.html }} />\n        <TOC blog={blog} style={tocStyle} />\n      </div>\n\n      <Series blog={blog} blogs={blogs} />\n    </article>\n  )\n}\n\nconst BlogPostPage: FC<GatsbyDataProps> = (props) => {\n  const { data } = props\n  const nodes = data.allMarkdownRemark.edges.map(n => n.node) as BlogNode[]\n  const blogs = nodes\n    .filter(node => node.fields.type === NodeType.blog)\n    .sort((x, y) => new Date(y.fields.date).getTime() - new Date(x.fields.date).getTime())\n  const blog = data.markdownRemark as BlogNode\n\n  return (\n    <Layout>\n      <SEO\n        title={`${blog.frontmatter.title} | 博客`}\n        keywords={[\n          ...data.site.siteMetadata.keywords,\n          ...blog.frontmatter.tags\n        ]}\n      />\n\n      <div className='mf-content blog-post'>\n        <p className='back-to-parent'><Link to='/blog'>&laquo; 回到博客列表</Link></p>\n        <BlogPostContent blog={blog} blogs={blogs} />\n      </div>\n    </Layout>\n  )\n}\n\nexport default BlogPostPage\n\nexport const query = graphql`\nquery($slug: String!) {\n  site {\n    siteMetadata {\n      title,\n      keywords\n    }\n  }\n  allMarkdownRemark {\n    totalCount\n    edges {\n      node {\n        id\n        frontmatter {\n          title\n          description\n          tags\n          cover {\n            publicURL\n          }\n          series\n          draft\n          original\n        }\n        fields {\n          id\n          slug\n          type\n          date\n        }\n      }\n    }\n  }\n  markdownRemark(fields: { slug: { eq: $slug } }) {\n    html\n    frontmatter {\n      title\n      description\n      cover {\n        publicURL\n      }\n      tags\n      series\n      draft\n    }\n    fields {\n      id\n      date\n    }\n    headings {\n      value\n      depth\n    }\n    tableOfContents\n  }\n}`\n"],"sourceRoot":""}