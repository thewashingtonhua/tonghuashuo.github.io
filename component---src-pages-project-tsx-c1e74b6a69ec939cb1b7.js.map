{"version":3,"sources":["webpack:///./src/pages/project.tsx"],"names":["props","data","projects","allMarkdownRemark","edges","map","n","node","filter","fields","type","IS_PROD","frontmatter","draft","sort","x","y","Date","from","getTime","personalProjects","category","commercialProjects","visibleProjects","length","push","title","totalCount","reduce","keywords","site","siteMetadata","className","item","key","cover","publicURL","to","slug","id","src","alt","description","query"],"mappings":"4FAAA,sHAOe,mBAACA,GAA2B,IACjCC,EAASD,EAATC,KAEFC,EADQD,EAAKE,kBAAkBC,MAAMC,KAAI,SAAAC,GAAC,OAAIA,EAAEC,QAEnDC,QAAO,SAAAD,GAAI,MAAyB,YAArBA,EAAKE,OAAOC,QAC3BF,QAAO,SAAAD,GAAI,OAAKI,MAAYJ,EAAKK,YAAYC,SAC7CC,MAAK,SAACC,EAAGC,GAAJ,OAAU,IAAIC,KAAKD,EAAEJ,YAAYM,MAAMC,UAAY,IAAIF,KAAKF,EAAEH,YAAYM,MAAMC,aAElFC,EAAmBlB,EAASM,QAAO,SAAAD,GAAI,MAAkC,aAA9BA,EAAKK,YAAYS,YAC5DC,EAAqBpB,EAASM,QAAO,SAAAD,GAAI,MAAkC,eAA9BA,EAAKK,YAAYS,YAE9DE,EAAkB,GACpBH,EAAiBI,QACnBD,EAAgBE,KAAK,CAAEC,MAAO,OAAQzB,KAAMmB,IAE1CE,EAAmBE,QACrBD,EAAgBE,KAAK,CAAEC,MAAO,OAAQzB,KAAMqB,IAG9C,IAAMK,EAAaJ,EAAgBlB,KAAI,SAAAC,GAAC,OAAIA,EAAEL,KAAKuB,UAAQI,QAAO,SAACb,EAAGC,GAAJ,OAAUD,EAAIC,IAAG,GAEnF,OACE,kBAAC,IAAD,KACE,kBAAC,IAAD,CACEU,MAAM,MACNG,SAAU5B,EAAK6B,KAAKC,aAAaF,WAEnC,yBAAKG,UAAU,8BACb,wBAAIA,UAAU,SAAd,QAA4BL,EAA5B,KACEJ,EAAgBlB,KAAI,SAAA4B,GAAI,OACxB,kBAAC,WAAD,CAAUC,IAAKD,EAAKP,OAClB,wBAAIM,UAAU,0BAA0BC,EAAKP,MAA7C,KAAsDO,EAAKhC,KAAKuB,OAAhE,KACA,yBAAKQ,UAAU,gBACXC,EAAKhC,KAAKI,KAAI,SAAAE,GACd,IAAM4B,EAAQ5B,EAAKK,YAAYuB,MAC3B5B,EAAKK,YAAYuB,MAAMC,UACvB,GACJ,OACE,kBAAC,OAAD,CAAMJ,UAAW,WAAazB,EAAKK,YAAYC,MAAQ,SAAW,IAAKwB,GAAI9B,EAAKE,OAAO6B,KAAMJ,IAAK3B,EAAKE,OAAO6B,KAAMC,GAAIhC,EAAKE,OAAO8B,IAClI,yBAAKP,UAAU,SACb,yBAAKQ,IAAKL,EAAOM,IAAI,MAEvB,yBAAKT,UAAU,SACb,4BAAKzB,EAAKK,YAAYc,OACtB,2BAAInB,EAAKK,YAAY8B,0BAapC,IAAMC,EAAQ","file":"component---src-pages-project-tsx-c1e74b6a69ec939cb1b7.js","sourcesContent":["import React, { Fragment } from 'react'\nimport { Link, graphql } from 'gatsby'\nimport { Layout, SEO } from '../components'\nimport './project.scss'\nimport { GatsbyDataProps } from '../utils/interface'\nimport { IS_PROD } from 'config';\n\nexport default (props: GatsbyDataProps) => {\n  const { data } = props\n  const nodes = data.allMarkdownRemark.edges.map(n => n.node)\n  const projects = nodes\n    .filter(node => node.fields.type === 'project')\n    .filter(node => !IS_PROD || !node.frontmatter.draft)\n    .sort((x, y) => new Date(y.frontmatter.from).getTime() - new Date(x.frontmatter.from).getTime())\n\n  const personalProjects = projects.filter(node => node.frontmatter.category === 'personal')\n  const commercialProjects = projects.filter(node => node.frontmatter.category === 'commercial')\n\n  const visibleProjects = []\n  if (personalProjects.length) {\n    visibleProjects.push({ title: '个人作品', data: personalProjects })\n  }\n  if (commercialProjects.length) {\n    visibleProjects.push({ title: '商业作品', data: commercialProjects })\n  }\n\n  const totalCount = visibleProjects.map(n => n.data.length).reduce((x, y) => x + y, 0)\n\n  return (\n    <Layout>\n      <SEO\n        title='代表作'\n        keywords={data.site.siteMetadata.keywords}\n      />\n      <div className='mf-content project-catalog'>\n        <h1 className='title'>代表作 ({totalCount})</h1>\n        { visibleProjects.map(item =>\n          <Fragment key={item.title}>\n            <h2 className='project-category-title'>{item.title} ({item.data.length})</h2>\n            <div className='project-list'>\n              { item.data.map(node => {\n                const cover = node.frontmatter.cover\n                  ? node.frontmatter.cover.publicURL\n                  : ''\n                return (\n                  <Link className={'project' + (node.frontmatter.draft ? ' draft' : '')} to={node.fields.slug} key={node.fields.slug} id={node.fields.id}>\n                    <div className='cover'>\n                      <img src={cover} alt='' />\n                    </div>\n                    <div className='intro'>\n                      <h2>{node.frontmatter.title}</h2>\n                      <p>{node.frontmatter.description}</p>\n                    </div>\n                  </Link>\n                )\n              })}\n            </div>\n          </Fragment>\n        )}\n      </div>\n    </Layout>\n  )\n}\n\nexport const query = graphql`\nquery {\n  site {\n    siteMetadata {\n      title,\n      keywords\n    }\n  }\n  allMarkdownRemark(sort: { fields: [frontmatter___from], order: DESC }) {\n    totalCount\n    edges {\n      node {\n        id\n        frontmatter {\n          title\n          description\n          cover {\n            publicURL\n          }\n          from\n          to\n          draft\n          category\n        }\n        fields {\n          id\n          slug\n          type\n        }\n      }\n    }\n  }\n}`\n"],"sourceRoot":""}